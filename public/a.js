// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// A web environment like Electron.js can have Node enabled, so we must
// distinguish between Node-enabled environments and Node environments per se.
// This will allow the former to do things like mount NODEFS.
// Extended check using process.versions fixes issue #8816.
// (Also makes redundant the original check that 'require' is a function.)
ENVIRONMENT_HAS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;




// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';


  read_ = function shell_read(filename, binary) {
    var ret = tryParseAsDataURI(filename);
    if (ret) {
      return binary ? ret : ret.toString();
    }
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };




  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };


} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = {};
    console.log = print;
    console.warn = console.error = typeof printErr !== 'undefined' ? printErr : print;
  }
} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_HAS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {


  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };




  }

  setWindowTitle = function(title) { document.title = title };
} else
{
}


// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];
if (Module['thisProgram']) thisProgram = Module['thisProgram'];
if (Module['quit']) quit_ = Module['quit'];

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message

// TODO remove when SDL2 is fixed (also see above)



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;


function dynamicAlloc(size) {
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort();
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}





// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  var table = wasmTable;
  var ret = table.length;

  // Grow the table
  try {
    table.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.';
  }

  // Insert new element
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    table.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction');
    var wrapped = convertJsFunctionToWasm(func, sig);
    table.set(ret, wrapped);
  }

  return ret;
}

function removeFunctionWasm(index) {
  // TODO(sbc): Look into implementing this to allow re-using of table slots
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {

  return addFunctionWasm(func, sig);
}

function removeFunction(index) {
  removeFunctionWasm(index);
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};


var Runtime = {
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.


// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
var
WebAssembly = {
  Memory: function(opts) {
    return {
      buffer: new ArrayBuffer(opts['initial'] * 65536),
      grow: function(amount) {
        var ret = __growWasmMemory(amount);
        return ret;
      }
    };
  },

  Table: function(opts) {
    var ret = new Array(opts['initial']);
    ret.grow = function(by) {
      if (ret.length >= 444 + 0) {
        abort('Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.')
      }
      ret.push(null);
    };
    ret.set = function(i, func) {
      ret[i] = func;
    };
    ret.get = function(i) {
      return ret[i];
    };
    return ret;
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
    return {};
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // XXX hack to get an atob implementation

// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


    var atob = decodeBase64;
    // This will be replaced by the actual wasm2js code.
    var exports = (
function instantiate(asmLibraryArg, wasmMemory, wasmTable) {


  var scratchBuffer = new ArrayBuffer(8);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function legalimport$wasm2js_scratch_store_i64(low, high) {
    i32ScratchView[0] = low;
    i32ScratchView[1] = high;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[0] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[0];
  }
      
function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var FUNCTION_TABLE = wasmTable;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var fimport$0 = env._embind_register_class;
 var fimport$1 = env.__cxa_allocate_exception;
 var fimport$2 = env.__cxa_throw;
 var fimport$3 = env._embind_register_class_constructor;
 var fimport$4 = env._embind_register_class_function;
 var fimport$5 = env.time;
 var fimport$6 = env.fd_close;
 var fimport$7 = env.fd_read;
 var fimport$8 = env.fd_write;
 var fimport$9 = env.__lock;
 var fimport$10 = env.__unlock;
 var fimport$11 = env.environ_sizes_get;
 var fimport$12 = env.environ_get;
 var fimport$13 = env.__map_file;
 var fimport$14 = env.__syscall91;
 var fimport$15 = env.strftime_l;
 var fimport$16 = env.abort;
 var fimport$17 = env.__syscall5;
 var fimport$18 = env.__syscall3;
 var fimport$19 = env._embind_register_void;
 var fimport$20 = env._embind_register_bool;
 var fimport$21 = env._embind_register_std_string;
 var fimport$22 = env._embind_register_std_wstring;
 var fimport$23 = env._embind_register_emval;
 var fimport$24 = env._embind_register_integer;
 var fimport$25 = env._embind_register_float;
 var fimport$26 = env._embind_register_memory_view;
 var fimport$27 = env.emscripten_resize_heap;
 var fimport$28 = env.emscripten_memcpy_big;
 var fimport$29 = env.setTempRet0;
 var fimport$30 = env.fd_seek;
 var global$0 = 5269552;
 var global$1 = 26668;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS;
 function $1() {
  $850();
  $766();
  $48();
  $256();
  $549();
  $591();
  FUNCTION_TABLE[443](26160) | 0;
 }
 
 function $2($0, $1_1, $2_1, $3) {
  var $4_1 = 0;
  HEAP32[$0 >> 2] = 1360;
  HEAP32[$0 + 12 >> 2] = $3;
  HEAP32[$0 + 8 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $1_1;
  HEAP32[$0 >> 2] = 1032;
  $4_1 = $1576(28);
  $345($4_1, $1_1, $2_1, $3);
  HEAP32[$0 + 16 >> 2] = $4_1;
  return $0;
 }
 
 function $4($0) {
  $0 = $0 | 0;
 }
 
 function $5($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
  $5_1 = global$0 - 368 | 0;
  global$0 = $5_1;
  label$1 : {
   if ($6($2_1, 1044)) {
    $7($0, 1044);
    break label$1;
   }
   if ($6($2_1, 1053)) {
    $7($0, 1053);
    break label$1;
   }
   $4_1 = $8($5_1 + 352 | 0);
   $8_1 = $9($5_1 + 208 | 0, $2_1);
   $6_1 = $10($5_1 + 192 | 0);
   while (1) {
    $2_1 = $11($8_1, $6_1, 32);
    if ($12(HEAP32[HEAP32[$2_1 >> 2] + -12 >> 2] + $2_1 | 0)) {
     $13($4_1, $6_1);
     continue;
    }
    break;
   };
   label$6 : {
    label$7 : {
     $2_1 = $1593($5_1 + 176 | 0, $14($4_1, 0));
     if (!$6($2_1, 1057)) {
      if (!$6($2_1, 1088)) {
       break label$7
      }
     }
     $3 = $0;
     $0 = HEAP32[$1_1 + 16 >> 2];
     ((((wasm2js_i32$1 = $3, wasm2js_i32$2 = $0), wasm2js_i32$3 = $14($4_1, 1)), wasm2js_i32$4 = $14($4_1, 2)), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0);
     break label$6;
    }
    label$9 : {
     if (!$6($2_1, 1101)) {
      if (!$6($2_1, 1128)) {
       break label$9
      }
     }
     $7_1 = $8($5_1 + 160 | 0);
     if (($15($4_1) | 0) == 3) {
      $9_1 = $9($5_1 + 16 | 0, $14($4_1, 2));
      $3 = $10($5_1);
      while (1) {
       $10_1 = $11($9_1, $3, 44);
       if ($12($10_1 + HEAP32[HEAP32[$10_1 >> 2] + -12 >> 2] | 0)) {
        $13($7_1, $3);
        continue;
       }
       break;
      };
      $1597($3);
      $16($9_1);
     }
     $3 = $0;
     $0 = HEAP32[$1_1 + 16 >> 2];
     ((((wasm2js_i32$4 = $3, wasm2js_i32$3 = $0), wasm2js_i32$2 = $14($4_1, 1)), wasm2js_i32$1 = $7_1), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 4 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$4 | 0, wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     $17($7_1);
     break label$6;
    }
    label$14 : {
     if (!$6($2_1, 1138)) {
      if (!$6($2_1, 1179)) {
       break label$14
      }
     }
     $3 = $0;
     $0 = HEAP32[$1_1 + 16 >> 2];
     (((wasm2js_i32$1 = $3, wasm2js_i32$2 = $0), wasm2js_i32$3 = $14($4_1, 1)), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 8 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0);
     break label$6;
    }
    label$16 : {
     if (!$6($2_1, 1195)) {
      if (!$6($2_1, 1228)) {
       break label$16
      }
     }
     $3 = $0;
     $0 = HEAP32[$1_1 + 16 >> 2];
     (((wasm2js_i32$3 = $3, wasm2js_i32$2 = $0), wasm2js_i32$1 = $14($4_1, 1)), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 12 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     break label$6;
    }
    label$18 : {
     if (!$6($2_1, 1242)) {
      if (!$6($2_1, 1253)) {
       break label$18
      }
     }
     $3 = $0;
     $0 = HEAP32[$1_1 + 16 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($3, $0);
     break label$6;
    }
    $7($0, 1260);
   }
   $1597($2_1);
   $1597($6_1);
   $16($8_1);
   $17($4_1);
  }
  global$0 = $5_1 + 368 | 0;
 }
 
 function $6($0, $1_1) {
  var $2_1 = 0;
  $2_1 = $644($1_1);
  if (($2_1 | 0) == ($19($0) | 0)) {
   $0 = !$1610($0, $1_1, $2_1)
  } else {
   $0 = 0
  }
  return $0;
 }
 
 function $7($0, $1_1) {
  $25($0);
  $1595($0, $1_1, $644($1_1));
  return $0;
 }
 
 function $8($0) {
  $21($0);
  return $0;
 }
 
 function $9($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = $22($0 - -64 | 0);
  HEAP32[$0 >> 2] = 1384;
  HEAP32[$2_1 >> 2] = 1424;
  HEAP32[$0 + 8 >> 2] = 1404;
  $3 = $0 + 12 | 0;
  $23($0, $3);
  HEAP32[$0 >> 2] = 1384;
  HEAP32[$2_1 >> 2] = 1424;
  HEAP32[$0 + 8 >> 2] = 1404;
  $24($3, $1_1);
  return $0;
 }
 
 function $10($0) {
  $25($0);
  $25($0);
  return $0;
 }
 
 function $11($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  if (HEAPU8[$679($6_1 + 8 | 0, $0) | 0]) {
   $27($1_1);
   while (1) {
    $3 = $29(HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2]);
    label$3 : {
     if ($31($3, -1)) {
      $4_1 = $4_1 | 2;
      $5_1 = 3;
      break label$3;
     }
     $7_1 = $7_1 + 1 | 0;
     $3 = $32($3);
     $5_1 = 3;
     if ($31($3, $2_1)) {
      break label$3
     }
     $1608($1_1, $3);
     $3 = ($19($1_1) | 0) == -17;
     $4_1 = $3 ? $4_1 | 4 : $4_1;
     $5_1 = $3 ? 3 : 0;
    }
    if (!$5_1) {
     continue
    }
    break;
   };
   $34(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, $7_1 ? $4_1 : $4_1 | 4);
  }
  global$0 = $6_1 + 16 | 0;
  return $0;
 }
 
 function $12($0) {
  return (HEAPU8[$0 + 16 | 0] & 5) != 0 ^ 1;
 }
 
 function $13($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (HEAP32[$0 + 4 >> 2] != HEAP32[$36($0) >> 2]) {
    $40($36($0), HEAP32[$0 + 4 >> 2], $1_1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 12;
    break label$1;
   }
   $41($0, $1_1);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $14($0, $1_1) {
  return HEAP32[$0 >> 2] + Math_imul($1_1, 12) | 0;
 }
 
 function $15($0) {
  return (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 12 | 0;
 }
 
 function $16($0) {
  $0 = $0 | 0;
  $0 = $42($0);
  $648($0 - -64 | 0);
  return $0 | 0;
 }
 
 function $17($0) {
  var $1_1 = 0;
  $43($0);
  if (HEAP32[$0 >> 2]) {
   $135($0);
   $36($0);
   $1_1 = HEAP32[$0 >> 2];
   $136($0);
   $1769($1_1);
  }
 }
 
 function $19($0) {
  if ($94($0)) {
   return HEAP32[$0 + 4 >> 2]
  }
  return HEAPU8[$0 + 11 | 0];
 }
 
 function $21($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  $131($0 + 8 | 0, $1_1 + 12 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $22($0) {
  $144($0);
  HEAP32[$0 >> 2] = 4768;
  return $0;
 }
 
 function $23($0, $1_1) {
  var $2_1 = 0;
  $145($0, $1_1);
  $1_1 = $0 + 8 | 0;
  $2_1 = HEAP32[362];
  HEAP32[$1_1 >> 2] = $2_1;
  HEAP32[HEAP32[$2_1 + -12 >> 2] + $1_1 >> 2] = HEAP32[363];
  $1_1 = HEAP32[359];
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[HEAP32[$1_1 + -12 >> 2] + $0 >> 2] = HEAP32[364];
  HEAP32[$0 + 8 >> 2] = HEAP32[365];
 }
 
 function $24($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $654($0);
  HEAP32[$0 >> 2] = 1704;
  $148($0 + 32 | 0, $2_1 + 8 | 0);
  HEAP32[$0 + 48 >> 2] = 24;
  HEAP32[$0 + 44 >> 2] = 0;
  $149($0, $1_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $25($0) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
 }
 
 function $27($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if ($94($0)) {
    $2_1 = HEAP32[$0 >> 2];
    HEAP8[$1_1 + 15 | 0] = 0;
    $124($2_1, $1_1 + 15 | 0);
    $122($0, 0);
    break label$1;
   }
   HEAP8[$1_1 + 14 | 0] = 0;
   $124($0, $1_1 + 14 | 0);
   $114($0, 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $29($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 + 12 >> 2];
  if (($1_1 | 0) == HEAP32[$0 + 16 >> 2]) {
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0
  }
  HEAP32[$0 + 12 >> 2] = $1_1 + 1;
  return $85(HEAP8[$1_1 | 0]);
 }
 
 function $31($0, $1_1) {
  return ($0 | 0) == ($1_1 | 0);
 }
 
 function $32($0) {
  return $0 << 24 >> 24;
 }
 
 function $34($0, $1_1) {
  HEAP32[$0 + 16 >> 2] = !HEAP32[$0 + 24 >> 2] | (HEAP32[$0 + 16 >> 2] | $1_1);
 }
 
 function $36($0) {
  return $0 + 8 | 0;
 }
 
 function $37($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0 | 0;
 }
 
 function $39($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function $40($0, $1_1, $2_1) {
  $1593($1_1, $2_1);
 }
 
 function $41($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $2_1 = $36($0);
  $4_1 = $2_1;
  $2_1 = $157($3 + 8 | 0, $156($0, $15($0) + 1 | 0), $15($0), $2_1);
  $40($4_1, HEAP32[$2_1 + 8 >> 2], $1_1);
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2] + 12;
  $158($0, $2_1);
  $190($2_1, HEAP32[$2_1 + 4 >> 2]);
  if (HEAP32[$2_1 >> 2]) {
   $164($2_1);
   $0 = HEAP32[$2_1 >> 2];
   HEAP32[$166($2_1) >> 2];
   $1769($0);
  }
  global$0 = $3 + 32 | 0;
 }
 
 function $42($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[358];
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[HEAP32[$1_1 + -12 >> 2] + $0 >> 2] = HEAP32[366];
  HEAP32[$0 + 8 >> 2] = HEAP32[367];
  $63($0 + 12 | 0);
  return $0;
 }
 
 function $43($0) {
  $136($0);
  $15($0);
  $136($0);
 }
 
 function $46($0) {
  $0 = $0 | 0;
  $1769($0);
 }
 
 function $48() {
  var $0 = 0, $1_1 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  fimport$0(1340, 1924, 1960, 0, 1976, 1, 1979, 0, 1979, 0, 1288, 1981, 2);
  $60();
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 4;
  $1_1 = HEAP32[$0 + 12 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$0 + 4 >> 2] = $1_1;
  $61($0);
  global$0 = $0 + 16 | 0;
 }
 
 function $55($0) {
  $0 = $0 | 0;
  return HEAP32[HEAP32[$0 >> 2] + -4 >> 2];
 }
 
 function $58($0) {
  $0 = $0 | 0;
  if ($0) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0)
  }
 }
 
 function $59($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $2($1576(20), $0, $1_1, $2_1) | 0;
 }
 
 function $60() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  fimport$3(1340, 4, 1984, 2e3, 5, 3);
  global$0 = $0 + 16 | 0;
 }
 
 function $61($0) {
  var $1_1 = 0, $2_1 = 0, $3 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1_1 + 8 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1_1 + 12 >> 2] = $2_1;
  $0 = $1576(8);
  $2_1 = $1_1 + 8 | 0;
  $3 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $3;
  fimport$4(1340, 1301, 3, 2008, 2156, 6, $0 | 0, 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $62($0) {
  $0 = $0 | 0;
  abort();
 }
 
 function $63($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 1704;
  $1597($0 + 32 | 0);
  $652($0);
  return $0 | 0;
 }
 
 function $64($0) {
  $0 = $0 | 0;
  return $16($0 + -8 | 0) | 0;
 }
 
 function $65($0) {
  $0 = $0 | 0;
  return $16(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) | 0;
 }
 
 function $66($0) {
  $0 = $0 | 0;
  $1769($16($0));
 }
 
 function $67($0) {
  $0 = $0 | 0;
  $66($0 + -8 | 0);
 }
 
 function $68($0) {
  $0 = $0 | 0;
  $66(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
 }
 
 function $69($0) {
  $0 = $0 | 0;
  $1769($63($0));
 }
 
 function $70($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  if (HEAPU32[$1_1 + 44 >> 2] < HEAPU32[$1_1 + 24 >> 2]) {
   HEAP32[$1_1 + 44 >> 2] = HEAP32[$1_1 + 24 >> 2]
  }
  $9_1 = -1;
  $10_1 = -1;
  $6_1 = $5_1 & 24;
  label$2 : {
   if (!$6_1 | (($6_1 | 0) == 24 ? ($4_1 | 0) == 1 : 0)) {
    break label$2
   }
   $6_1 = 0;
   $11_1 = HEAP32[$1_1 + 44 >> 2];
   if ($11_1) {
    $7_1 = $11_1 - $93($1_1 + 32 | 0) | 0;
    $12_1 = $7_1;
    $7_1 = $7_1 >> 31;
   }
   if ($4_1 >>> 0 > 2) {
    break label$2
   }
   label$4 : {
    label$5 : {
     switch ($4_1 - 1 | 0) {
     case 0:
      if ($5_1 & 8) {
       $4_1 = HEAP32[$1_1 + 12 >> 2] - HEAP32[$1_1 + 8 >> 2] | 0;
       $6_1 = $4_1;
       $8_1 = $4_1 >> 31;
       break label$4;
      }
      $4_1 = HEAP32[$1_1 + 24 >> 2] - HEAP32[$1_1 + 20 >> 2] | 0;
      $6_1 = $4_1;
      $8_1 = $4_1 >> 31;
      break label$4;
     case 1:
      break label$5;
     default:
      break label$4;
     };
    }
    $6_1 = $12_1;
    $8_1 = $7_1;
   }
   $3 = $3 + $8_1 | 0;
   $2_1 = $2_1 + $6_1 | 0;
   if ($2_1 >>> 0 < $6_1 >>> 0) {
    $3 = $3 + 1 | 0
   }
   if ((($3 | 0) < 0 ? 1 : ($3 | 0) <= 0 ? ($2_1 >>> 0 >= 0 ? 0 : 1) : 0) | (($7_1 | 0) < ($3 | 0) ? 1 : ($7_1 | 0) <= ($3 | 0) ? ($12_1 >>> 0 >= $2_1 >>> 0 ? 0 : 1) : 0)) {
    break label$2
   }
   label$8 : {
    if (!($2_1 | $3)) {
     break label$8
    }
    if (HEAP32[$1_1 + 12 >> 2] ? 0 : $5_1 & 8) {
     break label$2
    }
    if (!($5_1 & 16)) {
     break label$8
    }
    if (!HEAP32[$1_1 + 24 >> 2]) {
     break label$2
    }
   }
   if ($5_1 & 8) {
    $76($1_1, HEAP32[$1_1 + 8 >> 2], $2_1 + HEAP32[$1_1 + 8 >> 2] | 0, HEAP32[$1_1 + 44 >> 2])
   }
   if ($5_1 & 16) {
    $78($1_1, HEAP32[$1_1 + 20 >> 2], HEAP32[$1_1 + 28 >> 2]);
    $79($1_1, $2_1);
   }
   $9_1 = $2_1;
   $10_1 = $3;
  }
  $80($0, $9_1, $10_1);
 }
 
 function $73($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function $74($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 8 >> 2];
 }
 
 function $76($0, $1_1, $2_1, $3) {
  HEAP32[$0 + 16 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $1_1;
 }
 
 function $78($0, $1_1, $2_1) {
  HEAP32[$0 + 28 >> 2] = $2_1;
  HEAP32[$0 + 20 >> 2] = $1_1;
  HEAP32[$0 + 24 >> 2] = $1_1;
 }
 
 function $79($0, $1_1) {
  HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + $1_1;
 }
 
 function $80($0, $1_1, $2_1) {
  HEAP32[$0 + 8 >> 2] = $1_1;
  HEAP32[$0 + 12 >> 2] = $2_1;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function $81($0, $1_1, $2_1, $3) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  i64toi32_i32$HIGH_BITS = HEAP32[$2_1 + 12 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 16 >> 2]]($0, $1_1, HEAP32[$2_1 + 8 >> 2], i64toi32_i32$HIGH_BITS, 0, $3);
 }
 
 function $83($0) {
  $0 = $0 | 0;
  if (HEAPU32[$0 + 44 >> 2] < HEAPU32[$0 + 24 >> 2]) {
   HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 24 >> 2]
  }
  label$2 : {
   if (!(HEAPU8[$0 + 48 | 0] & 8)) {
    break label$2
   }
   if (HEAPU32[$0 + 16 >> 2] < HEAPU32[$0 + 44 >> 2]) {
    $76($0, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 44 >> 2])
   }
   if (HEAPU32[$0 + 12 >> 2] >= HEAPU32[$0 + 16 >> 2]) {
    break label$2
   }
   return $85(HEAP8[HEAP32[$0 + 12 >> 2]]) | 0;
  }
  return -1;
 }
 
 function $85($0) {
  return $0 & 255;
 }
 
 function $86($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  if (HEAPU32[$0 + 44 >> 2] < HEAPU32[$0 + 24 >> 2]) {
   HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 24 >> 2]
  }
  label$2 : {
   if (HEAPU32[$0 + 8 >> 2] >= HEAPU32[$0 + 12 >> 2]) {
    break label$2
   }
   if ($31($1_1, -1)) {
    $76($0, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2] + -1 | 0, HEAP32[$0 + 44 >> 2]);
    return $87($1_1) | 0;
   }
   if (!(HEAPU8[$0 + 48 | 0] & 16)) {
    if (!$31($32($1_1), HEAP8[HEAP32[$0 + 12 >> 2] + -1 | 0])) {
     break label$2
    }
   }
   $76($0, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2] + -1 | 0, HEAP32[$0 + 44 >> 2]);
   $2_1 = $32($1_1);
   HEAP8[HEAP32[$0 + 12 >> 2]] = $2_1;
   return $1_1 | 0;
  }
  return -1;
 }
 
 function $87($0) {
  if ($31($0, -1)) {
   $0 = 0
  }
  return $0;
 }
 
 function $88($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  label$1 : {
   if (!$31($1_1, -1)) {
    $5_1 = HEAP32[$0 + 12 >> 2];
    $6_1 = HEAP32[$0 + 8 >> 2];
    if (HEAP32[$0 + 24 >> 2] == HEAP32[$0 + 28 >> 2]) {
     $2_1 = -1;
     if (!(HEAPU8[$0 + 48 | 0] & 16)) {
      break label$1
     }
     $7_1 = HEAP32[$0 + 24 >> 2];
     $8_1 = HEAP32[$0 + 20 >> 2];
     $9_1 = HEAP32[$0 + 44 >> 2];
     $10_1 = HEAP32[$0 + 20 >> 2];
     $2_1 = $0 + 32 | 0;
     $1608($2_1, 0);
     $90($2_1, $89($2_1));
     $4_1 = $93($2_1);
     $78($0, $4_1, $19($2_1) + $4_1 | 0);
     $79($0, $7_1 - $8_1 | 0);
     HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 20 >> 2] + ($9_1 - $10_1 | 0);
    }
    HEAP32[$3 + 12 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
    (wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[$91($3 + 12 | 0, $0 + 44 | 0) >> 2]), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
    if (HEAPU8[$0 + 48 | 0] & 8) {
     $2_1 = $93($0 + 32 | 0);
     $76($0, $2_1, $2_1 + ($5_1 - $6_1 | 0) | 0, HEAP32[$0 + 44 >> 2]);
    }
    $2_1 = $92($0, $1_1 << 24 >> 24);
    break label$1;
   }
   $2_1 = $87($1_1);
  }
  $0 = $2_1;
  global$0 = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function $89($0) {
  if ($94($0)) {
   $0 = $98($0) + -1 | 0
  } else {
   $0 = 10
  }
  return $0;
 }
 
 function $90($0, $1_1) {
  $1602($0, $1_1);
 }
 
 function $91($0, $1_1) {
  return $101($0, $1_1);
 }
 
 function $92($0, $1_1) {
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2_1 = HEAP32[$0 + 24 >> 2];
  if (($2_1 | 0) == HEAP32[$0 + 28 >> 2]) {
   return ((wasm2js_i32$1 = $0, wasm2js_i32$2 = $85($1_1)), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0
  }
  HEAP32[$0 + 24 >> 2] = $2_1 + 1;
  HEAP8[$2_1 | 0] = $1_1;
  return $85($1_1);
 }
 
 function $93($0) {
  if ($94($0)) {
   return HEAP32[$0 >> 2]
  }
  return $0;
 }
 
 function $94($0) {
  return HEAP8[$0 + 11 | 0] < 0;
 }
 
 function $98($0) {
  return HEAP32[$0 + 8 >> 2] & 2147483647;
 }
 
 function $101($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = $102($0, $1_1);
  global$0 = $2_1 + 16 | 0;
  return $3 ? $1_1 : $0;
 }
 
 function $102($0, $1_1) {
  return HEAPU32[$0 >> 2] < HEAPU32[$1_1 >> 2];
 }
 
 function $114($0, $1_1) {
  HEAP8[$0 + 11 | 0] = $1_1;
 }
 
 function $116($0) {
  var $1_1 = 0;
  if ($0 >>> 0 >= 11) {
   $1_1 = $0 + 16 & -16;
   $0 = $1_1 + -1 | 0;
   $0 = ($0 | 0) == 11 ? $1_1 : $0;
  } else {
   $0 = 10
  }
  return $0;
 }
 
 function $118($0, $1_1) {
  if (4294967295 < $1_1 >>> 0) {
   $127(1840);
   abort();
  }
  return $1576($1_1);
 }
 
 function $120($0, $1_1) {
  HEAP32[$0 >> 2] = $1_1;
 }
 
 function $121($0, $1_1) {
  HEAP32[$0 + 8 >> 2] = $1_1 | -2147483648;
 }
 
 function $122($0, $1_1) {
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $123($0, $1_1, $2_1) {
  if ($2_1) {
   $1778($0, $1_1, $2_1)
  }
 }
 
 function $124($0, $1_1) {
  HEAP8[$0 | 0] = HEAPU8[$1_1 | 0];
 }
 
 function $127($0) {
  var $1_1 = 0;
  $1_1 = fimport$1(8) | 0;
  $1587($1_1, $0);
  HEAP32[$1_1 >> 2] = 17888;
  fimport$2($1_1 | 0, 17920, 7);
  abort();
 }
 
 function $131($0, $1_1) {
  HEAP32[$0 >> 2] = 0;
 }
 
 function $135($0) {
  $139($0, HEAP32[$0 >> 2]);
 }
 
 function $136($0) {
  return (HEAP32[$36($0) >> 2] - HEAP32[$0 >> 2] | 0) / 12 | 0;
 }
 
 function $139($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $36($0);
    $2_1 = $2_1 + -12 | 0;
    $143($2_1);
    continue;
   }
   break;
  };
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $143($0) {
  $1597($0);
 }
 
 function $144($0) {
  HEAP32[$0 >> 2] = 4724;
 }
 
 function $145($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[360];
  HEAP32[$0 >> 2] = $2_1;
  HEAP32[HEAP32[$2_1 + -12 >> 2] + $0 >> 2] = HEAP32[361];
  HEAP32[$0 + 4 >> 2] = 0;
  $150(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, $1_1);
 }
 
 function $148($0, $1_1) {
  $151($0, $1_1);
  $25($0);
  return $0;
 }
 
 function $149($0, $1_1) {
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = $0 + 32 | 0;
  $1598($2_1, $1_1);
  HEAP32[$0 + 44 >> 2] = 0;
  if (HEAPU8[$0 + 48 | 0] & 8) {
   (wasm2js_i32$0 = $0, wasm2js_i32$1 = $93($2_1) + $19($2_1) | 0), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
   $76($0, $93($2_1), $93($2_1), HEAP32[$0 + 44 >> 2]);
  }
  label$2 : {
   if (!(HEAPU8[$0 + 48 | 0] & 16)) {
    break label$2
   }
   $1_1 = $19($2_1);
   (wasm2js_i32$0 = $0, wasm2js_i32$1 = $1_1 + $93($2_1) | 0), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
   $90($2_1, $89($2_1));
   $78($0, $93($2_1), $93($2_1) + $19($2_1) | 0);
   if (!(HEAPU8[$0 + 48 | 0] & 3)) {
    break label$2
   }
   if (($1_1 | 0) <= -1) {
    while (1) {
     $79($0, 2147483647);
     $1_1 = $1_1 + -2147483647 | 0;
     if (($1_1 | 0) < 0) {
      continue
     }
     break;
    }
   }
   if (!$1_1) {
    break label$2
   }
   $79($0, $1_1);
  }
 }
 
 function $150($0, $1_1) {
  $739($0, $1_1);
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 + 76 >> 2] = -1;
 }
 
 function $151($0, $1_1) {
  $25($0);
  return $0;
 }
 
 function $156($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $1_1 = $161($0);
  if (HEAPU32[$2_1 + 12 >> 2] <= $1_1 >>> 0) {
   $0 = $136($0);
   if ($0 >>> 0 < $1_1 >>> 1 >>> 0) {
    HEAP32[$2_1 + 8 >> 2] = $0 << 1;
    $1_1 = HEAP32[$91($2_1 + 8 | 0, $2_1 + 12 | 0) >> 2];
   }
   global$0 = $2_1 + 16 | 0;
   return $1_1;
  }
  $1629();
  abort();
 }
 
 function $157($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $163($0 + 12 | 0, $4_1 + 12 | 0, $3);
  if ($1_1) {
   $164($0);
   $5_1 = $181($1_1);
  }
  HEAP32[$0 >> 2] = $5_1;
  $2_1 = Math_imul($2_1, 12) + $5_1 | 0;
  HEAP32[$0 + 8 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  (wasm2js_i32$0 = $166($0), wasm2js_i32$1 = Math_imul($1_1, 12) + $5_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $158($0, $1_1) {
  var $2_1 = 0;
  $43($0);
  $2_1 = $1_1 + 4 | 0;
  $167($36($0), HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2_1);
  $168($0, $2_1);
  $168($0 + 4 | 0, $1_1 + 8 | 0);
  $168($36($0), $166($1_1));
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 + 4 >> 2];
  $169($0, $15($0));
 }
 
 function $161($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $36($0);
  HEAP32[$1_1 + 12 >> 2] = 357913941;
  HEAP32[$1_1 + 8 >> 2] = 2147483647;
  $0 = HEAP32[$175($1_1 + 12 | 0, $1_1 + 8 | 0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $163($0, $1_1, $2_1) {
  $131($0, $1_1);
  $180($0 + 4 | 0, $2_1);
 }
 
 function $164($0) {
  return $182($0 + 12 | 0);
 }
 
 function $166($0) {
  return $0 + 12 | 0;
 }
 
 function $167($0, $1_1, $2_1, $3) {
  if (($1_1 | 0) != ($2_1 | 0)) {
   while (1) {
    $2_1 = $2_1 + -12 | 0;
    $187(HEAP32[$3 >> 2] + -12 | 0, $2_1);
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + -12;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $168($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 + 12 >> 2];
  global$0 = $2_1 + 16 | 0;
 }
 
 function $169($0, $1_1) {
  $136($0);
  $136($0);
 }
 
 function $175($0, $1_1) {
  return $176($0, $1_1);
 }
 
 function $176($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = $102($1_1, $0);
  global$0 = $2_1 + 16 | 0;
  return $3 ? $1_1 : $0;
 }
 
 function $180($0, $1_1) {
  HEAP32[$0 >> 2] = $1_1;
  return $0;
 }
 
 function $181($0) {
  if (357913941 < $0 >>> 0) {
   $127(1840);
   abort();
  }
  return $1576(Math_imul($0, 12));
 }
 
 function $182($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 4 >> 2];
 }
 
 function $187($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
  $25($1_1);
 }
 
 function $190($0, $1_1) {
  var $2_1 = 0;
  while (1) {
   if (($1_1 | 0) != HEAP32[$0 + 8 >> 2]) {
    $164($0);
    $2_1 = HEAP32[$0 + 8 >> 2] + -12 | 0;
    HEAP32[$0 + 8 >> 2] = $2_1;
    $143($2_1);
    continue;
   }
   break;
  };
 }
 
 function $195($0) {
  $0 = $0 | 0;
  return 4;
 }
 
 function $198($0, $1_1, $2_1, $3) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  return FUNCTION_TABLE[$0]($1_1, $2_1, $3) | 0;
 }
 
 function $203($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1_1 = ($0 >> 1) + $1_1 | 0;
  $0 = $0 & 1 ? HEAP32[$4_1 + HEAP32[$1_1 >> 2] >> 2] : $4_1;
  $4_1 = HEAP32[$2_1 >> 2];
  $25($3);
  $1595($3, $2_1 + 4 | 0, $4_1);
  FUNCTION_TABLE[$0]($3 + 16 | 0, $1_1, $3);
  $0 = $206($3 + 16 | 0);
  $1597($3 + 16 | 0);
  $1597($3);
  global$0 = $3 + 32 | 0;
  return $0 | 0;
 }
 
 function $206($0) {
  var $1_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = $1768($19($0) + 4 | 0);
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $19($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $1778($1_1 + 4 | 0, $93($0), $19($0));
  return $1_1;
 }
 
 function $211($0, $1_1) {
  label$1 : {
   if (!$212($1_1)) {
    if (!$6($1_1, 2161)) {
     break label$1
    }
   }
   $0 = fimport$1(8) | 0;
   $213($0, 2163);
   fimport$2($0 | 0, 17868, 7);
   abort();
  }
  $1598($0 + 4 | 0, $1_1);
 }
 
 function $212($0) {
  return !$19($0);
 }
 
 function $213($0, $1_1) {
  $1587($0, $1_1);
  HEAP32[$0 >> 2] = 17832;
 }
 
 function $214($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAPF64[$3 + 8 >> 3] = $2_1;
  HEAP32[$0 >> 2] = 2252;
  $10($0 + 4 | 0);
  $4_1 = $0 + 24 | 0;
  HEAP32[$4_1 >> 2] = 2684;
  $8($4_1 + 4 | 0);
  $211($0, $1_1);
  $216($0, $3 + 8 | 0);
  global$0 = $3 + 16 | 0;
 }
 
 function $216($0, $1_1) {
  var $2_1 = 0.0;
  $2_1 = HEAPF64[$1_1 >> 3];
  if (!!($2_1 < 0.0)) {
   $0 = fimport$1(8) | 0;
   $213($0, 2264);
   fimport$2($0 | 0, 17868, 7);
   abort();
  }
  HEAPF64[$0 + 16 >> 3] = $2_1;
 }
 
 function $217($0) {
  $0 = $0 | 0;
  return $0 + 4 | 0;
 }
 
 function $219($0) {
  return HEAPF64[$0 + 16 >> 3] > 0.0;
 }
 
 function $220($0) {
  return $0 + 24 | 0;
 }
 
 function $221($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAPF64[$1_1 + 8 >> 3] = Math_max(HEAPF64[$0 + 16 >> 3] + -10.0, 0.0);
  $216($0, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $222($0, $1_1) {
  return $223($0 + 4 | 0, $217($1_1));
 }
 
 function $223($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = $19($0);
  if (($2_1 | 0) != ($19($1_1) | 0)) {
   return 0
  }
  $3 = $93($0);
  $1_1 = $93($1_1);
  label$2 : {
   if (!$94($0)) {
    if ($2_1) {
     break label$2
    }
    return 1;
   }
   return !$224($3, $1_1, $2_1);
  }
  while (1) {
   if (HEAPU8[$3 | 0] != HEAPU8[$1_1 | 0]) {
    return 0
   }
   $1_1 = $1_1 + 1 | 0;
   $3 = $3 + 1 | 0;
   $2_1 = $2_1 + -1 | 0;
   if ($2_1) {
    continue
   }
   break;
  };
  return 1;
 }
 
 function $224($0, $1_1, $2_1) {
  if (!$2_1) {
   return 0
  }
  return $643($0, $1_1, $2_1);
 }
 
 function $225($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 2252;
  $339($0 + 24 | 0);
  $1597($0 + 4 | 0);
  return $0 | 0;
 }
 
 function $226($0) {
  $0 = $0 | 0;
  $1769($225($0));
 }
 
 function $227($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $228($0 + 4 | 0, $1_1);
 }
 
 function $228($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (HEAP32[$0 + 4 >> 2] != HEAP32[$36($0) >> 2]) {
    $231($36($0), HEAP32[$0 + 4 >> 2], $1_1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 40;
    break label$1;
   }
   $232($0, $1_1);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $231($0, $1_1, $2_1) {
  $269($1_1, $2_1);
 }
 
 function $232($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $2_1 = $36($0);
  $4_1 = $2_1;
  $2_1 = $265($3 + 8 | 0, $264($0, $234($0) + 1 | 0), $234($0), $2_1);
  $231($4_1, HEAP32[$2_1 + 8 >> 2], $1_1);
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2] + 40;
  $266($0, $2_1);
  $301($2_1, HEAP32[$2_1 + 4 >> 2]);
  if (HEAP32[$2_1 >> 2]) {
   $164($2_1);
   $0 = HEAP32[$2_1 >> 2];
   HEAP32[$166($2_1) >> 2];
   $1769($0);
  }
  global$0 = $3 + 32 | 0;
 }
 
 function $233($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $0 = $0 + 4 | 0;
  $3 = $234($0);
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $237($235($0), $236($0), $1_1)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  $1_1 = $238($2_1 + 24 | 0, $2_1 + 16 | 0);
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $236($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $4_1 = $238($2_1 + 8 | 0, $2_1);
  $239($0, HEAP32[$1_1 >> 2], HEAP32[$4_1 >> 2]);
  $0 = $234($0);
  global$0 = $2_1 + 32 | 0;
  return $0 >>> 0 < $3 >>> 0 | 0;
 }
 
 function $234($0) {
  return (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 40 | 0;
 }
 
 function $235($0) {
  return $245(HEAP32[$0 >> 2]);
 }
 
 function $236($0) {
  return $245(HEAP32[$0 + 4 >> 2]);
 }
 
 function $237($0, $1_1, $2_1) {
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  HEAP32[$3 + 16 >> 2] = $1_1;
  HEAP32[$3 + 24 >> 2] = $0;
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = $246($0, $1_1, $2_1)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
  label$1 : {
   if (!$241($3 + 24 | 0, $3 + 16 | 0)) {
    break label$1
   }
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 24 >> 2];
   if (!$241($248($3 + 8 | 0), $3 + 16 | 0)) {
    break label$1
   }
   while (1) {
    if (!$222(HEAP32[$3 + 8 >> 2], $2_1)) {
     $249(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 8 >> 2]);
     $248($3 + 24 | 0);
    }
    if ($241($248($3 + 8 | 0), $3 + 16 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $3 + 32 | 0;
  return HEAP32[$3 + 24 >> 2];
 }
 
 function $238($0, $1_1) {
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  return $0;
 }
 
 function $239($0, $1_1, $2_1) {
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  HEAP32[$3 + 16 >> 2] = $2_1;
  HEAP32[$3 + 24 >> 2] = $1_1;
  $1_1 = HEAP32[$0 >> 2];
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = $235($0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  $1_1 = $1_1 + Math_imul($240($3 + 24 | 0, $3 + 8 | 0), 40) | 0;
  if ($241($3 + 24 | 0, $3 + 16 | 0)) {
   $2_1 = $323($1_1 + Math_imul($240($3 + 16 | 0, $3 + 24 | 0), 40) | 0, HEAP32[$0 + 4 >> 2], $1_1);
   $234($0);
   $321($0, $2_1);
   $293($0);
   $234($0);
  }
  $245($1_1);
  global$0 = $3 + 32 | 0;
 }
 
 function $240($0, $1_1) {
  return (HEAP32[$0 >> 2] - HEAP32[$1_1 >> 2] | 0) / 40 | 0;
 }
 
 function $241($0, $1_1) {
  return $306($0, $1_1) ^ 1;
 }
 
 function $244($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $245($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0 = HEAP32[$180($1_1 + 8 | 0, $0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $246($0, $1_1, $2_1) {
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 >> 2] = $1_1;
  HEAP32[$3 + 8 >> 2] = $0;
  label$1 : {
   if (!$241($3 + 8 | 0, $3)) {
    break label$1
   }
   while (1) {
    if ($222(HEAP32[$3 + 8 >> 2], $2_1)) {
     break label$1
    }
    $248($3 + 8 | 0);
    if ($241($3 + 8 | 0, $3)) {
     continue
    }
    break;
   };
  }
  global$0 = $3 + 16 | 0;
  return HEAP32[$3 + 8 >> 2];
 }
 
 function $248($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 40;
  return $0;
 }
 
 function $249($0, $1_1) {
  var $2_1 = 0;
  $1598($0 + 4 | 0, $1_1 + 4 | 0);
  $2_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$0 + 20 >> 2] = $2_1;
  $308($0 + 28 | 0, $1_1 + 28 | 0);
 }
 
 function $250($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 2388;
  $1_1 = $0 + 4 | 0;
  $252($1_1);
  $253($1_1);
  return $0 | 0;
 }
 
 function $252($0) {
  $293($0);
  $234($0);
  $293($0);
 }
 
 function $253($0) {
  var $1_1 = 0;
  if (HEAP32[$0 >> 2]) {
   $321($0, HEAP32[$0 >> 2]);
   $36($0);
   $1_1 = HEAP32[$0 >> 2];
   $293($0);
   $1769($1_1);
  }
 }
 
 function $254($0) {
  $0 = $0 | 0;
  $1769($250($0));
 }
 
 function $256() {
  fimport$0(2484, 2588, 2628, 0, 1976, 51, 1979, 0, 1979, 0, 2408, 1981, 52);
  $262();
 }
 
 function $260($0) {
  $0 = $0 | 0;
  if ($0) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0)
  }
 }
 
 function $261() {
  var $0 = 0;
  $0 = $1576(16);
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 2656;
  HEAP32[$0 >> 2] = 2388;
  $8($0 + 4 | 0);
  return $0 | 0;
 }
 
 function $262() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  fimport$3(2484, 1, 2644, 1976, 54, 53);
  global$0 = $0 + 16 | 0;
 }
 
 function $264($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $1_1 = $280($0);
  if (HEAPU32[$2_1 + 12 >> 2] <= $1_1 >>> 0) {
   $0 = $293($0);
   if ($0 >>> 0 < $1_1 >>> 1 >>> 0) {
    HEAP32[$2_1 + 8 >> 2] = $0 << 1;
    $1_1 = HEAP32[$91($2_1 + 8 | 0, $2_1 + 12 | 0) >> 2];
   }
   global$0 = $2_1 + 16 | 0;
   return $1_1;
  }
  $1629();
  abort();
 }
 
 function $265($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $163($0 + 12 | 0, $4_1 + 12 | 0, $3);
  if ($1_1) {
   $164($0);
   $3 = $1_1;
   if (107374182 < $1_1 >>> 0) {
    $127(2496);
    abort();
   }
   $5_1 = $1576(Math_imul($3, 40));
  }
  HEAP32[$0 >> 2] = $5_1;
  $2_1 = Math_imul($2_1, 40) + $5_1 | 0;
  HEAP32[$0 + 8 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  (wasm2js_i32$0 = $166($0), wasm2js_i32$1 = Math_imul($1_1, 40) + $5_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $266($0, $1_1) {
  var $2_1 = 0;
  $252($0);
  $2_1 = $1_1 + 4 | 0;
  $286($36($0), HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2_1);
  $168($0, $2_1);
  $168($0 + 4 | 0, $1_1 + 8 | 0);
  $168($36($0), $166($1_1));
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 + 4 >> 2];
  $234($0);
  $293($0);
  $293($0);
 }
 
 function $269($0, $1_1) {
  var $2_1 = 0;
  HEAP32[$0 >> 2] = 2252;
  $1593($0 + 4 | 0, $1_1 + 4 | 0);
  $2_1 = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$0 + 16 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$0 + 20 >> 2] = $2_1;
  $2_1 = $0 + 24 | 0;
  HEAP32[$2_1 >> 2] = 2684;
  $271($2_1 + 4 | 0, $1_1 + 28 | 0);
  return $0;
 }
 
 function $271($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $36($1_1);
  $273($0, $2_1 + 8 | 0);
  $3 = $15($1_1);
  if ($3) {
   $274($0, $3);
   $275($0, HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], $3);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $273($0, $1_1) {
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  $131($0 + 8 | 0, $1_1 + 12 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $274($0, $1_1) {
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ($161($0) >>> 0 < $1_1 >>> 0) {
   $1629();
   abort();
  }
  $36($0);
  $2_1 = $181($1_1);
  HEAP32[$0 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  (wasm2js_i32$0 = $36($0), wasm2js_i32$1 = Math_imul($1_1, 12) + $2_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $169($0, 0);
 }
 
 function $275($0, $1_1, $2_1, $3) {
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $277($36($0), $1_1, $2_1, $0 + 4 | 0);
  global$0 = $3 + 16 | 0;
 }
 
 function $277($0, $1_1, $2_1, $3) {
  if (($1_1 | 0) != ($2_1 | 0)) {
   while (1) {
    $40($0, HEAP32[$3 >> 2], $1_1);
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 12;
    $1_1 = $1_1 + 12 | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $280($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $36($0);
  HEAP32[$1_1 + 12 >> 2] = 107374182;
  HEAP32[$1_1 + 8 >> 2] = 2147483647;
  $0 = HEAP32[$175($1_1 + 12 | 0, $1_1 + 8 | 0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $286($0, $1_1, $2_1, $3) {
  if (($1_1 | 0) != ($2_1 | 0)) {
   while (1) {
    $2_1 = $2_1 + -40 | 0;
    $231($0, HEAP32[$3 >> 2] + -40 | 0, $2_1);
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + -40;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $293($0) {
  return (HEAP32[$36($0) >> 2] - HEAP32[$0 >> 2] | 0) / 40 | 0;
 }
 
 function $301($0, $1_1) {
  var $2_1 = 0;
  while (1) {
   if (($1_1 | 0) != HEAP32[$0 + 8 >> 2]) {
    $164($0);
    $2_1 = HEAP32[$0 + 8 >> 2] + -40 | 0;
    HEAP32[$0 + 8 >> 2] = $2_1;
    $303($2_1);
    continue;
   }
   break;
  };
 }
 
 function $303($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0) | 0;
 }
 
 function $306($0, $1_1) {
  return HEAP32[$0 >> 2] == HEAP32[$1_1 >> 2];
 }
 
 function $308($0, $1_1) {
  if (($0 | 0) != ($1_1 | 0)) {
   $310($0, HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2])
  }
 }
 
 function $310($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $4_1 = $311($1_1, $2_1);
  label$1 : {
   if ($4_1 >>> 0 <= $136($0) >>> 0) {
    HEAP32[$3 + 12 >> 2] = $2_1;
    if ($4_1 >>> 0 > $15($0) >>> 0) {
     HEAP32[$3 + 12 >> 2] = $1_1;
     $5_1 = $15($0);
     $6_1 = $3 + 12 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] + Math_imul($5_1, 12);
     $5_1 = 1;
    }
    $1_1 = $318($1_1, HEAP32[$3 + 12 >> 2], HEAP32[$0 >> 2]);
    if ($5_1) {
     $275($0, HEAP32[$3 + 12 >> 2], $2_1, $4_1 - $15($0) | 0);
     break label$1;
    }
    $314($0, $1_1);
    break label$1;
   }
   $315($0);
   $274($0, $156($0, $4_1));
   $275($0, $1_1, $2_1, $4_1);
  }
  global$0 = $3 + 16 | 0;
 }
 
 function $311($0, $1_1) {
  return ($1_1 - $0 | 0) / 12 | 0;
 }
 
 function $314($0, $1_1) {
  var $2_1 = 0;
  $2_1 = $15($0);
  $139($0, $1_1);
  $319($0, $2_1);
 }
 
 function $315($0) {
  var $1_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if (HEAP32[$0 >> 2]) {
   $1_1 = $15($0);
   $135($0);
   $319($0, $1_1);
   $36($0);
   $1_1 = HEAP32[$0 >> 2];
   $136($0);
   $1769($1_1);
   (wasm2js_i32$0 = $36($0), wasm2js_i32$1 = 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
  }
 }
 
 function $318($0, $1_1, $2_1) {
  if (($0 | 0) != ($1_1 | 0)) {
   while (1) {
    $1598($2_1, $0);
    $2_1 = $2_1 + 12 | 0;
    $0 = $0 + 12 | 0;
    if (($1_1 | 0) != ($0 | 0)) {
     continue
    }
    break;
   }
  }
  return $2_1;
 }
 
 function $319($0, $1_1) {
  $136($0);
  $15($0);
 }
 
 function $321($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $36($0);
    $2_1 = $2_1 + -40 | 0;
    $303($2_1);
    continue;
   }
   break;
  };
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $323($0, $1_1, $2_1) {
  if (($0 | 0) != ($1_1 | 0)) {
   while (1) {
    $249($2_1, $0);
    $2_1 = $2_1 + 40 | 0;
    $0 = $0 + 40 | 0;
    if (($1_1 | 0) != ($0 | 0)) {
     continue
    }
    break;
   }
  }
  return $2_1;
 }
 
 function $329($0) {
  $0 = $0 | 0;
  return 1;
 }
 
 function $331($0) {
  $0 = $0 | 0;
  return FUNCTION_TABLE[$0]() | 0;
 }
 
 function $338($0) {
  return $15($0 + 4 | 0) >>> 0 > 2;
 }
 
 function $339($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 2684;
  $17($0 + 4 | 0);
  return $0 | 0;
 }
 
 function $340($0) {
  $0 = $0 | 0;
  $1769($339($0));
 }
 
 function $342($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAPF64[$1_1 + 8 >> 3] = HEAPF64[$0 + 16 >> 3] + -2.0 < 0.0 ? 0.0 : HEAPF64[$0 + 16 >> 3] + -2.0;
  $216($0, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $343($0) {
  $0 = $0 | 0;
  $225($0);
  return $0 | 0;
 }
 
 function $344($0) {
  $0 = $0 | 0;
  $1769($343($0));
 }
 
 function $345($0, $1_1, $2_1, $3) {
  var $4_1 = 0;
  HEAP32[$0 >> 2] = 3600;
  HEAP32[$0 >> 2] = 2764;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $348($0 + 16 | 0, $4_1 + 8 | 0);
  global$0 = $4_1 + 16 | 0;
  HEAP32[$0 + 12 >> 2] = $3;
  HEAP32[$0 + 8 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $348($0, $1_1) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  $436($0 + 8 | 0, $1_1 + 12 | 0);
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $217($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $349($0, $1_1, $2_1, $3) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $5_1 = $10($4_1 + 32 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$6($2_1, 2792)) {
      if (!$6($2_1, 2805)) {
       break label$3
      }
     }
     $350($5_1, 2792);
     $2_1 = $1576(40);
     $214($2_1, $3, 70.0);
     HEAP32[$2_1 >> 2] = 2720;
     break label$2;
    }
    label$5 : {
     if (!$6($2_1, 2815)) {
      if (!$6($2_1, 2834)) {
       break label$5
      }
     }
     $350($5_1, 2815);
     $2_1 = $1576(40);
     $214($2_1, $3, 65.0);
     HEAP32[$2_1 >> 2] = 3708;
     break label$2;
    }
    if (!$6($2_1, 2844)) {
     if (!$6($2_1, 2865)) {
      break label$1
     }
    }
    $350($5_1, 2844);
    $2_1 = $1576(40);
    $214($2_1, $3, 90.0);
    HEAP32[$2_1 >> 2] = 3752;
   }
   $1_1 = HEAP32[$1_1 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 4 >> 2]]($1_1, $2_1);
   $351($4_1, $3);
   $352($4_1 + 16 | 0, $4_1, $5_1);
   $353($0, $4_1 + 16 | 0);
   $1597($4_1 + 16 | 0);
   $1597($4_1);
   $1597($5_1);
   global$0 = $4_1 + 48 | 0;
   return;
  }
  $0 = fimport$1(8) | 0;
  $213($0, 2879);
  fimport$2($0 | 0, 17868, 7);
  abort();
 }
 
 function $350($0, $1_1) {
  $1599($0, $1_1, $644($1_1));
 }
 
 function $351($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $0 = $148($0, $2_1 + 8 | 0);
  $3 = $19($1_1);
  $4_1 = $644(2927);
  $1611($0, $93($1_1), $3, $3 + $4_1 | 0);
  $1606($0, 2927, $4_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $352($0, $1_1, $2_1) {
  $187($0, $354($1_1, $2_1));
 }
 
 function $353($0, $1_1) {
  $1608($1_1, 10);
  $187($0, $1_1);
 }
 
 function $354($0, $1_1) {
  return $1606($0, $93($1_1), $19($1_1));
 }
 
 function $355($0, $1_1, $2_1, $3) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = $565($1576(28), $2_1);
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $235($3)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $236($3)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
  if ($241($4_1 + 8 | 0, $4_1 + 24 | 0)) {
   while (1) {
    $3 = HEAP32[$4_1 + 8 >> 2];
    $13($566($5_1), $3);
    $359($4_1 + 8 | 0);
    if ($241($4_1 + 8 | 0, $4_1 + 24 | 0)) {
     continue
    }
    break;
   }
  }
  $1_1 = HEAP32[$1_1 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 4 >> 2]]($1_1, $5_1);
  $1624($4_1 + 8 | 0, 2973, $2_1);
  $353($0, $4_1 + 8 | 0);
  $1597($4_1 + 8 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $359($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 12;
  return $0;
 }
 
 function $360($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $5_1 = $235(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] >> 2]]($4_1) | 0);
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = $361($5_1, $236(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] >> 2]]($4_1) | 0), $2_1)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = $236(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] >> 2]]($4_1) | 0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  label$1 : {
   label$2 : {
    if (!$241($3 + 24 | 0, $3 + 8 | 0)) {
     break label$2
    }
    $1_1 = HEAP32[$1_1 + 4 >> 2];
    if (!FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($1_1, HEAP32[$3 + 24 >> 2])) {
     break label$2
    }
    $1624($3 + 8 | 0, 3023, $2_1);
    $353($0, $3 + 8 | 0);
    $1597($3 + 8 | 0);
    break label$1;
   }
   $7($0, 3083);
  }
  global$0 = $3 + 32 | 0;
 }
 
 function $361($0, $1_1, $2_1) {
  var $3 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  HEAP32[$3 + 16 >> 2] = $1_1;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $2_1;
  label$1 : {
   if (!$241($3 + 24 | 0, $3 + 16 | 0)) {
    break label$1
   }
   while (1) {
    if ($223(HEAP32[$3 + 8 >> 2], $217(HEAP32[$3 + 24 >> 2]))) {
     break label$1
    }
    $248($3 + 24 | 0);
    if ($241($3 + 24 | 0, $3 + 16 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $3 + 32 | 0;
  return HEAP32[$3 + 24 >> 2];
 }
 
 function $363($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 2576 | 0;
  global$0 = $3;
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  $7_1 = $235(FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] >> 2]]($5_1) | 0);
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  $8_1 = $236(FUNCTION_TABLE[HEAP32[HEAP32[$5_1 >> 2] >> 2]]($5_1) | 0);
  $5_1 = $3 + 72 | 0;
  $4_1 = $7($3 + 56 | 0, 3126);
  $6_1 = $1581($3 + 32 | 0, $4_1);
  $385($5_1, $1583($6_1));
  $365($7_1, $8_1, $5_1);
  $5_1 = fimport$6(HEAP32[$6_1 >> 2]) | 0;
  $749(($5_1 | 0) == 27 ? 0 : $5_1);
  $1597($4_1);
  $5_1 = $8($3 + 72 | 0);
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $4_1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] >> 2]]($4_1) | 0;
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = $235($4_1)), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = $236($4_1)), HEAP32[wasm2js_i32$0 + 32 >> 2] = wasm2js_i32$1;
  if ($241($3 + 56 | 0, $3 + 32 | 0)) {
   while (1) {
    $4_1 = HEAP32[$3 + 56 >> 2];
    label$3 : {
     if (!(HEAPF64[$4_1 + 16 >> 3] > 20.0)) {
      break label$3
     }
     if ($338($220($4_1))) {
      break label$3
     }
     HEAP32[$3 + 16 >> 2] = $4_1;
     $367($5_1, $3 + 16 | 0);
    }
    $248($3 + 56 | 0);
    if ($241($3 + 56 | 0, $3 + 32 | 0)) {
     continue
    }
    break;
   }
  }
  label$4 : {
   if (!$368($5_1)) {
    $4_1 = HEAP32[$1_1 + 8 >> 2];
    $6_1 = $235(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] >> 2]]($4_1) | 0);
    $4_1 = HEAP32[$1_1 + 8 >> 2];
    (wasm2js_i32$0 = $3, wasm2js_i32$1 = $371($6_1, $236(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] >> 2]]($4_1) | 0), $2_1)), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
    $4_1 = HEAP32[$1_1 + 8 >> 2];
    (wasm2js_i32$0 = $3, wasm2js_i32$1 = $236(FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] >> 2]]($4_1) | 0)), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
    if ($306($3 + 48 | 0, $3 + 56 | 0)) {
     break label$4
    }
    $4_1 = $642();
    $6_1 = HEAP32[$1_1 + 12 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$6_1 >> 2] >> 2]]($6_1, HEAP32[$3 + 48 >> 2], $5_1, (($4_1 | 0) % 100 | 0) > 48);
    $372($3 + 56 | 0, $1_1 + 16 | 0, $2_1);
    $1_1 = $375($235($5_1), $236($5_1));
    $1624($3 + 16 | 0, 3258, $2_1);
    $187($3 + 32 | 0, $1607($3 + 16 | 0, 3304));
    $1625($3, $1_1);
    $352($3 + 56 | 0, $3 + 32 | 0, $3);
    $353($0, $3 + 56 | 0);
    $1597($3 + 56 | 0);
    $1597($3);
    $1597($3 + 32 | 0);
    $1597($3 + 16 | 0);
    $399($5_1);
    $400($5_1);
    global$0 = $3 + 2576 | 0;
    return;
   }
   $0 = fimport$1(8) | 0;
   $1587($0, 3139);
   fimport$2($0 | 0, 17812, 7);
   abort();
  }
  $0 = fimport$1(8) | 0;
  $213($0, 3210);
  fimport$2($0 | 0, 17868, 7);
  abort();
 }
 
 function $365($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  HEAP32[$3 + 16 >> 2] = $1_1;
  HEAP32[$3 + 24 >> 2] = $0;
  $0 = $240($3 + 16 | 0, $3 + 24 | 0);
  label$1 : {
   if (($0 | 0) < 2) {
    break label$1
   }
   $381($3 + 8 | 0, 0, 2147483647);
   $1_1 = $3 + 16 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + -40;
   if (!$102($3 + 24 | 0, $3 + 16 | 0)) {
    break label$1
   }
   while (1) {
    $0 = $0 + -1 | 0;
    $1_1 = $382($2_1, $381($3, 0, $0));
    if ($1_1) {
     $4_1 = HEAP32[$3 + 24 >> 2];
     (wasm2js_i32$0 = $3, wasm2js_i32$1 = $383($3 + 24 | 0, $1_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $384($4_1, HEAP32[$3 >> 2]);
    }
    $248($3 + 24 | 0);
    if ($102($3 + 24 | 0, $3 + 16 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $3 + 32 | 0;
 }
 
 function $367($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (HEAPU32[$0 + 4 >> 2] < HEAPU32[$36($0) >> 2]) {
    $389($36($0), HEAP32[$0 + 4 >> 2], $1_1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 4;
    break label$1;
   }
   $390($0, $1_1);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $368($0) {
  return HEAP32[$0 >> 2] == HEAP32[$0 + 4 >> 2];
 }
 
 function $371($0, $1_1, $2_1) {
  var $3 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  HEAP32[$3 + 16 >> 2] = $1_1;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $2_1;
  label$1 : {
   if (!$241($3 + 24 | 0, $3 + 16 | 0)) {
    break label$1
   }
   while (1) {
    if ($223($217(HEAP32[$3 + 24 >> 2]), HEAP32[$3 + 8 >> 2])) {
     break label$1
    }
    $393($3 + 24 | 0);
    if ($241($3 + 24 | 0, $3 + 16 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $3 + 32 | 0;
  return HEAP32[$3 + 24 >> 2];
 }
 
 function $372($0, $1_1, $2_1) {
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $485($3 + 8 | 0, $1_1, $2_1, $2_1);
  $1_1 = $3 + 8 | 0;
  $180($0, HEAP32[$1_1 >> 2]);
  HEAP8[$0 + 4 | 0] = HEAPU8[$1_1 + 4 | 0];
  global$0 = $3 + 16 | 0;
 }
 
 function $375($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 >> 2] = $1_1;
  HEAP32[$2_1 + 8 >> 2] = $0;
  $0 = 0;
  if ($241($2_1 + 8 | 0, $2_1)) {
   while (1) {
    $0 = $0 + ($219(HEAP32[HEAP32[$2_1 + 8 >> 2] >> 2]) ^ 1) | 0;
    $398($2_1 + 8 | 0);
    if ($241($2_1 + 8 | 0, $2_1)) {
     continue
    }
    break;
   }
  }
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $381($0, $1_1, $2_1) {
  HEAP32[$0 + 4 >> 2] = $2_1;
  HEAP32[$0 >> 2] = $1_1;
  return $0;
 }
 
 function $382($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $3 = HEAP32[$1_1 + 4 >> 2] - HEAP32[$1_1 >> 2] | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  label$1 : {
   if (!$3) {
    break label$1
   }
   $3 = $3 + 1 | 0;
   if (!$3) {
    $2_1 = $445($440($4_1 + 8 | 0, $0, 32));
    break label$1;
   }
   $2_1 = $0;
   $0 = Math_clz32($3);
   $0 = $440($4_1 + 8 | 0, $2_1, ($3 & -1 >>> $0 + 1 ? 32 : 31) - $0 | 0);
   while (1) {
    $2_1 = $445($0);
    if ($2_1 >>> 0 >= $3 >>> 0) {
     continue
    }
    break;
   };
   $2_1 = $2_1 + HEAP32[$1_1 >> 2] | 0;
  }
  $0 = $2_1;
  global$0 = $4_1 + 48 | 0;
  return $0;
 }
 
 function $383($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0 >> 2];
  $0 = $2_1 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + Math_imul($1_1, 40);
  global$0 = $2_1 + 16 | 0;
  return HEAP32[$2_1 + 8 >> 2];
 }
 
 function $384($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  $3 = $269($2_1 + 8 | 0, $0);
  $249($0, $1_1);
  $249($1_1, $3);
  $225($3);
  global$0 = $2_1 + 48 | 0;
 }
 
 function $385($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  HEAP32[$0 >> 2] = $1_1;
  $1_1 = 1;
  while (1) {
   $2_1 = ($1_1 << 2) + $0 | 0;
   $3 = HEAP32[$2_1 + -4 >> 2];
   HEAP32[$2_1 >> 2] = Math_imul($3 ^ $3 >>> 30, 1812433253) + $1_1;
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != 624) {
    continue
   }
   break;
  };
  HEAP32[$0 + 2496 >> 2] = 0;
 }
 
 function $389($0, $1_1, $2_1) {
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
 }
 
 function $390($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $2_1 = $36($0);
  $4_1 = $2_1;
  $2_1 = $464($3 + 8 | 0, $463($0, $454($0) + 1 | 0), $454($0), $2_1);
  $389($4_1, HEAP32[$2_1 + 8 >> 2], $1_1);
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2] + 4;
  $465($0, $2_1);
  $484($2_1, HEAP32[$2_1 + 4 >> 2]);
  if (HEAP32[$2_1 >> 2]) {
   $164($2_1);
   $0 = HEAP32[$2_1 >> 2];
   $476($2_1);
   $1769($0);
  }
  global$0 = $3 + 32 | 0;
 }
 
 function $393($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 28;
  return $0;
 }
 
 function $398($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 4;
 }
 
 function $399($0) {
  $456($0);
  $454($0);
  $456($0);
 }
 
 function $400($0) {
  var $1_1 = 0;
  if (HEAP32[$0 >> 2]) {
   $459($0, HEAP32[$0 >> 2]);
   $36($0);
   $1_1 = HEAP32[$0 >> 2];
   $456($0);
   $1769($1_1);
  }
 }
 
 function $401($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 208 | 0;
  global$0 = $2_1;
  $3 = $402($2_1 - -64 | 0);
  $4_1 = $3 + 8 | 0;
  $404($404($721($4_1, HEAP32[$36($1_1 + 16 | 0) >> 2]), 3361), 3409);
  $1_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] >> 2]]($1_1) | 0;
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $235($1_1)), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $236($1_1)), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
  if ($241($2_1 + 56 | 0, $2_1 + 48 | 0)) {
   while (1) {
    $1_1 = HEAP32[$2_1 + 56 >> 2];
    $6_1 = $235($217($220($1_1)));
    $7_1 = $236($217($220($1_1)));
    $5_1 = $10($2_1 + 16 | 0);
    $407($2_1 + 32 | 0, $6_1, $7_1, $5_1);
    $1597($5_1);
    label$3 : {
     if (!$212($2_1 + 32 | 0)) {
      $1593($2_1, $2_1 + 32 | 0);
      break label$3;
     }
     $7($2_1, 3462);
    }
    $408($2_1 + 32 | 0, $2_1);
    $1597($2_1);
    $410($409($404($410($723($404($410($409($404($4_1, 3471), $217($1_1))), 3483), HEAPF64[$1_1 + 16 >> 3])), 3520), $2_1 + 32 | 0));
    $1597($2_1 + 32 | 0);
    $248($2_1 + 56 | 0);
    if ($241($2_1 + 56 | 0, $2_1 + 48 | 0)) {
     continue
    }
    break;
   }
  }
  FUNCTION_TABLE[67]($4_1) | 0;
  $413($2_1 + 32 | 0, $3);
  $413($2_1, $3);
  $1_1 = $0;
  $0 = $2_1 + 32 | 0;
  $1596($1_1, $0, $19($2_1) + -1 | 0, $0);
  $1597($2_1);
  $1597($2_1 + 32 | 0);
  $16($3);
  global$0 = $2_1 + 208 | 0;
 }
 
 function $402($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $22($0 - -64 | 0);
  HEAP32[$0 >> 2] = 1384;
  HEAP32[$1_1 >> 2] = 1424;
  HEAP32[$0 + 8 >> 2] = 1404;
  $2_1 = $0 + 12 | 0;
  $23($0, $2_1);
  HEAP32[$0 >> 2] = 1384;
  HEAP32[$1_1 >> 2] = 1424;
  HEAP32[$0 + 8 >> 2] = 1404;
  $415($2_1);
  return $0;
 }
 
 function $404($0, $1_1) {
  return $416($0, $1_1, $644($1_1));
 }
 
 function $407($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 16 >> 2] = $2_1;
  HEAP32[$4_1 + 24 >> 2] = $1_1;
  if ($241($4_1 + 24 | 0, $4_1 + 16 | 0)) {
   while (1) {
    $1_1 = HEAP32[$4_1 + 24 >> 2];
    $5_1 = $4_1;
    $2_1 = $3;
    if (!$212($3)) {
     $1_1 = $354($1607($2_1, 3696), $1_1)
    }
    $1593($5_1, $1_1);
    $408($3, $4_1);
    $1597($4_1);
    $359($4_1 + 24 | 0);
    if ($241($4_1 + 24 | 0, $4_1 + 16 | 0)) {
     continue
    }
    break;
   }
  }
  $187($0, $3);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $408($0, $1_1) {
  $419($0, $1_1);
 }
 
 function $409($0, $1_1) {
  return $416($0, $93($1_1), $19($1_1));
 }
 
 function $410($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP8[$1_1 + 15 | 0] = 10;
  $0 = $416($0, $1_1 + 15 | 0, 1);
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $411($0) {
  $0 = $0 | 0;
  $725($0, $420(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 10));
  $682($0);
  return $0 | 0;
 }
 
 function $413($0, $1_1) {
  $421($0, $1_1 + 12 | 0);
 }
 
 function $415($0) {
  $654($0);
  HEAP32[$0 >> 2] = 1704;
  $10($0 + 32 | 0);
  HEAP32[$0 + 48 >> 2] = 24;
  HEAP32[$0 + 44 >> 2] = 0;
 }
 
 function $416($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $4_1 = $690($3 + 24 | 0, $0);
  label$1 : {
   if (!HEAPU8[$4_1 | 0]) {
    break label$1
   }
   $6_1 = $518($3 + 8 | 0, $0);
   $7_1 = HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 4 >> 2];
   $5_1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
   $8_1 = $519($5_1);
   $2_1 = $1_1 + $2_1 | 0;
   (wasm2js_i32$0 = $3, wasm2js_i32$1 = $520(HEAP32[$6_1 >> 2], $1_1, ($7_1 & 176) == 32 ? $2_1 : $1_1, $2_1, $5_1, $8_1)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
   if (!$521($3 + 16 | 0)) {
    break label$1
   }
   $34(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 5);
  }
  $692($4_1);
  global$0 = $3 + 32 | 0;
  return $0;
 }
 
 function $419($0, $1_1) {
  var $2_1 = 0;
  $528($0);
  HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
  $25($1_1);
 }
 
 function $420($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $683($2_1 + 8 | 0, $0);
  $0 = $527($526($2_1 + 8 | 0), $1_1);
  $924($2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $421($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3 = HEAP32[$1_1 + 48 >> 2];
  label$1 : {
   if ($3 & 16) {
    if (HEAPU32[$1_1 + 44 >> 2] < HEAPU32[$1_1 + 24 >> 2]) {
     HEAP32[$1_1 + 44 >> 2] = HEAP32[$1_1 + 24 >> 2]
    }
    $531($0, HEAP32[$1_1 + 20 >> 2], HEAP32[$1_1 + 44 >> 2], $2_1 + 24 | 0);
    break label$1;
   }
   if ($3 & 8) {
    $531($0, HEAP32[$1_1 + 8 >> 2], HEAP32[$1_1 + 16 >> 2], $2_1 + 16 | 0);
    break label$1;
   }
   $148($0, $2_1 + 8 | 0);
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $422($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 2764;
  $1_1 = $0 + 16 | 0;
  $427($1_1, $426($1_1));
  return $0 | 0;
 }
 
 function $425($0) {
  $0 = $0 | 0;
  $1769($422($0));
 }
 
 function $426($0) {
  return HEAP32[$217($0) >> 2];
 }
 
 function $427($0, $1_1) {
  if ($1_1) {
   $427($0, HEAP32[$1_1 >> 2]);
   $427($0, HEAP32[$1_1 + 4 >> 2]);
   $217($0);
   $143($1_1 + 16 | 0);
   $1769($1_1);
  }
 }
 
 function $436($0, $1_1) {
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
 }
 
 function $440($0, $1_1, $2_1) {
  var $3 = 0;
  HEAP32[$0 + 4 >> 2] = $2_1;
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  $1_1 = ($2_1 >>> 5 | 0) + (($2_1 & 31) != 0) | 0;
  HEAP32[$0 + 12 >> 2] = $1_1;
  $3 = ($2_1 >>> 0) / ($1_1 >>> 0) | 0;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 32 >> 2] = $3 >>> 0 < 31 ? -1 >>> 31 - $3 | 0 : -1;
  HEAP32[$0 + 28 >> 2] = $1_1 >>> 0 > $2_1 >>> 0 ? 0 : -1 >>> 32 - $3 | 0;
  HEAP32[$0 + 16 >> 2] = $1_1 + (Math_imul($1_1, $3) - $2_1 | 0);
  return $0;
 }
 
 function $445($0) {
  return $446(HEAP32[$0 >> 2]) & HEAP32[$0 + 28 >> 2];
 }
 
 function $446($0) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  $1_1 = HEAP32[$0 + 2496 >> 2];
  $4_1 = HEAP32[(($1_1 + 397 >>> 0) % 624 << 2) + $0 >> 2];
  $2_1 = ($1_1 + 1 >>> 0) % 624 | 0;
  $3 = HEAP32[($2_1 << 2) + $0 >> 2];
  $1_1 = ($3 & 2147483647 | HEAP32[($1_1 << 2) + $0 >> 2] & -2147483648) >>> 1 | 0;
  $1_1 = Math_imul($3 & 1, -1727483681) ^ ($1_1 ^ $4_1);
  HEAP32[(HEAP32[$0 + 2496 >> 2] << 2) + $0 >> 2] = $1_1;
  HEAP32[$0 + 2496 >> 2] = $2_1;
  $0 = $1_1 >>> 11 ^ $1_1;
  $0 = $0 << 7 & -1658038656 ^ $0;
  $0 = $0 << 15 & -272236544 ^ $0;
  return $0 >>> 18 ^ $0;
 }
 
 function $454($0) {
  return HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] >> 2;
 }
 
 function $456($0) {
  return HEAP32[$36($0) >> 2] - HEAP32[$0 >> 2] >> 2;
 }
 
 function $459($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $36($0);
    $2_1 = $2_1 + -4 | 0;
    continue;
   }
   break;
  };
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $463($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $1_1 = $468($0);
  if (HEAPU32[$2_1 + 12 >> 2] <= $1_1 >>> 0) {
   $0 = $456($0);
   if ($0 >>> 0 < $1_1 >>> 1 >>> 0) {
    HEAP32[$2_1 + 8 >> 2] = $0 << 1;
    $1_1 = HEAP32[$91($2_1 + 8 | 0, $2_1 + 12 | 0) >> 2];
   }
   global$0 = $2_1 + 16 | 0;
   return $1_1;
  }
  $1629();
  abort();
 }
 
 function $464($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $163($0 + 12 | 0, $4_1 + 12 | 0, $3);
  if ($1_1) {
   $164($0);
   $3 = $1_1;
   if (1073741823 < $1_1 >>> 0) {
    $127(3628);
    abort();
   }
   $5_1 = $1576($3 << 2);
  }
  HEAP32[$0 >> 2] = $5_1;
  $2_1 = ($2_1 << 2) + $5_1 | 0;
  HEAP32[$0 + 8 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  (wasm2js_i32$0 = $166($0), wasm2js_i32$1 = ($1_1 << 2) + $5_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $465($0, $1_1) {
  var $2_1 = 0;
  $399($0);
  $2_1 = $1_1 + 4 | 0;
  $473($36($0), HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2_1);
  $168($0, $2_1);
  $168($0 + 4 | 0, $1_1 + 8 | 0);
  $168($36($0), $166($1_1));
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 + 4 >> 2];
  $454($0);
  $456($0);
  $456($0);
 }
 
 function $468($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $36($0);
  HEAP32[$1_1 + 12 >> 2] = 1073741823;
  HEAP32[$1_1 + 8 >> 2] = 2147483647;
  $0 = HEAP32[$175($1_1 + 12 | 0, $1_1 + 8 | 0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $473($0, $1_1, $2_1, $3) {
  $2_1 = $2_1 - $1_1 | 0;
  $0 = HEAP32[$3 >> 2] - $2_1 | 0;
  HEAP32[$3 >> 2] = $0;
  if (($2_1 | 0) >= 1) {
   $1778($0, $1_1, $2_1)
  }
 }
 
 function $476($0) {
  return HEAP32[$166($0) >> 2] - HEAP32[$0 >> 2] >> 2;
 }
 
 function $484($0, $1_1) {
  while (1) {
   if (($1_1 | 0) != HEAP32[$0 + 8 >> 2]) {
    $164($0);
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -4;
    continue;
   }
   break;
  };
 }
 
 function $485($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = $486($1_1, $4_1 + 28 | 0, $2_1);
  $2_1 = HEAP32[$5_1 >> 2];
  HEAP8[$4_1 + 27 | 0] = 0;
  if (!$2_1) {
   $487($4_1 + 8 | 0, $1_1, $3);
   $489($1_1, HEAP32[$4_1 + 28 >> 2], $5_1, HEAP32[$4_1 + 8 >> 2]);
   $2_1 = $490($4_1 + 8 | 0);
   HEAP8[$4_1 + 27 | 0] = 1;
   $3 = $4_1 + 8 | 0;
   $1_1 = HEAP32[$3 >> 2];
   HEAP32[$3 >> 2] = 0;
   if ($1_1) {
    if (HEAPU8[$217($3) + 4 | 0]) {
     $143($1_1 + 16 | 0)
    }
    if ($1_1) {
     $1769($1_1)
    }
   }
  }
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = HEAP32[$180($4_1 + 8 | 0, $2_1) >> 2]), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP8[$0 + 4 | 0] = HEAPU8[$4_1 + 27 | 0];
  global$0 = $4_1 + 32 | 0;
 }
 
 function $486($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = $426($0);
  $5_1 = $217($0);
  label$1 : {
   if ($3) {
    label$3 : {
     while (1) {
      $4_1 = $3 + 16 | 0;
      if ($495($36($0), $2_1, $4_1)) {
       if (!HEAP32[$3 >> 2]) {
        break label$1
       }
       $5_1 = $3;
       $3 = HEAP32[$3 >> 2];
       continue;
      }
      if (!$495($36($0), $4_1, $2_1)) {
       break label$3
      }
      $4_1 = $3 + 4 | 0;
      if (HEAP32[$3 + 4 >> 2]) {
       $5_1 = $4_1;
       $3 = HEAP32[$4_1 >> 2];
       continue;
      }
      break;
     };
     HEAP32[$1_1 >> 2] = $3;
     return $4_1;
    }
    HEAP32[$1_1 >> 2] = $3;
    return $5_1;
   }
   $3 = $217($0);
  }
  HEAP32[$1_1 >> 2] = $3;
  return $3;
 }
 
 function $487($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $4_1 = $0;
  $0 = $217($1_1);
  $5_1 = $1576(28);
  $1_1 = $3 + 8 | 0;
  HEAP8[$1_1 + 4 | 0] = 0;
  HEAP32[$1_1 >> 2] = $0;
  $1_1 = $498($4_1, $5_1, $1_1);
  $40($0, HEAP32[$1_1 >> 2] + 16 | 0, $2_1);
  (wasm2js_i32$0 = $217($1_1), wasm2js_i32$1 = 1), HEAP8[wasm2js_i32$0 + 4 | 0] = wasm2js_i32$1;
  global$0 = $3 + 16 | 0;
 }
 
 function $489($0, $1_1, $2_1, $3) {
  HEAP32[$3 + 8 >> 2] = $1_1;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$2_1 >> 2] = $3;
  if (HEAP32[HEAP32[$0 >> 2] >> 2]) {
   HEAP32[$0 >> 2] = HEAP32[HEAP32[$0 >> 2] >> 2]
  }
  $501(HEAP32[$217($0) >> 2], HEAP32[$2_1 >> 2]);
  $0 = $36($0);
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
 }
 
 function $490($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = 0;
  return $1_1;
 }
 
 function $495($0, $1_1, $2_1) {
  return $505($1_1, $2_1) >>> 31 | 0;
 }
 
 function $498($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = $1_1;
  $436($0, $3 + 12 | 0);
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  $4_1 = $0 + 4 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  global$0 = $3 + 16 | 0;
  return $0;
 }
 
 function $501($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = ($0 | 0) == ($1_1 | 0);
  HEAP8[$1_1 + 12 | 0] = $2_1;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   while (1) {
    if (HEAPU8[HEAP32[$1_1 + 8 >> 2] + 12 | 0]) {
     break label$1
    }
    $3 = $513(HEAP32[$1_1 + 8 >> 2]);
    $2_1 = HEAP32[$1_1 + 8 >> 2];
    label$3 : {
     if ($3) {
      $2_1 = HEAP32[HEAP32[$2_1 + 8 >> 2] + 4 >> 2];
      if (!(!$2_1 | HEAPU8[$2_1 + 12 | 0])) {
       $1_1 = HEAP32[$1_1 + 8 >> 2];
       HEAP8[$1_1 + 12 | 0] = 1;
       $1_1 = HEAP32[$1_1 + 8 >> 2];
       HEAP8[$1_1 + 12 | 0] = ($0 | 0) == ($1_1 | 0);
       HEAP8[$2_1 + 12 | 0] = 1;
       break label$3;
      }
      if (!$513($1_1)) {
       $1_1 = HEAP32[$1_1 + 8 >> 2];
       $514($1_1);
      }
      $0 = HEAP32[$1_1 + 8 >> 2];
      HEAP8[$0 + 12 | 0] = 1;
      $0 = HEAP32[$0 + 8 >> 2];
      HEAP8[$0 + 12 | 0] = 0;
      $515($0);
      break label$1;
     }
     $2_1 = HEAP32[HEAP32[$2_1 + 8 >> 2] >> 2];
     label$7 : {
      if (!(!$2_1 | HEAPU8[$2_1 + 12 | 0])) {
       $1_1 = HEAP32[$1_1 + 8 >> 2];
       HEAP8[$1_1 + 12 | 0] = 1;
       $1_1 = HEAP32[$1_1 + 8 >> 2];
       HEAP8[$1_1 + 12 | 0] = ($0 | 0) == ($1_1 | 0);
       HEAP8[$2_1 + 12 | 0] = 1;
       $2_1 = 1;
       break label$7;
      }
      if ($513($1_1)) {
       $1_1 = HEAP32[$1_1 + 8 >> 2];
       $515($1_1);
      }
      $1_1 = HEAP32[$1_1 + 8 >> 2];
      HEAP8[$1_1 + 12 | 0] = 1;
      $1_1 = HEAP32[$1_1 + 8 >> 2];
      HEAP8[$1_1 + 12 | 0] = 0;
      $514($1_1);
      $2_1 = 0;
     }
     if (!$2_1) {
      break label$1
     }
    }
    if (($0 | 0) != ($1_1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $505($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $381($2_1 + 8 | 0, $93($1_1), $19($1_1));
  $0 = $507($0, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $507($0, $1_1) {
  var $2_1 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 12 >> 2] = $3;
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $19($0)), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
  HEAP32[$2_1 >> 2] = HEAP32[($2_1 + 8 | 0) + 4 >> 2];
  $0 = $224($93($0), HEAP32[$2_1 + 8 >> 2], HEAP32[$175($2_1 + 4 | 0, $2_1) >> 2]);
  label$1 : {
   if ($0) {
    break label$1
   }
   $0 = -1;
   $1_1 = HEAP32[$2_1 + 4 >> 2];
   $3 = HEAP32[$2_1 >> 2];
   if ($1_1 >>> 0 < $3 >>> 0) {
    break label$1
   }
   $0 = $1_1 >>> 0 > $3 >>> 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $513($0) {
  return HEAP32[HEAP32[$0 + 8 >> 2] >> 2] == ($0 | 0);
 }
 
 function $514($0) {
  var $1_1 = 0, $2_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  $1_1 = HEAP32[$2_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $1_1;
  if ($1_1) {
   $516($1_1, $0)
  }
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
  label$2 : {
   if ($513($0)) {
    $1_1 = HEAP32[$0 + 8 >> 2];
    break label$2;
   }
   $1_1 = HEAP32[$0 + 8 >> 2] + 4 | 0;
  }
  HEAP32[$1_1 >> 2] = $2_1;
  HEAP32[$2_1 >> 2] = $0;
  $516($0, $2_1);
 }
 
 function $515($0) {
  var $1_1 = 0, $2_1 = 0;
  $2_1 = HEAP32[$0 >> 2];
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0 >> 2] = $1_1;
  if ($1_1) {
   $516($1_1, $0)
  }
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
  label$2 : {
   if ($513($0)) {
    $1_1 = HEAP32[$0 + 8 >> 2];
    break label$2;
   }
   $1_1 = HEAP32[$0 + 8 >> 2] + 4 | 0;
  }
  HEAP32[$1_1 >> 2] = $2_1;
  HEAP32[$2_1 + 4 >> 2] = $0;
  $516($0, $2_1);
 }
 
 function $516($0, $1_1) {
  HEAP32[$0 + 8 >> 2] = $1_1;
 }
 
 function $518($0, $1_1) {
  HEAP32[$0 >> 2] = HEAP32[(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0) + 24 >> 2];
  return $0;
 }
 
 function $519($0) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ($31(-1, HEAP32[$0 + 76 >> 2])) {
   (wasm2js_i32$0 = $0, wasm2js_i32$1 = $420($0, 32)), HEAP32[wasm2js_i32$0 + 76 >> 2] = wasm2js_i32$1
  }
  return HEAP8[$0 + 76 | 0];
 }
 
 function $520($0, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $9_1 = HEAP32[$4_1 + 12 >> 2];
   $8_1 = $2_1 - $1_1 | 0;
   if (($8_1 | 0) >= 1) {
    if (($522($0, $1_1, $8_1) | 0) != ($8_1 | 0)) {
     break label$1
    }
   }
   $1_1 = $3 - $1_1 | 0;
   $1_1 = ($9_1 | 0) > ($1_1 | 0) ? $9_1 - $1_1 | 0 : 0;
   if (($1_1 | 0) >= 1) {
    $6_1 = $523($7_1, $1_1, $5_1);
    $5_1 = $522($0, $93($6_1), $1_1);
    $1597($6_1);
    $6_1 = 0;
    if (($1_1 | 0) != ($5_1 | 0)) {
     break label$1
    }
    $0 = ($1_1 | 0) == ($5_1 | 0) ? $0 : 0;
   }
   $1_1 = $3 - $2_1 | 0;
   if (($1_1 | 0) >= 1) {
    if (($522($0, $2_1, $1_1) | 0) != ($1_1 | 0)) {
     break label$1
    }
   }
   $524($4_1);
   $6_1 = $0;
  }
  global$0 = $7_1 + 16 | 0;
  return $6_1;
 }
 
 function $521($0) {
  return !HEAP32[$0 >> 2];
 }
 
 function $522($0, $1_1, $2_1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1_1, $2_1) | 0;
 }
 
 function $523($0, $1_1, $2_1) {
  $25($0);
  $1612($0, $1_1, $2_1);
  return $0;
 }
 
 function $524($0) {
  HEAP32[$0 + 12 >> 2] = 0;
 }
 
 function $525($0, $1_1, $2_1) {
  if ($1_1) {
   $1779($0, $85($2_1), $1_1)
  }
 }
 
 function $526($0) {
  return $929($0, 24300);
 }
 
 function $527($0, $1_1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1_1) | 0;
 }
 
 function $528($0) {
  var $1_1 = 0;
  $27($0);
  if ($94($0)) {
   $1_1 = HEAP32[$0 >> 2];
   $89($0);
   $1769($1_1);
   $121($0, 0);
   $114($0, 0);
  }
 }
 
 function $531($0, $1_1, $2_1, $3) {
  $151($0, $3);
  $532($0, $1_1, $2_1);
  return $0;
 }
 
 function $532($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $4_1 = $533($1_1, $2_1);
  if ($4_1 >>> 0 <= 4294967279) {
   label$2 : {
    if ($4_1 >>> 0 <= 10) {
     $114($0, $4_1);
     $3 = $0;
     break label$2;
    }
    $6_1 = $116($4_1) + 1 | 0;
    $3 = $118($0, $6_1);
    $120($0, $3);
    $121($0, $6_1);
    $122($0, $4_1);
   }
   if (($1_1 | 0) != ($2_1 | 0)) {
    while (1) {
     $124($3, $1_1);
     $3 = $3 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     if (($2_1 | 0) != ($1_1 | 0)) {
      continue
     }
     break;
    }
   }
   HEAP8[$5_1 + 15 | 0] = 0;
   $124($3, $5_1 + 15 | 0);
   global$0 = $5_1 + 16 | 0;
   return;
  }
  $1591();
  abort();
 }
 
 function $533($0, $1_1) {
  return $534($0, $1_1);
 }
 
 function $534($0, $1_1) {
  return $1_1 - $0 | 0;
 }
 
 function $537($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = 20856, wasm2js_i32$1 = (fimport$5(0) | 0) + -1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[5215] = 0;
  return 0;
 }
 
 function $539($0, $1_1, $2_1, $3) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = global$0 + -64 | 0;
  global$0 = $0;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $235($2_1)), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $236($2_1)), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
  if ($241($0 + 56 | 0, $0 + 48 | 0)) {
   while (1) {
    $2_1 = HEAP32[$0 + 56 >> 2];
    label$3 : {
     if (!$219(HEAP32[$2_1 >> 2])) {
      break label$3
     }
     if ($338($220(HEAP32[$2_1 >> 2]))) {
      break label$3
     }
     label$4 : {
      if (!$219(HEAP32[$2_1 >> 2])) {
       break label$4
      }
      while (1) {
       if ($368($566($1_1))) {
        break label$4
       }
       if ($338($220(HEAP32[$2_1 >> 2]))) {
        break label$4
       }
       $5_1 = $1593($0 + 32 | 0, HEAP32[$566($1_1) >> 2]);
       $13($217($220(HEAP32[$2_1 >> 2])), $5_1);
       if ((((($642() | 0) % 100 | 0) + 1 | 0) % 3 | 0) <= 0) {
        $4_1 = HEAP32[$2_1 >> 2];
        FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] >> 2]]($4_1);
       }
       $4_1 = HEAP32[$2_1 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] >> 2]]($4_1);
       $4_1 = $566($1_1);
       (wasm2js_i32$0 = $0, wasm2js_i32$1 = $540($235($4_1), $236($4_1), $5_1)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
       $238($0 + 24 | 0, $0 + 16 | 0);
       (wasm2js_i32$0 = $0, wasm2js_i32$1 = $236($4_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       $238($0 + 8 | 0, $0);
       $541($4_1, HEAP32[$0 + 24 >> 2], HEAP32[$0 + 8 >> 2]);
       $1597($5_1);
       if ($219(HEAP32[$2_1 >> 2])) {
        continue
       }
       break;
      };
     }
     if (!$3) {
      break label$3
     }
     $1607(HEAP32[$2_1 >> 2] + 4 | 0, 3792);
     $2_1 = HEAP32[$2_1 >> 2];
     HEAP32[$2_1 + 16 >> 2] = 0;
     HEAP32[$2_1 + 20 >> 2] = 0;
    }
    $398($0 + 56 | 0);
    if ($241($0 + 56 | 0, $0 + 48 | 0)) {
     continue
    }
    break;
   }
  }
  global$0 = $0 - -64 | 0;
 }
 
 function $540($0, $1_1, $2_1) {
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  HEAP32[$3 + 16 >> 2] = $1_1;
  HEAP32[$3 + 24 >> 2] = $0;
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = $546($0, $1_1, $2_1)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
  label$1 : {
   if (!$241($3 + 24 | 0, $3 + 16 | 0)) {
    break label$1
   }
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 24 >> 2];
   if (!$241($359($3 + 8 | 0), $3 + 16 | 0)) {
    break label$1
   }
   while (1) {
    if (!$223(HEAP32[$3 + 8 >> 2], $2_1)) {
     $408(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 8 >> 2]);
     $359($3 + 24 | 0);
    }
    if ($241($359($3 + 8 | 0), $3 + 16 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $3 + 32 | 0;
  return HEAP32[$3 + 24 >> 2];
 }
 
 function $541($0, $1_1, $2_1) {
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  HEAP32[$3 + 16 >> 2] = $2_1;
  HEAP32[$3 + 24 >> 2] = $1_1;
  $1_1 = HEAP32[$0 >> 2];
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = $235($0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  $1_1 = $1_1 + Math_imul($543($3 + 24 | 0, $3 + 8 | 0), 12) | 0;
  if ($241($3 + 24 | 0, $3 + 16 | 0)) {
   $314($0, $555($1_1 + Math_imul($543($3 + 16 | 0, $3 + 24 | 0), 12) | 0, HEAP32[$0 + 4 >> 2], $1_1))
  }
  $245($1_1);
  global$0 = $3 + 32 | 0;
 }
 
 function $543($0, $1_1) {
  return (HEAP32[$0 >> 2] - HEAP32[$1_1 >> 2] | 0) / 12 | 0;
 }
 
 function $546($0, $1_1, $2_1) {
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 >> 2] = $1_1;
  HEAP32[$3 + 8 >> 2] = $0;
  label$1 : {
   if (!$241($3 + 8 | 0, $3)) {
    break label$1
   }
   while (1) {
    if ($223(HEAP32[$3 + 8 >> 2], $2_1)) {
     break label$1
    }
    $359($3 + 8 | 0);
    if ($241($3 + 8 | 0, $3)) {
     continue
    }
    break;
   };
  }
  global$0 = $3 + 16 | 0;
  return HEAP32[$3 + 8 >> 2];
 }
 
 function $549() {
  fimport$0(3880, 3904, 3932, 0, 1976, 81, 1979, 0, 1979, 0, 3821, 1981, 82);
  $554();
 }
 
 function $553() {
  var $0 = 0;
  $0 = $1576(4);
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 >> 2] = 3960;
  HEAP32[$0 >> 2] = 3840;
  return $0 | 0;
 }
 
 function $554() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  fimport$3(3880, 1, 3948, 1976, 84, 83);
  global$0 = $0 + 16 | 0;
 }
 
 function $555($0, $1_1, $2_1) {
  if (($0 | 0) != ($1_1 | 0)) {
   while (1) {
    $408($2_1, $0);
    $2_1 = $2_1 + 12 | 0;
    $0 = $0 + 12 | 0;
    if (($1_1 | 0) != ($0 | 0)) {
     continue
    }
    break;
   }
  }
  return $2_1;
 }
 
 function $564($0, $1_1) {
  label$1 : {
   if (!$212($1_1)) {
    if (!$6($1_1, 3972)) {
     break label$1
    }
   }
   $0 = fimport$1(8) | 0;
   $213($0, 3974);
   fimport$2($0 | 0, 17868, 7);
   abort();
  }
  $1598($0 + 4 | 0, $1_1);
 }
 
 function $565($0, $1_1) {
  HEAP32[$0 >> 2] = 4e3;
  $10($0 + 4 | 0);
  $8($0 + 16 | 0);
  $564($0, $1_1);
  return $0;
 }
 
 function $566($0) {
  return $0 + 16 | 0;
 }
 
 function $567($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 4e3;
  $17($0 + 16 | 0);
  $1597($0 + 4 | 0);
  return $0 | 0;
 }
 
 function $568($0) {
  $0 = $0 | 0;
  $1769($567($0));
 }
 
 function $569($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $570($0 + 4 | 0, $1_1);
 }
 
 function $570($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if (HEAP32[$0 + 4 >> 2] != HEAP32[$36($0) >> 2]) {
    $573($36($0), HEAP32[$0 + 4 >> 2], $1_1);
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 28;
    break label$1;
   }
   $574($0, $1_1);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $573($0, $1_1, $2_1) {
  $603($1_1, $2_1);
 }
 
 function $574($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $2_1 = $36($0);
  $4_1 = $2_1;
  $2_1 = $599($3 + 8 | 0, $598($0, $576($0) + 1 | 0), $576($0), $2_1);
  $573($4_1, HEAP32[$2_1 + 8 >> 2], $1_1);
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2] + 28;
  $600($0, $2_1);
  $622($2_1, HEAP32[$2_1 + 4 >> 2]);
  if (HEAP32[$2_1 >> 2]) {
   $164($2_1);
   $0 = HEAP32[$2_1 >> 2];
   HEAP32[$166($2_1) >> 2];
   $1769($0);
  }
  global$0 = $3 + 32 | 0;
 }
 
 function $575($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $0 = $0 + 4 | 0;
  $3 = $576($0);
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $577($235($0), $236($0), $1_1)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
  $1_1 = $238($2_1 + 24 | 0, $2_1 + 16 | 0);
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $236($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $4_1 = $238($2_1 + 8 | 0, $2_1);
  $578($0, HEAP32[$1_1 >> 2], HEAP32[$4_1 >> 2]);
  $0 = $576($0);
  global$0 = $2_1 + 32 | 0;
  return $3 >>> 0 < $0 >>> 0 | 0;
 }
 
 function $576($0) {
  return (HEAP32[$0 + 4 >> 2] - HEAP32[$0 >> 2] | 0) / 28 | 0;
 }
 
 function $577($0, $1_1, $2_1) {
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  HEAP32[$3 + 16 >> 2] = $1_1;
  HEAP32[$3 + 24 >> 2] = $0;
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = $583($0, $1_1, $2_1)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
  label$1 : {
   if (!$241($3 + 24 | 0, $3 + 16 | 0)) {
    break label$1
   }
   HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 24 >> 2];
   if (!$241($393($3 + 8 | 0), $3 + 16 | 0)) {
    break label$1
   }
   while (1) {
    if (!$222(HEAP32[$3 + 8 >> 2], $2_1)) {
     $584(HEAP32[$3 + 24 >> 2], HEAP32[$3 + 8 >> 2]);
     $393($3 + 24 | 0);
    }
    if ($241($393($3 + 8 | 0), $3 + 16 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $3 + 32 | 0;
  return HEAP32[$3 + 24 >> 2];
 }
 
 function $578($0, $1_1, $2_1) {
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  HEAP32[$3 + 16 >> 2] = $2_1;
  HEAP32[$3 + 24 >> 2] = $1_1;
  $1_1 = HEAP32[$0 >> 2];
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = $235($0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
  $1_1 = $1_1 + Math_imul($579($3 + 24 | 0, $3 + 8 | 0), 28) | 0;
  if ($241($3 + 24 | 0, $3 + 16 | 0)) {
   $2_1 = $628($1_1 + Math_imul($579($3 + 16 | 0, $3 + 24 | 0), 28) | 0, HEAP32[$0 + 4 >> 2], $1_1);
   $576($0);
   $626($0, $2_1);
   $616($0);
   $576($0);
  }
  $245($1_1);
  global$0 = $3 + 32 | 0;
 }
 
 function $579($0, $1_1) {
  return (HEAP32[$0 >> 2] - HEAP32[$1_1 >> 2] | 0) / 28 | 0;
 }
 
 function $583($0, $1_1, $2_1) {
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 >> 2] = $1_1;
  HEAP32[$3 + 8 >> 2] = $0;
  label$1 : {
   if (!$241($3 + 8 | 0, $3)) {
    break label$1
   }
   while (1) {
    if ($222(HEAP32[$3 + 8 >> 2], $2_1)) {
     break label$1
    }
    $393($3 + 8 | 0);
    if ($241($3 + 8 | 0, $3)) {
     continue
    }
    break;
   };
  }
  global$0 = $3 + 16 | 0;
  return HEAP32[$3 + 8 >> 2];
 }
 
 function $584($0, $1_1) {
  $1598($0 + 4 | 0, $1_1 + 4 | 0);
  $308($0 + 16 | 0, $1_1 + 16 | 0);
 }
 
 function $585($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 4032;
  $1_1 = $0 + 4 | 0;
  $587($1_1);
  $588($1_1);
  return $0 | 0;
 }
 
 function $587($0) {
  $616($0);
  $576($0);
  $616($0);
 }
 
 function $588($0) {
  var $1_1 = 0;
  if (HEAP32[$0 >> 2]) {
   $626($0, HEAP32[$0 >> 2]);
   $36($0);
   $1_1 = HEAP32[$0 >> 2];
   $616($0);
   $1769($1_1);
  }
 }
 
 function $589($0) {
  $0 = $0 | 0;
  $1769($585($0));
 }
 
 function $591() {
  fimport$0(4120, 4220, 4260, 0, 1976, 92, 1979, 0, 1979, 0, 4052, 1981, 93);
  $596();
 }
 
 function $595() {
  var $0 = 0;
  $0 = $1576(16);
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 4288;
  HEAP32[$0 >> 2] = 4032;
  $8($0 + 4 | 0);
  return $0 | 0;
 }
 
 function $596() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  fimport$3(4120, 1, 4276, 1976, 95, 94);
  global$0 = $0 + 16 | 0;
 }
 
 function $598($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $1_1 = $604($0);
  if (HEAPU32[$2_1 + 12 >> 2] <= $1_1 >>> 0) {
   $0 = $616($0);
   if ($0 >>> 0 < $1_1 >>> 1 >>> 0) {
    HEAP32[$2_1 + 8 >> 2] = $0 << 1;
    $1_1 = HEAP32[$91($2_1 + 8 | 0, $2_1 + 12 | 0) >> 2];
   }
   global$0 = $2_1 + 16 | 0;
   return $1_1;
  }
  $1629();
  abort();
 }
 
 function $599($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $163($0 + 12 | 0, $4_1 + 12 | 0, $3);
  if ($1_1) {
   $164($0);
   $3 = $1_1;
   if (153391689 < $1_1 >>> 0) {
    $127(4132);
    abort();
   }
   $5_1 = $1576(Math_imul($3, 28));
  }
  HEAP32[$0 >> 2] = $5_1;
  $2_1 = Math_imul($2_1, 28) + $5_1 | 0;
  HEAP32[$0 + 8 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  (wasm2js_i32$0 = $166($0), wasm2js_i32$1 = Math_imul($1_1, 28) + $5_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $600($0, $1_1) {
  var $2_1 = 0;
  $587($0);
  $2_1 = $1_1 + 4 | 0;
  $610($36($0), HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2], $2_1);
  $168($0, $2_1);
  $168($0 + 4 | 0, $1_1 + 8 | 0);
  $168($36($0), $166($1_1));
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 + 4 >> 2];
  $576($0);
  $616($0);
  $616($0);
 }
 
 function $603($0, $1_1) {
  HEAP32[$0 >> 2] = 4e3;
  $1593($0 + 4 | 0, $1_1 + 4 | 0);
  $271($0 + 16 | 0, $1_1 + 16 | 0);
 }
 
 function $604($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $36($0);
  HEAP32[$1_1 + 12 >> 2] = 153391689;
  HEAP32[$1_1 + 8 >> 2] = 2147483647;
  $0 = HEAP32[$175($1_1 + 12 | 0, $1_1 + 8 | 0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $610($0, $1_1, $2_1, $3) {
  if (($1_1 | 0) != ($2_1 | 0)) {
   while (1) {
    $2_1 = $2_1 + -28 | 0;
    $573($0, HEAP32[$3 >> 2] + -28 | 0, $2_1);
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + -28;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function $616($0) {
  return (HEAP32[$36($0) >> 2] - HEAP32[$0 >> 2] | 0) / 28 | 0;
 }
 
 function $622($0, $1_1) {
  var $2_1 = 0;
  while (1) {
   if (($1_1 | 0) != HEAP32[$0 + 8 >> 2]) {
    $164($0);
    $2_1 = HEAP32[$0 + 8 >> 2] + -28 | 0;
    HEAP32[$0 + 8 >> 2] = $2_1;
    $624($2_1);
    continue;
   }
   break;
  };
 }
 
 function $624($0) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0) | 0;
 }
 
 function $626($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $36($0);
    $2_1 = $2_1 + -28 | 0;
    $624($2_1);
    continue;
   }
   break;
  };
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $628($0, $1_1, $2_1) {
  if (($0 | 0) != ($1_1 | 0)) {
   while (1) {
    $584($2_1, $0);
    $2_1 = $2_1 + 28 | 0;
    $0 = $0 + 28 | 0;
    if (($1_1 | 0) != ($0 | 0)) {
     continue
    }
    break;
   }
  }
  return $2_1;
 }
 
 function $642() {
  var $0 = 0, $1_1 = 0;
  $1_1 = __wasm_i64_mul(HEAP32[5214], HEAP32[5215], 1284865837, 1481765933) + 1 | 0;
  $0 = i64toi32_i32$HIGH_BITS;
  $0 = $1_1 >>> 0 < 1 ? $0 + 1 | 0 : $0;
  HEAP32[5214] = $1_1;
  HEAP32[5215] = $0;
  return $0 >>> 1 | 0;
 }
 
 function $643($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   while (1) {
    $3 = HEAPU8[$0 | 0];
    $4_1 = HEAPU8[$1_1 | 0];
    if (($3 | 0) == ($4_1 | 0)) {
     $1_1 = $1_1 + 1 | 0;
     $0 = $0 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue
     }
     break label$1;
    }
    break;
   };
   $5_1 = $3 - $4_1 | 0;
  }
  return $5_1;
 }
 
 function $644($0) {
  var $1_1 = 0, $2_1 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    $1_1 = $0;
    if (!($1_1 & 3)) {
     break label$2
    }
    if (!HEAPU8[$0 | 0]) {
     break label$1
    }
    while (1) {
     $1_1 = $1_1 + 1 | 0;
     if (!($1_1 & 3)) {
      break label$2
     }
     if (HEAPU8[$1_1 | 0]) {
      continue
     }
     break;
    };
    break label$1;
   }
   while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3 = HEAP32[$2_1 >> 2];
    if (!(($3 ^ -1) & $3 + -16843009 & -2139062144)) {
     continue
    }
    break;
   };
   if (!($3 & 255)) {
    $1_1 = $2_1;
    break label$1;
   }
   while (1) {
    $3 = HEAPU8[$2_1 + 1 | 0];
    $1_1 = $2_1 + 1 | 0;
    $2_1 = $1_1;
    if ($3) {
     continue
    }
    break;
   };
  }
  return $1_1 - $0 | 0;
 }
 
 function $645($0, $1_1, $2_1) {
  if ($2_1) {
   while (1) {
    HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
    $0 = $0 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   }
  }
 }
 
 function $646() {
  return 0;
 }
 
 function $648($0) {
  $0 = $0 | 0;
  $649($0);
  return $0 | 0;
 }
 
 function $649($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 4724;
  $650($0);
  $924($0 + 28 | 0);
  $1769(HEAP32[$0 + 32 >> 2]);
  $1769(HEAP32[$0 + 36 >> 2]);
  $1769(HEAP32[$0 + 48 >> 2]);
  $1769(HEAP32[$0 + 60 >> 2]);
  return $0 | 0;
 }
 
 function $650($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[$0 + 40 >> 2];
  while (1) {
   if ($1_1) {
    $1_1 = $1_1 + -1 | 0;
    $2_1 = $1_1 << 2;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 + 32 >> 2] + $2_1 >> 2]](0, $0, HEAP32[$2_1 + HEAP32[$0 + 36 >> 2] >> 2]);
    continue;
   }
   break;
  };
 }
 
 function $651($0) {
  $0 = $0 | 0;
  $1769($648($0));
 }
 
 function $652($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 4316;
  $924($0 + 4 | 0);
  return $0 | 0;
 }
 
 function $653($0) {
  $0 = $0 | 0;
  $1769($652($0));
 }
 
 function $654($0) {
  HEAP32[$0 >> 2] = 4316;
  $1365($0 + 4 | 0);
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  return $0;
 }
 
 function $655($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $80($0, -1, -1);
 }
 
 function $656($0, $1_1, $2_1, $3) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $80($0, -1, -1);
 }
 
 function $657($0) {
  $0 = $0 | 0;
  return 0;
 }
 
 function $658($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  while (1) {
   label$2 : {
    if (($5_1 | 0) >= ($2_1 | 0)) {
     break label$2
    }
    $3 = HEAP32[$0 + 12 >> 2];
    $6_1 = HEAP32[$0 + 16 >> 2];
    label$3 : {
     if ($3 >>> 0 < $6_1 >>> 0) {
      HEAP32[$4_1 + 12 >> 2] = 2147483647;
      HEAP32[$4_1 + 8 >> 2] = $6_1 - $3;
      HEAP32[$4_1 + 4 >> 2] = $2_1 - $5_1;
      $3 = HEAP32[$659($4_1 + 12 | 0, $659($4_1 + 8 | 0, $4_1 + 4 | 0)) >> 2];
      $123($1_1, HEAP32[$0 + 12 >> 2], $3);
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + $3;
      break label$3;
     }
     $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0;
     if (($3 | 0) == -1) {
      break label$2
     }
     (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $32($3)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
     $3 = 1;
    }
    $1_1 = $1_1 + $3 | 0;
    $5_1 = $3 + $5_1 | 0;
    continue;
   }
   break;
  };
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $659($0, $1_1) {
  return $661($0, $1_1);
 }
 
 function $661($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = $740($1_1, $0);
  global$0 = $2_1 + 16 | 0;
  return $3 ? $1_1 : $0;
 }
 
 function $662($0) {
  $0 = $0 | 0;
  return -1;
 }
 
 function $663($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0) == -1) {
   return -1
  }
  $1_1 = $0;
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1_1 + 12 >> 2] = $0 + 1;
  return $85(HEAP8[$0 | 0]) | 0;
 }
 
 function $664($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return -1;
 }
 
 function $665($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  while (1) {
   label$2 : {
    if (($5_1 | 0) >= ($2_1 | 0)) {
     break label$2
    }
    $3 = HEAP32[$0 + 24 >> 2];
    $6_1 = HEAP32[$0 + 28 >> 2];
    if ($3 >>> 0 >= $6_1 >>> 0) {
     if (((((wasm2js_i32$1 = $0, wasm2js_i32$2 = $85(HEAP8[$1_1 | 0])), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == -1) {
      break label$2
     }
     $5_1 = $5_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
    } else {
     HEAP32[$4_1 + 12 >> 2] = $6_1 - $3;
     HEAP32[$4_1 + 8 >> 2] = $2_1 - $5_1;
     $3 = HEAP32[$659($4_1 + 12 | 0, $4_1 + 8 | 0) >> 2];
     $123(HEAP32[$0 + 24 >> 2], $1_1, $3);
     HEAP32[$0 + 24 >> 2] = $3 + HEAP32[$0 + 24 >> 2];
     $5_1 = $5_1 + $3 | 0;
     $1_1 = $1_1 + $3 | 0;
    }
    continue;
   }
   break;
  };
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $666($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 4380;
  $924($0 + 4 | 0);
  return $0 | 0;
 }
 
 function $667($0) {
  $0 = $0 | 0;
  $1769($666($0));
 }
 
 function $668($0) {
  HEAP32[$0 >> 2] = 4380;
  $1365($0 + 4 | 0);
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  return $0;
 }
 
 function $669($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  while (1) {
   label$2 : {
    if (($5_1 | 0) >= ($2_1 | 0)) {
     break label$2
    }
    $3 = HEAP32[$0 + 12 >> 2];
    $6_1 = HEAP32[$0 + 16 >> 2];
    label$3 : {
     if ($3 >>> 0 < $6_1 >>> 0) {
      HEAP32[$4_1 + 12 >> 2] = 2147483647;
      HEAP32[$4_1 + 8 >> 2] = $6_1 - $3 >> 2;
      HEAP32[$4_1 + 4 >> 2] = $2_1 - $5_1;
      $3 = HEAP32[$659($4_1 + 12 | 0, $659($4_1 + 8 | 0, $4_1 + 4 | 0)) >> 2];
      $670($1_1, HEAP32[$0 + 12 >> 2], $3);
      HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + ($3 << 2);
      $1_1 = ($3 << 2) + $1_1 | 0;
      break label$3;
     }
     $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0;
     if (($3 | 0) == -1) {
      break label$2
     }
     HEAP32[$1_1 >> 2] = $3;
     $3 = 1;
     $1_1 = $1_1 + 4 | 0;
    }
    $5_1 = $3 + $5_1 | 0;
    continue;
   }
   break;
  };
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $670($0, $1_1, $2_1) {
  if ($2_1) {
   $645($0, $1_1, $2_1)
  }
 }
 
 function $672($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0) == -1) {
   return -1
  }
  $1_1 = $0;
  $0 = HEAP32[$0 + 12 >> 2];
  HEAP32[$1_1 + 12 >> 2] = $0 + 4;
  return HEAP32[$0 >> 2];
 }
 
 function $673($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  while (1) {
   label$2 : {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$2
    }
    $5_1 = HEAP32[$0 + 24 >> 2];
    $6_1 = HEAP32[$0 + 28 >> 2];
    if ($5_1 >>> 0 >= $6_1 >>> 0) {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, HEAP32[$1_1 >> 2]) | 0) == -1) {
      break label$2
     }
     $4_1 = $4_1 + 1 | 0;
     $1_1 = $1_1 + 4 | 0;
    } else {
     HEAP32[$3 + 12 >> 2] = $6_1 - $5_1 >> 2;
     HEAP32[$3 + 8 >> 2] = $2_1 - $4_1;
     $5_1 = HEAP32[$659($3 + 12 | 0, $3 + 8 | 0) >> 2];
     $670(HEAP32[$0 + 24 >> 2], $1_1, $5_1);
     $6_1 = $5_1 << 2;
     HEAP32[$0 + 24 >> 2] = $6_1 + HEAP32[$0 + 24 >> 2];
     $4_1 = $4_1 + $5_1 | 0;
     $1_1 = $1_1 + $6_1 | 0;
    }
    continue;
   }
   break;
  };
  global$0 = $3 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $675($0) {
  $0 = $0 | 0;
  $648($0 + 8 | 0);
  return $0 | 0;
 }
 
 function $676($0) {
  $0 = $0 | 0;
  return $675(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) | 0;
 }
 
 function $677($0) {
  $0 = $0 | 0;
  $1769($675($0));
 }
 
 function $678($0) {
  $0 = $0 | 0;
  $677(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
 }
 
 function $679($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP8[$0 | 0] = 0;
  $4_1 = $689(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0);
  $3 = HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0;
  label$1 : {
   if ($4_1) {
    if (HEAP32[$3 + 72 >> 2]) {
     $682(HEAP32[(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0) + 72 >> 2])
    }
    (wasm2js_i32$0 = $0, wasm2js_i32$1 = $689(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
    break label$1;
   }
   $34($3, 4);
  }
  global$0 = $2_1 + 32 | 0;
  return $0;
 }
 
 function $682($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  if (HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2]) {
   $2_1 = $690($1_1 + 8 | 0, $0);
   label$2 : {
    if (!HEAPU8[$2_1 | 0]) {
     break label$2
    }
    if (($691(HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2]) | 0) != -1) {
     break label$2
    }
    $34(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 1);
   }
   $692($2_1);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $683($0, $1_1) {
  $1363($0, $1_1 + 28 | 0);
 }
 
 function $684($0, $1_1) {
  return $693($0, $1_1) ^ 1;
 }
 
 function $685($0) {
  return $694(HEAP32[$0 >> 2]) << 24 >> 24;
 }
 
 function $686($0, $1_1, $2_1) {
  return ($2_1 | 0) >= 0 ? (HEAPU16[HEAP32[$0 + 8 >> 2] + (($2_1 & 255) << 1) >> 1] & $1_1) != 0 : 0;
 }
 
 function $687($0) {
  $29(HEAP32[$0 >> 2]);
  return $0;
 }
 
 function $688($0, $1_1) {
  return $693($0, $1_1);
 }
 
 function $689($0) {
  return !HEAP32[$0 + 16 >> 2];
 }
 
 function $690($0, $1_1) {
  HEAP32[$0 + 4 >> 2] = $1_1;
  HEAP8[$0 | 0] = 0;
  if ($689(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0)) {
   if (HEAP32[(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0) + 72 >> 2]) {
    $682(HEAP32[(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0) + 72 >> 2])
   }
   HEAP8[$0 | 0] = 1;
  }
  return $0;
 }
 
 function $691($0) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
 }
 
 function $692($0) {
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[$0 + 4 >> 2];
   if (!HEAP32[(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0) + 24 >> 2]) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 4 >> 2];
   if (!$689(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 4 >> 2];
   if (!(HEAP32[(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0) + 4 >> 2] & 8192)) {
    break label$1
   }
   $1_1 = HEAP32[$0 + 4 >> 2];
   if (($691(HEAP32[(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0) + 24 >> 2]) | 0) != -1) {
    break label$1
   }
   $0 = HEAP32[$0 + 4 >> 2];
   $34(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 1);
  }
 }
 
 function $693($0, $1_1) {
  return $741($0) ^ $741($1_1) ^ 1;
 }
 
 function $694($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 + 12 >> 2];
  if (($1_1 | 0) == HEAP32[$0 + 16 >> 2]) {
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0
  }
  return $85(HEAP8[$1_1 | 0]);
 }
 
 function $703($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  if (HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2]) {
   $2_1 = $710($1_1 + 8 | 0, $0);
   label$2 : {
    if (!HEAPU8[$2_1 | 0]) {
     break label$2
    }
    if (($691(HEAP32[(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) + 24 >> 2]) | 0) != -1) {
     break label$2
    }
    $34(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 1);
   }
   $692($2_1);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $704($0) {
  return $929($0, 24292);
 }
 
 function $705($0, $1_1) {
  return $711($0, $1_1) ^ 1;
 }
 
 function $706($0) {
  return $712(HEAP32[$0 >> 2]);
 }
 
 function $707($0, $1_1, $2_1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1_1, $2_1) | 0;
 }
 
 function $708($0) {
  $713(HEAP32[$0 >> 2]);
  return $0;
 }
 
 function $709($0, $1_1) {
  return $711($0, $1_1);
 }
 
 function $710($0, $1_1) {
  HEAP32[$0 + 4 >> 2] = $1_1;
  HEAP8[$0 | 0] = 0;
  if ($689(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0)) {
   if (HEAP32[(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0) + 72 >> 2]) {
    $703(HEAP32[(HEAP32[HEAP32[$1_1 >> 2] + -12 >> 2] + $1_1 | 0) + 72 >> 2])
   }
   HEAP8[$0 | 0] = 1;
  }
  return $0;
 }
 
 function $711($0, $1_1) {
  return $745($0) ^ $745($1_1) ^ 1;
 }
 
 function $712($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 + 12 >> 2];
  if (($1_1 | 0) == HEAP32[$0 + 16 >> 2]) {
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0
  }
  return HEAP32[$1_1 >> 2];
 }
 
 function $713($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 + 12 >> 2];
  if (($1_1 | 0) == HEAP32[$0 + 16 >> 2]) {
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0) | 0
  }
  HEAP32[$0 + 12 >> 2] = $1_1 + 4;
  return HEAP32[$1_1 >> 2];
 }
 
 function $714($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 + 24 >> 2];
  if (($2_1 | 0) == HEAP32[$0 + 28 >> 2]) {
   return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, $1_1) | 0
  }
  HEAP32[$0 + 24 >> 2] = $2_1 + 4;
  HEAP32[$2_1 >> 2] = $1_1;
  return $1_1;
 }
 
 function $715($0) {
  $0 = $0 | 0;
  $648($0 + 4 | 0);
  return $0 | 0;
 }
 
 function $716($0) {
  $0 = $0 | 0;
  return $715(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) | 0;
 }
 
 function $717($0) {
  $0 = $0 | 0;
  $1769($715($0));
 }
 
 function $718($0) {
  $0 = $0 | 0;
  $717(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
 }
 
 function $719($0) {
  return $929($0, 24128);
 }
 
 function $721($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3 = $690($2_1 + 24 | 0, $0);
  label$1 : {
   if (!HEAPU8[$3 | 0]) {
    break label$1
   }
   $683($2_1 + 16 | 0, HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
   $4_1 = $719($2_1 + 16 | 0);
   $924($2_1 + 16 | 0);
   $6_1 = $518($2_1 + 8 | 0, $0);
   $5_1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
   $7_1 = $519($5_1);
   (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 24 >> 2]]($4_1, HEAP32[$6_1 >> 2], $5_1, $7_1, $1_1) | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
   if (!$521($2_1 + 16 | 0)) {
    break label$1
   }
   $34(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 5);
  }
  $692($3);
  global$0 = $2_1 + 32 | 0;
  return $0;
 }
 
 function $723($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3 = $690($2_1 + 24 | 0, $0);
  label$1 : {
   if (!HEAPU8[$3 | 0]) {
    break label$1
   }
   $683($2_1 + 16 | 0, HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
   $4_1 = $719($2_1 + 16 | 0);
   $924($2_1 + 16 | 0);
   $6_1 = $518($2_1 + 8 | 0, $0);
   $5_1 = HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0;
   $7_1 = $519($5_1);
   (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 32 >> 2]]($4_1, HEAP32[$6_1 >> 2], $5_1, $7_1, $1_1) | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
   if (!$521($2_1 + 16 | 0)) {
    break label$1
   }
   $34(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 5);
  }
  $692($3);
  global$0 = $2_1 + 32 | 0;
  return $0;
 }
 
 function $724($0, $1_1) {
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0 >> 2];
   if (!$2_1) {
    break label$1
   }
   if (!$31($92($2_1, $1_1), -1)) {
    break label$1
   }
   HEAP32[$0 >> 2] = 0;
  }
 }
 
 function $725($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = $690($2_1 + 8 | 0, $0);
  label$1 : {
   if (!HEAPU8[$3 | 0]) {
    break label$1
   }
   $4_1 = $518($2_1, $0);
   $724($4_1, $1_1);
   if (!$521($4_1)) {
    break label$1
   }
   $34(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0, 1);
  }
  $692($3);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $730($0, $1_1) {
  var $2_1 = 0;
  label$1 : {
   $2_1 = HEAP32[$0 >> 2];
   if (!$2_1) {
    break label$1
   }
   if (!$31($714($2_1, $1_1), -1)) {
    break label$1
   }
   HEAP32[$0 >> 2] = 0;
  }
 }
 
 function $732($0) {
  $0 = $0 | 0;
  $648($0 + 12 | 0);
  return $0 | 0;
 }
 
 function $733($0) {
  $0 = $0 | 0;
  return $732($0 + -8 | 0) | 0;
 }
 
 function $734($0) {
  $0 = $0 | 0;
  return $732(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0) | 0;
 }
 
 function $735($0) {
  $0 = $0 | 0;
  $1769($732($0));
 }
 
 function $736($0) {
  $0 = $0 | 0;
  $735($0 + -8 | 0);
 }
 
 function $737($0) {
  $0 = $0 | 0;
  $735(HEAP32[HEAP32[$0 >> 2] + -12 >> 2] + $0 | 0);
 }
 
 function $738($0) {
  $0 = $0 | 0;
  $1769($649($0));
 }
 
 function $739($0, $1_1) {
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = $1_1;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 4098;
  HEAP32[$0 + 8 >> 2] = 6;
  HEAP32[$0 + 16 >> 2] = !$1_1;
  $1779($0 + 32 | 0, 0, 40);
  $1365($0 + 28 | 0);
 }
 
 function $740($0, $1_1) {
  return HEAP32[$0 >> 2] < HEAP32[$1_1 >> 2];
 }
 
 function $741($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 >> 2];
  if ($1_1) {
   if (!$31($694($1_1), -1)) {
    return !HEAP32[$0 >> 2]
   }
   HEAP32[$0 >> 2] = 0;
  }
  return 1;
 }
 
 function $745($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0 >> 2];
  if ($1_1) {
   if (!$31($712($1_1), -1)) {
    return !HEAP32[$0 >> 2]
   }
   HEAP32[$0 >> 2] = 0;
  }
  return 1;
 }
 
 function $746($0, $1_1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1_1) | 0;
 }
 
 function $747($0) {
  $0 = $0 | 0;
  return fimport$6(HEAP32[$0 + 60 >> 2]) | 0;
 }
 
 function $748() {
  return 20864;
 }
 
 function $749($0) {
  if (!$0) {
   return 0
  }
  HEAP32[5216] = $0;
  return -1;
 }
 
 function $750($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  HEAP32[$3 + 16 >> 2] = $1_1;
  $4_1 = HEAP32[$0 + 48 >> 2];
  HEAP32[$3 + 20 >> 2] = $2_1 - (($4_1 | 0) != 0);
  $5_1 = HEAP32[$0 + 44 >> 2];
  HEAP32[$3 + 28 >> 2] = $4_1;
  HEAP32[$3 + 24 >> 2] = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($749(fimport$7(HEAP32[$0 + 60 >> 2], $3 + 16 | 0, 2, $3 + 12 | 0) | 0)) {
      HEAP32[$3 + 12 >> 2] = -1;
      $2_1 = -1;
      break label$3;
     }
     $4_1 = HEAP32[$3 + 12 >> 2];
     if (($4_1 | 0) > 0) {
      break label$2
     }
     $2_1 = $4_1;
    }
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | $2_1 & 48 ^ 16;
    break label$1;
   }
   $6_1 = HEAP32[$3 + 20 >> 2];
   if ($4_1 >>> 0 <= $6_1 >>> 0) {
    $2_1 = $4_1;
    break label$1;
   }
   $5_1 = HEAP32[$0 + 44 >> 2];
   HEAP32[$0 + 4 >> 2] = $5_1;
   HEAP32[$0 + 8 >> 2] = $5_1 + ($4_1 - $6_1 | 0);
   if (!HEAP32[$0 + 48 >> 2]) {
    break label$1
   }
   HEAP32[$0 + 4 >> 2] = $5_1 + 1;
   HEAP8[($1_1 + $2_1 | 0) + -1 | 0] = HEAPU8[$5_1 | 0];
  }
  global$0 = $3 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $751($0, $1_1, $2_1, $3) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   if (!$749(fimport$30(HEAP32[$0 + 60 >> 2], $1_1 | 0, $2_1 | 0, $3 & 255, $4_1 + 8 | 0) | 0)) {
    $1_1 = HEAP32[$4_1 + 12 >> 2];
    $0 = HEAP32[$4_1 + 8 >> 2];
    break label$1;
   }
   HEAP32[$4_1 + 8 >> 2] = -1;
   HEAP32[$4_1 + 12 >> 2] = -1;
   $1_1 = -1;
   $0 = -1;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $0 | 0;
 }
 
 function $752($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$0 + 28 >> 2];
  HEAP32[$3 + 16 >> 2] = $4_1;
  $5_1 = HEAP32[$0 + 20 >> 2];
  HEAP32[$3 + 28 >> 2] = $2_1;
  HEAP32[$3 + 24 >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[$3 + 20 >> 2] = $1_1;
  $5_1 = $1_1 + $2_1 | 0;
  $7_1 = 2;
  $1_1 = $3 + 16 | 0;
  while (1) {
   label$2 : {
    label$4 : {
     if ($749(fimport$8(HEAP32[$0 + 60 >> 2], $1_1 | 0, $7_1 | 0, $3 + 12 | 0) | 0)) {
      HEAP32[$3 + 12 >> 2] = -1;
      $4_1 = -1;
      break label$4;
     }
     $4_1 = HEAP32[$3 + 12 >> 2];
    }
    label$3 : {
     if (($4_1 | 0) == ($5_1 | 0)) {
      $1_1 = HEAP32[$0 + 44 >> 2];
      HEAP32[$0 + 28 >> 2] = $1_1;
      HEAP32[$0 + 20 >> 2] = $1_1;
      HEAP32[$0 + 16 >> 2] = $1_1 + HEAP32[$0 + 48 >> 2];
      $0 = $2_1;
      break label$3;
     }
     if (($4_1 | 0) > -1) {
      break label$2
     }
     HEAP32[$0 + 28 >> 2] = 0;
     HEAP32[$0 + 16 >> 2] = 0;
     HEAP32[$0 + 20 >> 2] = 0;
     HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
     $0 = 0;
     if (($7_1 | 0) == 2) {
      break label$3
     }
     $0 = $2_1 - HEAP32[$1_1 + 4 >> 2] | 0;
    }
    global$0 = $3 + 32 | 0;
    return $0 | 0;
   }
   $6_1 = HEAP32[$1_1 + 4 >> 2];
   $8_1 = $4_1 >>> 0 > $6_1 >>> 0;
   $1_1 = $8_1 ? $1_1 + 8 | 0 : $1_1;
   $6_1 = $4_1 - ($8_1 ? $6_1 : 0) | 0;
   HEAP32[$1_1 >> 2] = $6_1 + HEAP32[$1_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] - $6_1;
   $5_1 = $5_1 - $4_1 | 0;
   $7_1 = $7_1 - $8_1 | 0;
   continue;
  };
 }
 
 function $753($0, $1_1, $2_1, $3) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0;
 }
 
 function $756($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAPU8[$0 + 74 | 0];
  HEAP8[$0 + 74 | 0] = $1_1 + -1 | $1_1;
  if (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2]) {
   FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  $1_1 = HEAP32[$0 >> 2];
  if ($1_1 & 4) {
   HEAP32[$0 >> 2] = $1_1 | 32;
   return -1;
  }
  $2_1 = HEAP32[$0 + 44 >> 2] + HEAP32[$0 + 48 >> 2] | 0;
  HEAP32[$0 + 8 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  return $1_1 << 27 >> 31;
 }
 
 function $757($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = -1;
  label$1 : {
   if (($0 | 0) == -1) {
    break label$1
   }
   $4_1 = HEAP32[$1_1 + 76 >> 2] >= 0 ? 1 : $4_1;
   label$3 : {
    $3 = HEAP32[$1_1 + 4 >> 2];
    label$4 : {
     if (!$3) {
      $756($1_1);
      $3 = HEAP32[$1_1 + 4 >> 2];
      if (!$3) {
       break label$4
      }
     }
     if ($3 >>> 0 > HEAP32[$1_1 + 44 >> 2] + -8 >>> 0) {
      break label$3
     }
    }
    if (!$4_1) {
     break label$1
    }
    return -1;
   }
   $2_1 = $3 + -1 | 0;
   HEAP32[$1_1 + 4 >> 2] = $2_1;
   HEAP8[$2_1 | 0] = $0;
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] & -17;
   $2_1 = $0;
  }
  return $2_1;
 }
 
 function $758($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = -1;
  label$1 : {
   if ($756($0)) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[$0 + 32 >> 2]]($0, $1_1 + 15 | 0, 1) | 0) != 1) {
    break label$1
   }
   $2_1 = HEAPU8[$1_1 + 15 | 0];
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1;
 }
 
 function $759($0) {
  var $1_1 = 0;
  if (HEAP32[$0 + 76 >> 2] < 0) {
   $1_1 = HEAP32[$0 + 4 >> 2];
   if ($1_1 >>> 0 < HEAPU32[$0 + 8 >> 2]) {
    HEAP32[$0 + 4 >> 2] = $1_1 + 1;
    return HEAPU8[$1_1 | 0];
   }
   return $758($0);
  }
  $1_1 = HEAP32[$0 + 4 >> 2];
  label$4 : {
   if ($1_1 >>> 0 < HEAPU32[$0 + 8 >> 2]) {
    HEAP32[$0 + 4 >> 2] = $1_1 + 1;
    $0 = HEAPU8[$1_1 | 0];
    break label$4;
   }
   $0 = $758($0);
  }
  return $0;
 }
 
 function $760($0) {
  var $1_1 = 0;
  $1_1 = HEAPU8[$0 + 74 | 0];
  HEAP8[$0 + 74 | 0] = $1_1 + -1 | $1_1;
  $1_1 = HEAP32[$0 >> 2];
  if ($1_1 & 8) {
   HEAP32[$0 >> 2] = $1_1 | 32;
   return -1;
  }
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  $1_1 = HEAP32[$0 + 44 >> 2];
  HEAP32[$0 + 28 >> 2] = $1_1;
  HEAP32[$0 + 20 >> 2] = $1_1;
  HEAP32[$0 + 16 >> 2] = $1_1 + HEAP32[$0 + 48 >> 2];
  return 0;
 }
 
 function $761($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = HEAP32[$2_1 + 16 >> 2];
  label$1 : {
   if (!$3) {
    if ($760($2_1)) {
     break label$1
    }
    $3 = HEAP32[$2_1 + 16 >> 2];
   }
   $5_1 = HEAP32[$2_1 + 20 >> 2];
   if ($3 - $5_1 >>> 0 < $1_1 >>> 0) {
    return FUNCTION_TABLE[HEAP32[$2_1 + 36 >> 2]]($2_1, $0, $1_1) | 0
   }
   label$5 : {
    if (HEAP8[$2_1 + 75 | 0] < 0) {
     break label$5
    }
    $4_1 = $1_1;
    while (1) {
     $3 = $4_1;
     if (!$3) {
      break label$5
     }
     $4_1 = $3 + -1 | 0;
     if (HEAPU8[$4_1 + $0 | 0] != 10) {
      continue
     }
     break;
    };
    $4_1 = FUNCTION_TABLE[HEAP32[$2_1 + 36 >> 2]]($2_1, $0, $3) | 0;
    if ($4_1 >>> 0 < $3 >>> 0) {
     break label$1
    }
    $1_1 = $1_1 - $3 | 0;
    $0 = $0 + $3 | 0;
    $5_1 = HEAP32[$2_1 + 20 >> 2];
    $6_1 = $3;
   }
   $1778($5_1, $0, $1_1);
   HEAP32[$2_1 + 20 >> 2] = HEAP32[$2_1 + 20 >> 2] + $1_1;
   $4_1 = $1_1 + $6_1 | 0;
  }
  return $4_1;
 }
 
 function $762($0, $1_1, $2_1, $3) {
  var $4_1 = 0;
  $4_1 = Math_imul($1_1, $2_1);
  label$1 : {
   if (HEAP32[$3 + 76 >> 2] <= -1) {
    $0 = $761($0, $4_1, $3);
    break label$1;
   }
   $0 = $761($0, $4_1, $3);
  }
  if (($0 | 0) == ($4_1 | 0)) {
   return $1_1 ? $2_1 : 0
  }
  return ($0 >>> 0) / ($1_1 >>> 0) | 0;
 }
 
 function $763($0) {
  var $1_1 = 0;
  if ($0) {
   if (HEAP32[$0 + 76 >> 2] <= -1) {
    return $764($0)
   }
   $1_1 = $764($0);
   return $1_1;
  }
  if (HEAP32[5114]) {
   $1_1 = $763(HEAP32[5114])
  }
  fimport$9(22960);
  $0 = HEAP32[5742];
  if ($0) {
   while (1) {
    if (HEAPU32[$0 + 20 >> 2] > HEAPU32[$0 + 28 >> 2]) {
     $1_1 = $764($0) | $1_1
    }
    $0 = HEAP32[$0 + 56 >> 2];
    if ($0) {
     continue
    }
    break;
   }
  }
  fimport$10(22960);
  return $1_1;
 }
 
 function $764($0) {
  var $1_1 = 0, $2_1 = 0;
  label$1 : {
   if (HEAPU32[$0 + 20 >> 2] <= HEAPU32[$0 + 28 >> 2]) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
   if (HEAP32[$0 + 20 >> 2]) {
    break label$1
   }
   return -1;
  }
  $1_1 = HEAP32[$0 + 4 >> 2];
  $2_1 = HEAP32[$0 + 8 >> 2];
  if ($1_1 >>> 0 < $2_1 >>> 0) {
   $1_1 = $1_1 - $2_1 | 0;
   FUNCTION_TABLE[HEAP32[$0 + 40 >> 2]]($0, $1_1, $1_1 >> 31, 1) | 0;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  return 0;
 }
 
 function $766() {
  var $0 = 0;
  $0 = HEAP32[1368];
  $769($0);
  $770();
  $771($0);
  $772();
  $0 = HEAP32[1369];
  $773(23784, $0, 23832);
  $774(23148, 23784);
  $775(23840, $0, 23888);
  $776(23232, 23840);
  $0 = HEAP32[1370];
  $773(23896, $0, 23944);
  $774(23316, 23896);
  $774(23484, HEAP32[(HEAP32[HEAP32[5829] + -12 >> 2] + 23316 | 0) + 24 >> 2]);
  $775(23952, $0, 24e3);
  $776(23400, 23952);
  $776(23568, HEAP32[(HEAP32[HEAP32[5850] + -12 >> 2] + 23400 | 0) + 24 >> 2]);
  $777(HEAP32[HEAP32[5743] + -12 >> 2] + 22972 | 0, 23148);
  $777(HEAP32[HEAP32[5765] + -12 >> 2] + 23060 | 0, 23232);
  $784(HEAP32[HEAP32[5829] + -12 >> 2] + 23316 | 0);
  $784(HEAP32[HEAP32[5850] + -12 >> 2] + 23400 | 0);
  $777(HEAP32[HEAP32[5829] + -12 >> 2] + 23316 | 0, 23148);
  $777(HEAP32[HEAP32[5850] + -12 >> 2] + 23400 | 0, 23232);
 }
 
 function $767($0) {
  $0 = $0 | 0;
  $682(23148);
  $703(23232);
  $682(23484);
  $703(23568);
 }
 
 function $769($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $654(23656);
  HEAP32[5924] = 23712;
  HEAP32[5922] = $0;
  HEAP32[5914] = 5492;
  HEAP8[23708] = 0;
  HEAP32[5926] = -1;
  $779($1_1 + 8 | 0, $2_1);
  FUNCTION_TABLE[HEAP32[HEAP32[5914] + 8 >> 2]](23656, $1_1 + 8 | 0);
  $924($1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $770() {
  var $0 = 0;
  $0 = $22(22980);
  HEAP32[5743] = 4448;
  HEAP32[$0 >> 2] = 4468;
  HEAP32[5744] = 0;
  $150(HEAP32[1109] + 22972 | 0, 23656);
 }
 
 function $771($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $668(23720);
  HEAP32[5940] = 23776;
  HEAP32[5938] = $0;
  HEAP32[5930] = 5632;
  HEAP8[23772] = 0;
  HEAP32[5942] = -1;
  $779($1_1 + 8 | 0, $2_1);
  FUNCTION_TABLE[HEAP32[HEAP32[5930] + 8 >> 2]](23720, $1_1 + 8 | 0);
  $924($1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $772() {
  var $0 = 0;
  $0 = $780(23068);
  HEAP32[5765] = 4496;
  HEAP32[$0 >> 2] = 4516;
  HEAP32[5766] = 0;
  $150(HEAP32[1121] + 23060 | 0, 23720);
 }
 
 function $773($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $4_1 = $654($0);
  HEAP32[$0 + 32 >> 2] = $1_1;
  HEAP32[$0 >> 2] = 5732;
  $779($3 + 8 | 0, $4_1);
  $1_1 = $781($3 + 8 | 0);
  $924($3 + 8 | 0);
  HEAP32[$0 + 40 >> 2] = $2_1;
  HEAP32[$0 + 36 >> 2] = $1_1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $782($1_1)), HEAP8[wasm2js_i32$0 + 44 | 0] = wasm2js_i32$1;
  global$0 = $3 + 16 | 0;
 }
 
 function $774($0, $1_1) {
  var $2_1 = 0;
  $2_1 = $22($0 + 4 | 0);
  HEAP32[$0 >> 2] = 4544;
  HEAP32[$2_1 >> 2] = 4564;
  $150(HEAP32[1133] + $0 | 0, $1_1);
 }
 
 function $775($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $4_1 = $668($0);
  HEAP32[$0 + 32 >> 2] = $1_1;
  HEAP32[$0 >> 2] = 5836;
  $779($3 + 8 | 0, $4_1);
  $1_1 = $783($3 + 8 | 0);
  $924($3 + 8 | 0);
  HEAP32[$0 + 40 >> 2] = $2_1;
  HEAP32[$0 + 36 >> 2] = $1_1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $782($1_1)), HEAP8[wasm2js_i32$0 + 44 | 0] = wasm2js_i32$1;
  global$0 = $3 + 16 | 0;
 }
 
 function $776($0, $1_1) {
  var $2_1 = 0;
  $2_1 = $780($0 + 4 | 0);
  HEAP32[$0 >> 2] = 4592;
  HEAP32[$2_1 >> 2] = 4612;
  $150(HEAP32[1145] + $0 | 0, $1_1);
 }
 
 function $777($0, $1_1) {
  HEAP32[$0 + 72 >> 2] = $1_1;
 }
 
 function $779($0, $1_1) {
  $1363($0, $1_1 + 4 | 0);
 }
 
 function $780($0) {
  $144($0);
  HEAP32[$0 >> 2] = 4840;
  return $0;
 }
 
 function $781($0) {
  return $929($0, 24308);
 }
 
 function $782($0) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 }
 
 function $783($0) {
  return $929($0, 24316);
 }
 
 function $784($0) {
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 8192;
 }
 
 function $785($0) {
  $0 = $0 | 0;
  $652($0);
  $1769($0);
 }
 
 function $786($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = $781($1_1);
  HEAP32[$0 + 36 >> 2] = $1_1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $691($1_1)), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $782(HEAP32[$0 + 36 >> 2])), HEAP8[wasm2js_i32$0 + 53 | 0] = wasm2js_i32$1;
  if (HEAP32[$0 + 44 >> 2] >= 9) {
   $1129();
   abort();
  }
 }
 
 function $787($0) {
  $0 = $0 | 0;
  return $788($0, 0) | 0;
 }
 
 function $788($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  label$1 : {
   if (HEAPU8[$0 + 52 | 0]) {
    $2_1 = HEAP32[$0 + 48 >> 2];
    if (!$1_1) {
     break label$1
    }
    HEAP8[$0 + 52 | 0] = 0;
    HEAP32[$0 + 48 >> 2] = -1;
    break label$1;
   }
   HEAP32[$3 + 24 >> 2] = 1;
   $4_1 = HEAP32[$792($3 + 24 | 0, $0 + 44 | 0) >> 2];
   label$3 : {
    label$4 : {
     label$5 : {
      while (1) {
       if (($2_1 | 0) < ($4_1 | 0)) {
        $5_1 = $759(HEAP32[$0 + 32 >> 2]);
        if (($5_1 | 0) == -1) {
         break label$5
        }
        HEAP8[($3 + 24 | 0) + $2_1 | 0] = $5_1;
        $2_1 = $2_1 + 1 | 0;
        continue;
       }
       break;
      };
      label$8 : {
       if (HEAPU8[$0 + 53 | 0]) {
        HEAP8[$3 + 23 | 0] = HEAPU8[$3 + 24 | 0];
        break label$8;
       }
       $5_1 = 1;
       $7_1 = $3 + 24 | 0;
       label$10 : {
        label$11 : {
         while (1) {
          $2_1 = HEAP32[$0 + 40 >> 2];
          $8_1 = HEAP32[$2_1 >> 2];
          $9_1 = HEAP32[$2_1 + 4 >> 2];
          $6_1 = ($3 + 24 | 0) + $4_1 | 0;
          $2_1 = $793(HEAP32[$0 + 36 >> 2], $2_1, $3 + 24 | 0, $6_1, $3 + 16 | 0, $3 + 23 | 0, $7_1, $3 + 12 | 0) + -1 | 0;
          if ($2_1 >>> 0 > 2) {
           break label$10
          }
          label$13 : {
           switch ($2_1 - 1 | 0) {
           default:
            $2_1 = HEAP32[$0 + 40 >> 2];
            HEAP32[$2_1 >> 2] = $8_1;
            HEAP32[$2_1 + 4 >> 2] = $9_1;
            if (($4_1 | 0) == 8) {
             break label$11
            }
            $2_1 = $759(HEAP32[$0 + 32 >> 2]);
            if (($2_1 | 0) == -1) {
             break label$11
            }
            HEAP8[$6_1 | 0] = $2_1;
            $4_1 = $4_1 + 1 | 0;
            continue;
           case 0:
            break label$11;
           case 1:
            break label$13;
           };
          }
          break;
         };
         HEAP8[$3 + 23 | 0] = HEAPU8[$3 + 24 | 0];
         break label$10;
        }
        $5_1 = 0;
        $2_1 = -1;
       }
       if (!$5_1) {
        break label$1
       }
      }
      if ($1_1) {
       break label$4
      }
      while (1) {
       if (($4_1 | 0) < 1) {
        break label$3
       }
       $4_1 = $4_1 + -1 | 0;
       if (($757($85(HEAP8[$4_1 + ($3 + 24 | 0) | 0]), HEAP32[$0 + 32 >> 2]) | 0) != -1) {
        continue
       }
       break;
      };
     }
     $2_1 = -1;
     break label$1;
    }
    (wasm2js_i32$0 = $0, wasm2js_i32$1 = $85(HEAP8[$3 + 23 | 0])), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
   }
   $2_1 = $85(HEAP8[$3 + 23 | 0]);
  }
  global$0 = $3 + 32 | 0;
  return $2_1;
 }
 
 function $789($0) {
  $0 = $0 | 0;
  return $788($0, 1) | 0;
 }
 
 function $790($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $2_1 = $31($1_1, -1);
  $4_1 = HEAPU8[$0 + 52 | 0];
  label$1 : {
   if ($2_1) {
    $2_1 = $1_1;
    if ($4_1) {
     break label$1
    }
    $2_1 = HEAP32[$0 + 48 >> 2];
    (wasm2js_i32$0 = $0, wasm2js_i32$1 = $31($2_1, -1) ^ 1), HEAP8[wasm2js_i32$0 + 52 | 0] = wasm2js_i32$1;
    break label$1;
   }
   if ($4_1) {
    (wasm2js_i32$0 = $3, wasm2js_i32$1 = $32(HEAP32[$0 + 48 >> 2])), HEAP8[wasm2js_i32$0 + 19 | 0] = wasm2js_i32$1;
    $2_1 = $791(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $3 + 19 | 0, $3 + 20 | 0, $3 + 12 | 0, $3 + 24 | 0, $3 + 32 | 0, $3 + 20 | 0) + -1 | 0;
    label$4 : {
     label$5 : {
      if ($2_1 >>> 0 <= 2) {
       if ($2_1 - 2) {
        break label$5
       }
       $2_1 = HEAP32[$0 + 48 >> 2];
       HEAP32[$3 + 20 >> 2] = $3 + 25;
       HEAP8[$3 + 24 | 0] = $2_1;
      }
      while (1) {
       $2_1 = HEAP32[$3 + 20 >> 2];
       $4_1 = 1;
       if ($2_1 >>> 0 <= $3 + 24 >>> 0) {
        break label$4
       }
       $2_1 = $2_1 + -1 | 0;
       HEAP32[$3 + 20 >> 2] = $2_1;
       if (($757(HEAP8[$2_1 | 0], HEAP32[$0 + 32 >> 2]) | 0) != -1) {
        continue
       }
       break;
      };
     }
     $2_1 = -1;
     $4_1 = 0;
    }
    if (!$4_1) {
     break label$1
    }
   }
   HEAP8[$0 + 52 | 0] = 1;
   HEAP32[$0 + 48 >> 2] = $1_1;
   $2_1 = $1_1;
  }
  global$0 = $3 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $791($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) | 0;
 }
 
 function $792($0, $1_1) {
  return $794($0, $1_1);
 }
 
 function $793($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) | 0;
 }
 
 function $794($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = $740($0, $1_1);
  global$0 = $2_1 + 16 | 0;
  return $3 ? $1_1 : $0;
 }
 
 function $795($0) {
  $0 = $0 | 0;
  $666($0);
  $1769($0);
 }
 
 function $796($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = $783($1_1);
  HEAP32[$0 + 36 >> 2] = $1_1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $691($1_1)), HEAP32[wasm2js_i32$0 + 44 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $782(HEAP32[$0 + 36 >> 2])), HEAP8[wasm2js_i32$0 + 53 | 0] = wasm2js_i32$1;
  if (HEAP32[$0 + 44 >> 2] >= 9) {
   $1129();
   abort();
  }
 }
 
 function $797($0) {
  $0 = $0 | 0;
  return $798($0, 0) | 0;
 }
 
 function $798($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  label$1 : {
   if (HEAPU8[$0 + 52 | 0]) {
    $2_1 = HEAP32[$0 + 48 >> 2];
    if (!$1_1) {
     break label$1
    }
    HEAP8[$0 + 52 | 0] = 0;
    HEAP32[$0 + 48 >> 2] = -1;
    break label$1;
   }
   HEAP32[$3 + 24 >> 2] = 1;
   $4_1 = HEAP32[$792($3 + 24 | 0, $0 + 44 | 0) >> 2];
   label$3 : {
    label$4 : {
     label$5 : {
      while (1) {
       if (($2_1 | 0) < ($4_1 | 0)) {
        $5_1 = $759(HEAP32[$0 + 32 >> 2]);
        if (($5_1 | 0) == -1) {
         break label$5
        }
        HEAP8[($3 + 24 | 0) + $2_1 | 0] = $5_1;
        $2_1 = $2_1 + 1 | 0;
        continue;
       }
       break;
      };
      label$8 : {
       if (HEAPU8[$0 + 53 | 0]) {
        HEAP32[$3 + 20 >> 2] = HEAP8[$3 + 24 | 0];
        break label$8;
       }
       $7_1 = $3 + 24 | 0;
       $5_1 = 1;
       label$10 : {
        label$11 : {
         while (1) {
          $2_1 = HEAP32[$0 + 40 >> 2];
          $8_1 = HEAP32[$2_1 >> 2];
          $9_1 = HEAP32[$2_1 + 4 >> 2];
          $6_1 = ($3 + 24 | 0) + $4_1 | 0;
          $2_1 = $793(HEAP32[$0 + 36 >> 2], $2_1, $3 + 24 | 0, $6_1, $3 + 16 | 0, $3 + 20 | 0, $7_1, $3 + 12 | 0) + -1 | 0;
          if ($2_1 >>> 0 > 2) {
           break label$10
          }
          label$13 : {
           switch ($2_1 - 1 | 0) {
           default:
            $2_1 = HEAP32[$0 + 40 >> 2];
            HEAP32[$2_1 >> 2] = $8_1;
            HEAP32[$2_1 + 4 >> 2] = $9_1;
            if (($4_1 | 0) == 8) {
             break label$11
            }
            $2_1 = $759(HEAP32[$0 + 32 >> 2]);
            if (($2_1 | 0) == -1) {
             break label$11
            }
            HEAP8[$6_1 | 0] = $2_1;
            $4_1 = $4_1 + 1 | 0;
            continue;
           case 0:
            break label$11;
           case 1:
            break label$13;
           };
          }
          break;
         };
         HEAP32[$3 + 20 >> 2] = HEAP8[$3 + 24 | 0];
         break label$10;
        }
        $5_1 = 0;
        $2_1 = -1;
       }
       if (!$5_1) {
        break label$1
       }
      }
      if ($1_1) {
       break label$4
      }
      while (1) {
       if (($4_1 | 0) < 1) {
        break label$3
       }
       $4_1 = $4_1 + -1 | 0;
       if (($757(HEAP8[$4_1 + ($3 + 24 | 0) | 0], HEAP32[$0 + 32 >> 2]) | 0) != -1) {
        continue
       }
       break;
      };
     }
     $2_1 = -1;
     break label$1;
    }
    HEAP32[$0 + 48 >> 2] = HEAP32[$3 + 20 >> 2];
   }
   $2_1 = HEAP32[$3 + 20 >> 2];
  }
  global$0 = $3 + 32 | 0;
  return $2_1;
 }
 
 function $799($0) {
  $0 = $0 | 0;
  return $798($0, 1) | 0;
 }
 
 function $800($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $2_1 = $31($1_1, -1);
  $4_1 = HEAPU8[$0 + 52 | 0];
  label$1 : {
   if ($2_1) {
    $2_1 = $1_1;
    if ($4_1) {
     break label$1
    }
    $2_1 = HEAP32[$0 + 48 >> 2];
    (wasm2js_i32$0 = $0, wasm2js_i32$1 = $31($2_1, -1) ^ 1), HEAP8[wasm2js_i32$0 + 52 | 0] = wasm2js_i32$1;
    break label$1;
   }
   if ($4_1) {
    HEAP32[$3 + 16 >> 2] = HEAP32[$0 + 48 >> 2];
    $2_1 = $791(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $3 + 16 | 0, $3 + 20 | 0, $3 + 12 | 0, $3 + 24 | 0, $3 + 32 | 0, $3 + 20 | 0) + -1 | 0;
    label$4 : {
     label$5 : {
      if ($2_1 >>> 0 <= 2) {
       if ($2_1 - 2) {
        break label$5
       }
       $2_1 = HEAP32[$0 + 48 >> 2];
       HEAP32[$3 + 20 >> 2] = $3 + 25;
       HEAP8[$3 + 24 | 0] = $2_1;
      }
      while (1) {
       $2_1 = HEAP32[$3 + 20 >> 2];
       $4_1 = 1;
       if ($2_1 >>> 0 <= $3 + 24 >>> 0) {
        break label$4
       }
       $2_1 = $2_1 + -1 | 0;
       HEAP32[$3 + 20 >> 2] = $2_1;
       if (($757(HEAP8[$2_1 | 0], HEAP32[$0 + 32 >> 2]) | 0) != -1) {
        continue
       }
       break;
      };
     }
     $2_1 = -1;
     $4_1 = 0;
    }
    if (!$4_1) {
     break label$1
    }
   }
   HEAP8[$0 + 52 | 0] = 1;
   HEAP32[$0 + 48 >> 2] = $1_1;
   $2_1 = $1_1;
  }
  global$0 = $3 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $801($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
  $1_1 = $781($1_1);
  HEAP32[$0 + 36 >> 2] = $1_1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $782($1_1)), HEAP8[wasm2js_i32$0 + 44 | 0] = wasm2js_i32$1;
 }
 
 function $802($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $5_1 = $1_1 + 16 | 0;
  label$1 : {
   while (1) {
    $2_1 = HEAP32[$0 + 36 >> 2];
    $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2]]($2_1, HEAP32[$0 + 40 >> 2], $1_1 + 8 | 0, $5_1, $1_1 + 4 | 0) | 0;
    $2_1 = -1;
    $4_1 = HEAP32[$1_1 + 4 >> 2] - ($1_1 + 8 | 0) | 0;
    if (($762($1_1 + 8 | 0, 1, $4_1, HEAP32[$0 + 32 >> 2]) | 0) != ($4_1 | 0)) {
     break label$1
    }
    $3 = $3 + -1 | 0;
    if ($3 >>> 0 <= 1) {
     if ($3 - 1) {
      continue
     }
     break label$1;
    }
    break;
   };
   $2_1 = $763(HEAP32[$0 + 32 >> 2]) ? -1 : 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $804($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   if (!HEAPU8[$0 + 44 | 0]) {
    while (1) {
     if (($3 | 0) >= ($2_1 | 0)) {
      break label$1
     }
     if (((((wasm2js_i32$1 = $0, wasm2js_i32$2 = $85(HEAP8[$1_1 | 0])), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 52 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == -1) {
      break label$1
     }
     $1_1 = $1_1 + 1 | 0;
     $3 = $3 + 1 | 0;
     continue;
    }
   }
   $3 = $762($1_1, 1, $2_1, HEAP32[$0 + 32 >> 2]);
  }
  return $3 | 0;
 }
 
 function $805($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($31($1_1, -1)) {
      break label$3
     }
     (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $32($1_1)), HEAP8[wasm2js_i32$0 + 23 | 0] = wasm2js_i32$1;
     if (HEAPU8[$0 + 44 | 0]) {
      if (($762($2_1 + 23 | 0, 1, 1, HEAP32[$0 + 32 >> 2]) | 0) == 1) {
       break label$3
      }
      break label$2;
     }
     HEAP32[$2_1 + 16 >> 2] = $2_1 + 24;
     $5_1 = $2_1 + 32 | 0;
     $6_1 = $2_1 + 24 | 0;
     $3 = $2_1 + 23 | 0;
     while (1) {
      $4_1 = $791(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $3, $6_1, $2_1 + 12 | 0, $2_1 + 24 | 0, $5_1, $2_1 + 16 | 0);
      if (HEAP32[$2_1 + 12 >> 2] == ($3 | 0)) {
       break label$2
      }
      if (($4_1 | 0) == 3) {
       if (($762($3, 1, 1, HEAP32[$0 + 32 >> 2]) | 0) != 1) {
        break label$2
       }
       break label$3;
      }
      if ($4_1 >>> 0 > 1) {
       break label$2
      }
      $3 = HEAP32[$2_1 + 16 >> 2] - ($2_1 + 24 | 0) | 0;
      if (($762($2_1 + 24 | 0, 1, $3, HEAP32[$0 + 32 >> 2]) | 0) != ($3 | 0)) {
       break label$2
      }
      $3 = HEAP32[$2_1 + 12 >> 2];
      if (($4_1 | 0) == 1) {
       continue
      }
      break;
     };
    }
    $0 = $87($1_1);
    break label$1;
   }
   $0 = -1;
  }
  global$0 = $2_1 + 32 | 0;
  return $0 | 0;
 }
 
 function $806($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0) | 0;
  $1_1 = $783($1_1);
  HEAP32[$0 + 36 >> 2] = $1_1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $782($1_1)), HEAP8[wasm2js_i32$0 + 44 | 0] = wasm2js_i32$1;
 }
 
 function $807($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  label$1 : {
   if (!HEAPU8[$0 + 44 | 0]) {
    while (1) {
     if (($3 | 0) >= ($2_1 | 0)) {
      break label$1
     }
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, HEAP32[$1_1 >> 2]) | 0) == -1) {
      break label$1
     }
     $1_1 = $1_1 + 4 | 0;
     $3 = $3 + 1 | 0;
     continue;
    }
   }
   $3 = $762($1_1, 4, $2_1, HEAP32[$0 + 32 >> 2]);
  }
  return $3 | 0;
 }
 
 function $808($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($31($1_1, -1)) {
      break label$3
     }
     HEAP32[$2_1 + 20 >> 2] = $1_1;
     if (HEAPU8[$0 + 44 | 0]) {
      if (($762($2_1 + 20 | 0, 4, 1, HEAP32[$0 + 32 >> 2]) | 0) == 1) {
       break label$3
      }
      break label$2;
     }
     HEAP32[$2_1 + 16 >> 2] = $2_1 + 24;
     $5_1 = $2_1 + 32 | 0;
     $6_1 = $2_1 + 24 | 0;
     $3 = $2_1 + 20 | 0;
     while (1) {
      $4_1 = $791(HEAP32[$0 + 36 >> 2], HEAP32[$0 + 40 >> 2], $3, $6_1, $2_1 + 12 | 0, $2_1 + 24 | 0, $5_1, $2_1 + 16 | 0);
      if (HEAP32[$2_1 + 12 >> 2] == ($3 | 0)) {
       break label$2
      }
      if (($4_1 | 0) == 3) {
       if (($762($3, 1, 1, HEAP32[$0 + 32 >> 2]) | 0) != 1) {
        break label$2
       }
       break label$3;
      }
      if ($4_1 >>> 0 > 1) {
       break label$2
      }
      $3 = HEAP32[$2_1 + 16 >> 2] - ($2_1 + 24 | 0) | 0;
      if (($762($2_1 + 24 | 0, 1, $3, HEAP32[$0 + 32 >> 2]) | 0) != ($3 | 0)) {
       break label$2
      }
      $3 = HEAP32[$2_1 + 12 >> 2];
      if (($4_1 | 0) == 1) {
       continue
      }
      break;
     };
    }
    $0 = $87($1_1);
    break label$1;
   }
   $0 = -1;
  }
  global$0 = $2_1 + 32 | 0;
  return $0 | 0;
 }
 
 function $810($0) {
  return ($0 | 0) == 32 | $0 + -9 >>> 0 < 5;
 }
 
 function $811($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  HEAP32[$0 + 112 >> 2] = $1_1;
  HEAP32[$0 + 116 >> 2] = $2_1;
  $5_1 = HEAP32[$0 + 8 >> 2];
  $6_1 = HEAP32[$0 + 4 >> 2];
  $3 = $5_1 - $6_1 | 0;
  $4_1 = $3 >> 31;
  HEAP32[$0 + 120 >> 2] = $3;
  HEAP32[$0 + 124 >> 2] = $4_1;
  if (!(!($1_1 | $2_1) | (($4_1 | 0) < ($2_1 | 0) ? 1 : ($4_1 | 0) <= ($2_1 | 0) ? ($3 >>> 0 > $1_1 >>> 0 ? 0 : 1) : 0))) {
   HEAP32[$0 + 104 >> 2] = $1_1 + $6_1;
   return;
  }
  HEAP32[$0 + 104 >> 2] = $5_1;
 }
 
 function $812($0) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $1_1 = HEAP32[$0 + 116 >> 2];
  $2_1 = $1_1;
  label$1 : {
   $5_1 = HEAP32[$0 + 112 >> 2];
   label$2 : {
    if ($1_1 | $5_1) {
     $1_1 = HEAP32[$0 + 124 >> 2];
     if (($1_1 | 0) > ($2_1 | 0) ? 1 : ($1_1 | 0) >= ($2_1 | 0) ? (HEAPU32[$0 + 120 >> 2] < $5_1 >>> 0 ? 0 : 1) : 0) {
      break label$2
     }
    }
    $5_1 = $758($0);
    if (($5_1 | 0) > -1) {
     break label$1
    }
   }
   HEAP32[$0 + 104 >> 2] = 0;
   return -1;
  }
  $1_1 = HEAP32[$0 + 8 >> 2];
  $2_1 = HEAP32[$0 + 116 >> 2];
  $4_1 = $2_1;
  label$4 : {
   label$5 : {
    $3 = HEAP32[$0 + 112 >> 2];
    if (!($2_1 | $3)) {
     break label$5
    }
    $2_1 = (HEAP32[$0 + 124 >> 2] ^ -1) + $4_1 | 0;
    $4_1 = HEAP32[$0 + 120 >> 2] ^ -1;
    $3 = $4_1 + $3 | 0;
    if ($3 >>> 0 < $4_1 >>> 0) {
     $2_1 = $2_1 + 1 | 0
    }
    $4_1 = $3;
    $3 = HEAP32[$0 + 4 >> 2];
    $6_1 = $1_1 - $3 | 0;
    $7_1 = $4_1 >>> 0 < $6_1 >>> 0 ? 0 : 1;
    $6_1 = $6_1 >> 31;
    if (($2_1 | 0) > ($6_1 | 0) ? 1 : ($2_1 | 0) >= ($6_1 | 0) ? $7_1 : 0) {
     break label$5
    }
    HEAP32[$0 + 104 >> 2] = $4_1 + $3;
    break label$4;
   }
   HEAP32[$0 + 104 >> 2] = $1_1;
  }
  label$6 : {
   if (!$1_1) {
    $1_1 = HEAP32[$0 + 4 >> 2];
    break label$6;
   }
   $2_1 = $0;
   $4_1 = $1_1;
   $1_1 = HEAP32[$0 + 4 >> 2];
   $3 = ($4_1 - $1_1 | 0) + 1 | 0;
   $4_1 = $3 + HEAP32[$0 + 120 >> 2] | 0;
   $0 = HEAP32[$0 + 124 >> 2] + ($3 >> 31) | 0;
   HEAP32[$2_1 + 120 >> 2] = $4_1;
   HEAP32[$2_1 + 124 >> 2] = $4_1 >>> 0 < $3 >>> 0 ? $0 + 1 | 0 : $0;
  }
  $0 = $1_1 + -1 | 0;
  if (HEAPU8[$0 | 0] != ($5_1 | 0)) {
   HEAP8[$0 | 0] = $5_1
  }
  return $5_1;
 }
 
 function $813($0) {
  return $0 + -48 >>> 0 < 10;
 }
 
 function $815($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $5_1 = __wasm_i64_mul($1_1, $2_1, 0, 0);
  $6_1 = i64toi32_i32$HIGH_BITS;
  $7_1 = __wasm_i64_mul(0, 0, $3, $4_1);
  $5_1 = $5_1 + $7_1 | 0;
  $6_1 = i64toi32_i32$HIGH_BITS + $6_1 | 0;
  $9_1 = __wasm_i64_mul($4_1, 0, $2_1, 0);
  $8_1 = $5_1 + $9_1 | 0;
  $5_1 = i64toi32_i32$HIGH_BITS + ($5_1 >>> 0 < $7_1 >>> 0 ? $6_1 + 1 | 0 : $6_1) | 0;
  $6_1 = __wasm_i64_mul($3, 0, $1_1, 0);
  $10_1 = i64toi32_i32$HIGH_BITS;
  $7_1 = __wasm_i64_mul($2_1, 0, $3, 0);
  $3 = $10_1 + $7_1 | 0;
  $2_1 = $8_1 >>> 0 < $9_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
  $5_1 = i64toi32_i32$HIGH_BITS;
  $5_1 = $3 >>> 0 < $7_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
  $8_1 = $5_1 + $8_1 | 0;
  if ($8_1 >>> 0 < $5_1 >>> 0) {
   $2_1 = $2_1 + 1 | 0
  }
  $1_1 = __wasm_i64_mul($1_1, 0, $4_1, 0) + $3 | 0;
  $4_1 = i64toi32_i32$HIGH_BITS;
  $3 = $1_1 >>> 0 < $3 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $4_1 = $8_1 + $3 | 0;
  if ($4_1 >>> 0 < $3 >>> 0) {
   $2_1 = $2_1 + 1 | 0
  }
  HEAP32[$0 + 8 >> 2] = $4_1;
  HEAP32[$0 + 12 >> 2] = $2_1;
  HEAP32[$0 >> 2] = $6_1;
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $816($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if ($1_1 >>> 0 <= 36) {
        while (1) {
         $5_1 = HEAP32[$0 + 4 >> 2];
         label$8 : {
          if ($5_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = $5_1 + 1;
           $6_1 = HEAPU8[$5_1 | 0];
           break label$8;
          }
          $6_1 = $812($0);
         }
         if ($810($6_1)) {
          continue
         }
         break;
        };
        $5_1 = $6_1 + -43 | 0;
        label$10 : {
         if ($5_1 >>> 0 > 2 | !($5_1 - 1)) {
          break label$10
         }
         $11_1 = ($6_1 | 0) == 45 ? -1 : 0;
         $5_1 = HEAP32[$0 + 4 >> 2];
         if ($5_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $5_1 + 1;
          $6_1 = HEAPU8[$5_1 | 0];
          break label$10;
         }
         $6_1 = $812($0);
        }
        label$12 : {
         if (!($1_1 & -17 | ($6_1 | 0) != 48)) {
          $5_1 = HEAP32[$0 + 4 >> 2];
          label$14 : {
           if ($5_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
            HEAP32[$0 + 4 >> 2] = $5_1 + 1;
            $6_1 = HEAPU8[$5_1 | 0];
            break label$14;
           }
           $6_1 = $812($0);
          }
          if (($6_1 | 32) == 120) {
           $1_1 = 16;
           $5_1 = HEAP32[$0 + 4 >> 2];
           label$17 : {
            if ($5_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
             HEAP32[$0 + 4 >> 2] = $5_1 + 1;
             $6_1 = HEAPU8[$5_1 | 0];
             break label$17;
            }
            $6_1 = $812($0);
           }
           if (HEAPU8[$6_1 + 5937 | 0] < 16) {
            break label$4
           }
           $1_1 = HEAP32[$0 + 104 >> 2];
           if ($1_1) {
            HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1
           }
           if ($2_1) {
            $3 = 0;
            $4_1 = 0;
            if (!$1_1) {
             break label$1
            }
            HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
            break label$1;
           }
           $3 = 0;
           $4_1 = 0;
           $811($0, 0, 0);
           break label$1;
          }
          if ($1_1) {
           break label$12
          }
          $1_1 = 8;
          break label$4;
         }
         $1_1 = $1_1 ? $1_1 : 10;
         if ($1_1 >>> 0 > HEAPU8[$6_1 + 5937 | 0]) {
          break label$12
         }
         if (HEAP32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1
         }
         $3 = 0;
         $4_1 = 0;
         $811($0, 0, 0);
         HEAP32[5216] = 28;
         break label$1;
        }
        if (($1_1 | 0) != 10) {
         break label$4
        }
        $5_1 = 0;
        $2_1 = $6_1 + -48 | 0;
        if ($2_1 >>> 0 <= 9) {
         $1_1 = 0;
         while (1) {
          $1_1 = Math_imul($1_1, 10) + $2_1 | 0;
          $2_1 = HEAP32[$0 + 4 >> 2];
          label$24 : {
           if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
            HEAP32[$0 + 4 >> 2] = $2_1 + 1;
            $6_1 = HEAPU8[$2_1 | 0];
            break label$24;
           }
           $6_1 = $812($0);
          }
          $2_1 = $6_1 + -48 | 0;
          if ($1_1 >>> 0 < 429496729 ? $2_1 >>> 0 <= 9 : 0) {
           continue
          }
          break;
         };
         $7_1 = $1_1;
        }
        if ($2_1 >>> 0 > 9) {
         break label$5
        }
        $8_1 = __wasm_i64_mul($7_1, 0, 10, 0);
        $1_1 = i64toi32_i32$HIGH_BITS;
        while (1) {
         $5_1 = $1_1;
         $7_1 = $2_1 + $8_1 | 0;
         if ($7_1 >>> 0 < $2_1 >>> 0) {
          $5_1 = $5_1 + 1 | 0
         }
         $10_1 = ($5_1 | 0) == 429496729 & $7_1 >>> 0 >= 2576980378 | $5_1 >>> 0 > 429496729;
         $1_1 = HEAP32[$0 + 4 >> 2];
         label$27 : {
          if ($1_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$0 + 4 >> 2] = $1_1 + 1;
           $6_1 = HEAPU8[$1_1 | 0];
           break label$27;
          }
          $6_1 = $812($0);
         }
         $2_1 = $6_1 + -48 | 0;
         if ($10_1 | $2_1 >>> 0 > 9) {
          break label$5
         }
         $8_1 = __wasm_i64_mul($7_1, $5_1, 10, 0);
         $1_1 = i64toi32_i32$HIGH_BITS;
         if (($1_1 | 0) == -1 & $8_1 >>> 0 <= ($2_1 ^ -1) >>> 0 | $1_1 >>> 0 < 4294967295) {
          continue
         }
         break;
        };
        $1_1 = 10;
        break label$3;
       }
       HEAP32[5216] = 28;
       $3 = 0;
       $4_1 = 0;
       break label$1;
      }
      $1_1 = 10;
      if ($2_1 >>> 0 <= 9) {
       break label$3
      }
      break label$2;
     }
     if ($1_1 + -1 & $1_1) {
      $5_1 = 0;
      $2_1 = HEAPU8[$6_1 + 5937 | 0];
      if ($1_1 >>> 0 > $2_1 >>> 0) {
       while (1) {
        $7_1 = Math_imul($1_1, $7_1) + $2_1 | 0;
        $9_1 = $7_1 >>> 0 <= 119304646;
        $10_1 = $1_1;
        $2_1 = HEAP32[$0 + 4 >> 2];
        label$32 : {
         if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
          HEAP32[$0 + 4 >> 2] = $2_1 + 1;
          $6_1 = HEAPU8[$2_1 | 0];
          break label$32;
         }
         $6_1 = $812($0);
        }
        $2_1 = HEAPU8[$6_1 + 5937 | 0];
        if ($10_1 >>> 0 > $2_1 >>> 0 ? $9_1 : 0) {
         continue
        }
        break;
       }
      }
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break label$3
      }
      $8_1 = $1_1;
      while (1) {
       $10_1 = __wasm_i64_mul($7_1, $5_1, $8_1, 0);
       $9_1 = i64toi32_i32$HIGH_BITS;
       $2_1 = $2_1 & 255;
       if (($9_1 | 0) == -1 & $10_1 >>> 0 > ($2_1 ^ -1) >>> 0 | $9_1 >>> 0 > 4294967295) {
        break label$3
       }
       $5_1 = $9_1;
       $7_1 = $2_1 + $10_1 | 0;
       if ($7_1 >>> 0 < $2_1 >>> 0) {
        $5_1 = $5_1 + 1 | 0
       }
       $10_1 = $1_1;
       $2_1 = HEAP32[$0 + 4 >> 2];
       label$35 : {
        if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
         HEAP32[$0 + 4 >> 2] = $2_1 + 1;
         $6_1 = HEAPU8[$2_1 | 0];
         break label$35;
        }
        $6_1 = $812($0);
       }
       $2_1 = HEAPU8[$6_1 + 5937 | 0];
       if ($10_1 >>> 0 <= $2_1 >>> 0) {
        break label$3
       }
       $815($12_1, $8_1, 0, $7_1, $5_1);
       if (!(HEAP32[$12_1 + 8 >> 2] | HEAP32[$12_1 + 12 >> 2])) {
        continue
       }
       break;
      };
      break label$3;
     }
     $5_1 = 0;
     $14_1 = HEAP8[(Math_imul($1_1, 23) >>> 5 & 7) + 6193 | 0];
     $10_1 = $14_1;
     $2_1 = $10_1;
     $8_1 = $2_1 & 31;
     if (32 <= ($2_1 & 63) >>> 0) {
      $2_1 = 0;
      $13_1 = -1 >>> $8_1 | 0;
     } else {
      $2_1 = -1 >>> $8_1 | 0;
      $13_1 = (1 << $8_1) - 1 << 32 - $8_1 | -1 >>> $8_1;
     }
     $15_1 = $13_1;
     $8_1 = $2_1;
     $9_1 = $2_1;
     $2_1 = HEAPU8[$6_1 + 5937 | 0];
     if ($1_1 >>> 0 > $2_1 >>> 0) {
      while (1) {
       $7_1 = $7_1 << $14_1 | $2_1;
       $16_1 = $7_1 >>> 0 <= 134217727;
       $17_1 = $1_1;
       $2_1 = HEAP32[$0 + 4 >> 2];
       label$40 : {
        if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
         HEAP32[$0 + 4 >> 2] = $2_1 + 1;
         $6_1 = HEAPU8[$2_1 | 0];
         break label$40;
        }
        $6_1 = $812($0);
       }
       $2_1 = HEAPU8[$6_1 + 5937 | 0];
       if ($17_1 >>> 0 > $2_1 >>> 0 ? $16_1 : 0) {
        continue
       }
       break;
      }
     }
     if (!$9_1 & $15_1 >>> 0 < $7_1 >>> 0 | $9_1 >>> 0 < 0 | $1_1 >>> 0 <= $2_1 >>> 0) {
      break label$3
     }
     while (1) {
      $9_1 = $10_1 & 31;
      if (32 <= ($10_1 & 63) >>> 0) {
       $5_1 = $7_1 << $9_1;
       $6_1 = 0;
      } else {
       $5_1 = (1 << $9_1) - 1 & $7_1 >>> 32 - $9_1 | $5_1 << $9_1;
       $6_1 = $7_1 << $9_1;
      }
      $7_1 = $6_1 | $2_1 & 255;
      $2_1 = HEAP32[$0 + 4 >> 2];
      label$43 : {
       if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
        HEAP32[$0 + 4 >> 2] = $2_1 + 1;
        $6_1 = HEAPU8[$2_1 | 0];
        break label$43;
       }
       $6_1 = $812($0);
      }
      if (($5_1 | 0) == ($8_1 | 0) & $7_1 >>> 0 > $13_1 >>> 0 | $5_1 >>> 0 > $8_1 >>> 0) {
       break label$3
      }
      $2_1 = HEAPU8[$6_1 + 5937 | 0];
      if ($1_1 >>> 0 > $2_1 >>> 0) {
       continue
      }
      break;
     };
    }
    if ($1_1 >>> 0 <= HEAPU8[$6_1 + 5937 | 0]) {
     break label$2
    }
    while (1) {
     $6_1 = $1_1;
     $2_1 = HEAP32[$0 + 4 >> 2];
     label$46 : {
      if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
       HEAP32[$0 + 4 >> 2] = $2_1 + 1;
       $2_1 = HEAPU8[$2_1 | 0];
       break label$46;
      }
      $2_1 = $812($0);
     }
     if ($6_1 >>> 0 > HEAPU8[$2_1 + 5937 | 0]) {
      continue
     }
     break;
    };
    HEAP32[5216] = 68;
    $11_1 = $3 & 1 ? 0 : $11_1;
    $7_1 = $3;
    $5_1 = $4_1;
   }
   if (HEAP32[$0 + 104 >> 2]) {
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1
   }
   label$49 : {
    if (($4_1 | 0) == ($5_1 | 0) & $7_1 >>> 0 < $3 >>> 0 | $5_1 >>> 0 < $4_1 >>> 0) {
     break label$49
    }
    if (!($11_1 | $3 & 1)) {
     HEAP32[5216] = 68;
     $4_1 = $4_1 + -1 | 0;
     $3 = $3 + -1 | 0;
     if ($3 >>> 0 < 4294967295) {
      $4_1 = $4_1 + 1 | 0
     }
     break label$1;
    }
    if (($4_1 | 0) == ($5_1 | 0) & $7_1 >>> 0 <= $3 >>> 0 | $5_1 >>> 0 < $4_1 >>> 0) {
     break label$49
    }
    HEAP32[5216] = 68;
    break label$1;
   }
   $0 = $7_1 ^ $11_1;
   $3 = $0 - $11_1 | 0;
   $1_1 = $11_1 >> 31;
   $4_1 = ($1_1 ^ $5_1) - ($1_1 + ($0 >>> 0 < $11_1 >>> 0) | 0) | 0;
  }
  global$0 = $12_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $4_1;
  return $3;
 }
 
 function $818($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $5_1 = $3 ? $3 : 24072;
  $3 = HEAP32[$5_1 >> 2];
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1_1) {
      if ($3) {
       break label$3
      }
      break label$1;
     }
     $4_1 = -2;
     if (!$2_1) {
      break label$1
     }
     $8_1 = $0 ? $0 : $7_1 + 12 | 0;
     label$5 : {
      if ($3) {
       $0 = $2_1;
       break label$5;
      }
      $0 = HEAPU8[$1_1 | 0];
      $3 = $0 << 24 >> 24;
      if (($3 | 0) >= 0) {
       HEAP32[$8_1 >> 2] = $0;
       $4_1 = ($3 | 0) != 0;
       break label$1;
      }
      $0 = HEAP8[$1_1 | 0];
      if (!HEAP32[HEAP32[5196] >> 2]) {
       HEAP32[$8_1 >> 2] = $0 & 57343;
       $4_1 = 1;
       break label$1;
      }
      $0 = ($0 & 255) + -194 | 0;
      if ($0 >>> 0 > 50) {
       break label$3
      }
      $3 = HEAP32[($0 << 2) + 6208 >> 2];
      $0 = $2_1 + -1 | 0;
      if (!$0) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
     }
     $6_1 = HEAPU8[$1_1 | 0];
     $9_1 = $6_1 >>> 3 | 0;
     if (($9_1 + -16 | ($3 >> 26) + $9_1) >>> 0 > 7) {
      break label$3
     }
     while (1) {
      $0 = $0 + -1 | 0;
      $3 = $6_1 + -128 | $3 << 6;
      if (($3 | 0) >= 0) {
       HEAP32[$5_1 >> 2] = 0;
       HEAP32[$8_1 >> 2] = $3;
       $4_1 = $2_1 - $0 | 0;
       break label$1;
      }
      if (!$0) {
       break label$2
      }
      $1_1 = $1_1 + 1 | 0;
      $6_1 = HEAPU8[$1_1 | 0];
      if (($6_1 & 192) == 128) {
       continue
      }
      break;
     };
    }
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[5216] = 25;
    $4_1 = -1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3;
  }
  global$0 = $7_1 + 16 | 0;
  return $4_1;
 }
 
 function $821($0, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  label$1 : {
   if ($5_1 & 64) {
    $3 = $1_1;
    $4_1 = $5_1 + -64 | 0;
    $1_1 = $4_1 & 31;
    if (32 <= ($4_1 & 63) >>> 0) {
     $4_1 = $3 << $1_1;
     $3 = 0;
    } else {
     $4_1 = (1 << $1_1) - 1 & $3 >>> 32 - $1_1 | $2_1 << $1_1;
     $3 = $3 << $1_1;
    }
    $1_1 = 0;
    $2_1 = 0;
    break label$1;
   }
   if (!$5_1) {
    break label$1
   }
   $6_1 = $3;
   $8_1 = $5_1;
   $3 = $5_1 & 31;
   if (32 <= ($5_1 & 63) >>> 0) {
    $7_1 = $6_1 << $3;
    $9_1 = 0;
   } else {
    $7_1 = (1 << $3) - 1 & $6_1 >>> 32 - $3 | $4_1 << $3;
    $9_1 = $6_1 << $3;
   }
   $3 = $2_1;
   $6_1 = $1_1;
   $5_1 = 64 - $5_1 | 0;
   $4_1 = $5_1 & 31;
   if (32 <= ($5_1 & 63) >>> 0) {
    $5_1 = 0;
    $3 = $3 >>> $4_1 | 0;
   } else {
    $5_1 = $3 >>> $4_1 | 0;
    $3 = ((1 << $4_1) - 1 & $3) << 32 - $4_1 | $6_1 >>> $4_1;
   }
   $3 = $9_1 | $3;
   $4_1 = $5_1 | $7_1;
   $5_1 = $1_1;
   $1_1 = $8_1 & 31;
   if (32 <= ($8_1 & 63) >>> 0) {
    $7_1 = $5_1 << $1_1;
    $1_1 = 0;
   } else {
    $7_1 = (1 << $1_1) - 1 & $5_1 >>> 32 - $1_1 | $2_1 << $1_1;
    $1_1 = $5_1 << $1_1;
   }
   $2_1 = $7_1;
  }
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $4_1;
 }
 
 function $822($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(0));
  $6_1 = $3 & -2147483648;
  $2_1 = $3 & 2147483647;
  label$1 : {
   if ($2_1 + -8388608 >>> 0 <= 2130706431) {
    $3 = $2_1;
    $2_1 = $2_1 >>> 7 | 0;
    $3 = $3 << 25;
    $2_1 = $2_1 + 1065353216 | 0;
    $5_1 = $3;
    $2_1 = $3 >>> 0 < 0 ? $2_1 + 1 | 0 : $2_1;
    break label$1;
   }
   if ($2_1 >>> 0 >= 2139095040) {
    $5_1 = $3 << 25;
    $2_1 = $3 >>> 7 | 2147418112;
    break label$1;
   }
   if (!$2_1) {
    $2_1 = 0;
    break label$1;
   }
   $3 = $2_1;
   $2_1 = Math_clz32($2_1);
   $821($4_1, $3, 0, 0, 0, $2_1 + 81 | 0);
   $7_1 = HEAP32[$4_1 >> 2];
   $8_1 = HEAP32[$4_1 + 4 >> 2];
   $5_1 = HEAP32[$4_1 + 8 >> 2];
   $2_1 = HEAP32[$4_1 + 12 >> 2] ^ 65536 | 16265 - $2_1 << 16;
  }
  HEAP32[$0 >> 2] = $7_1;
  HEAP32[$0 + 4 >> 2] = $8_1;
  HEAP32[$0 + 8 >> 2] = $5_1;
  HEAP32[$0 + 12 >> 2] = $2_1 | $6_1;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $823($0, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  label$1 : {
   label$2 : {
    if ($5_1 & 64) {
     $2_1 = $5_1 + -64 | 0;
     $1_1 = $2_1 & 31;
     if (32 <= ($2_1 & 63) >>> 0) {
      $2_1 = 0;
      $1_1 = $4_1 >>> $1_1 | 0;
     } else {
      $2_1 = $4_1 >>> $1_1 | 0;
      $1_1 = ((1 << $1_1) - 1 & $4_1) << 32 - $1_1 | $3 >>> $1_1;
     }
     $3 = 0;
     $4_1 = 0;
     break label$2;
    }
    if (!$5_1) {
     break label$1
    }
    $7_1 = $4_1;
    $8_1 = $3;
    $9_1 = 64 - $5_1 | 0;
    $6_1 = $9_1 & 31;
    if (32 <= ($9_1 & 63) >>> 0) {
     $7_1 = $8_1 << $6_1;
     $9_1 = 0;
    } else {
     $7_1 = (1 << $6_1) - 1 & $8_1 >>> 32 - $6_1 | $7_1 << $6_1;
     $9_1 = $8_1 << $6_1;
    }
    $8_1 = $1_1;
    $6_1 = $5_1;
    $1_1 = $6_1 & 31;
    if (32 <= ($6_1 & 63) >>> 0) {
     $6_1 = 0;
     $1_1 = $2_1 >>> $1_1 | 0;
    } else {
     $6_1 = $2_1 >>> $1_1 | 0;
     $1_1 = ((1 << $1_1) - 1 & $2_1) << 32 - $1_1 | $8_1 >>> $1_1;
    }
    $1_1 = $9_1 | $1_1;
    $2_1 = $6_1 | $7_1;
    $6_1 = $3;
    $3 = $5_1 & 31;
    if (32 <= ($5_1 & 63) >>> 0) {
     $7_1 = 0;
     $3 = $4_1 >>> $3 | 0;
    } else {
     $7_1 = $4_1 >>> $3 | 0;
     $3 = ((1 << $3) - 1 & $4_1) << 32 - $3 | $6_1 >>> $3;
    }
    $4_1 = $7_1;
   }
  }
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $4_1;
 }
 
 function $824($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1) {
  var $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18 = 0, $19_1 = 0, $20 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26 = 0, $27_1 = 0, $28 = 0, $29_1 = 0, $30 = 0, $31_1 = 0, $32_1 = 0, $33 = 0, $34_1 = 0, $35 = 0, $36_1 = 0, $37_1 = 0, $38 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44 = 0, $45 = 0, $46_1 = 0, $47 = 0;
  $13_1 = global$0 - 96 | 0;
  global$0 = $13_1;
  $9_1 = $6_1;
  $17_1 = ($9_1 & 131071) << 15 | $5_1 >>> 17;
  $19_1 = $2_1;
  $10_1 = $8_1 & 65535;
  $12_1 = $10_1;
  $21_1 = $7_1;
  $9_1 = $7_1;
  $24_1 = $9_1 << 15 | $6_1 >>> 17;
  $15_1 = ($4_1 ^ $8_1) & -2147483648;
  $9_1 = $10_1;
  $27_1 = ($9_1 & 131071) << 15 | $7_1 >>> 17;
  $11_1 = $4_1 & 65535;
  $10_1 = $11_1;
  $16_1 = $3;
  $25_1 = $10_1;
  $37_1 = $8_1 >>> 16 & 32767;
  $38 = $4_1 >>> 16 & 32767;
  label$1 : {
   label$2 : {
    if ($38 + -1 >>> 0 <= 32765) {
     $20 = 0;
     if ($37_1 + -1 >>> 0 < 32766) {
      break label$2
     }
    }
    $14_1 = $4_1 & 2147483647;
    $11_1 = $14_1;
    $9_1 = $3;
    if (!(!$3 & ($11_1 | 0) == 2147418112 ? !($1_1 | $2_1) : ($11_1 | 0) == 2147418112 & $3 >>> 0 < 0 | $11_1 >>> 0 < 2147418112)) {
     $22_1 = $3;
     $15_1 = $4_1 | 32768;
     break label$1;
    }
    $4_1 = $8_1 & 2147483647;
    $14_1 = $4_1;
    $3 = $7_1;
    if (!(!$3 & ($4_1 | 0) == 2147418112 ? !($5_1 | $6_1) : ($4_1 | 0) == 2147418112 & $3 >>> 0 < 0 | $4_1 >>> 0 < 2147418112)) {
     $22_1 = $7_1;
     $15_1 = $8_1 | 32768;
     $1_1 = $5_1;
     $2_1 = $6_1;
     break label$1;
    }
    if (!($1_1 | $9_1 | ($11_1 ^ 2147418112 | $2_1))) {
     if (!($3 | $5_1 | ($6_1 | $14_1))) {
      $15_1 = 2147450880;
      $1_1 = 0;
      $2_1 = 0;
      break label$1;
     }
     $15_1 = $15_1 | 2147418112;
     $1_1 = 0;
     $2_1 = 0;
     break label$1;
    }
    if (!($3 | $5_1 | ($14_1 ^ 2147418112 | $6_1))) {
     $3 = $1_1 | $9_1;
     $4_1 = $2_1 | $11_1;
     $1_1 = 0;
     $2_1 = 0;
     if (!($3 | $4_1)) {
      $15_1 = 2147450880;
      break label$1;
     }
     $15_1 = $15_1 | 2147418112;
     break label$1;
    }
    if (!($1_1 | $9_1 | ($2_1 | $11_1))) {
     $1_1 = 0;
     $2_1 = 0;
     break label$1;
    }
    if (!($3 | $5_1 | ($6_1 | $14_1))) {
     $1_1 = 0;
     $2_1 = 0;
     break label$1;
    }
    $4_1 = 0;
    if (($11_1 | 0) == 65535 & $9_1 >>> 0 <= 4294967295 | $11_1 >>> 0 < 65535) {
     $8_1 = $1_1;
     $4_1 = !($10_1 | $16_1);
     $7_1 = $4_1 << 6;
     $9_1 = Math_clz32($4_1 ? $1_1 : $16_1) + 32 | 0;
     $1_1 = Math_clz32($4_1 ? $2_1 : $10_1);
     $1_1 = $7_1 + (($1_1 | 0) == 32 ? $9_1 : $1_1) | 0;
     $821($13_1 + 80 | 0, $8_1, $2_1, $16_1, $10_1, $1_1 + -15 | 0);
     $19_1 = HEAP32[$13_1 + 84 >> 2];
     $16_1 = HEAP32[$13_1 + 88 >> 2];
     $25_1 = HEAP32[$13_1 + 92 >> 2];
     $4_1 = 16 - $1_1 | 0;
     $1_1 = HEAP32[$13_1 + 80 >> 2];
    }
    $20 = $4_1;
    if (($14_1 | 0) == 65535 & $3 >>> 0 > 4294967295 | $14_1 >>> 0 > 65535) {
     break label$2
    }
    $2_1 = !($12_1 | $21_1);
    $3 = $2_1 << 6;
    $7_1 = Math_clz32($2_1 ? $5_1 : $21_1) + 32 | 0;
    $2_1 = Math_clz32($2_1 ? $6_1 : $12_1);
    $2_1 = $3 + (($2_1 | 0) == 32 ? $7_1 : $2_1) | 0;
    $8_1 = $2_1;
    $821($13_1 - -64 | 0, $5_1, $6_1, $21_1, $12_1, $2_1 + -15 | 0);
    $5_1 = HEAP32[$13_1 + 76 >> 2];
    $2_1 = $5_1;
    $7_1 = HEAP32[$13_1 + 72 >> 2];
    $3 = $7_1;
    $3 = $3 << 15;
    $9_1 = HEAP32[$13_1 + 68 >> 2];
    $24_1 = $9_1 >>> 17 | $3;
    $3 = $9_1;
    $5_1 = HEAP32[$13_1 + 64 >> 2];
    $17_1 = ($3 & 131071) << 15 | $5_1 >>> 17;
    $27_1 = ($2_1 & 131071) << 15 | $7_1 >>> 17;
    $20 = ($4_1 - $8_1 | 0) + 16 | 0;
   }
   $3 = $17_1;
   $17_1 = 0;
   $8_1 = __wasm_i64_mul($3, 0, $1_1, $17_1);
   $2_1 = i64toi32_i32$HIGH_BITS;
   $26 = $2_1;
   $23_1 = $5_1 << 15 & -32768;
   $14_1 = $19_1;
   $5_1 = __wasm_i64_mul($23_1, 0, $14_1, 0);
   $4_1 = $5_1 + $8_1 | 0;
   $11_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
   $11_1 = $4_1 >>> 0 < $5_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
   $2_1 = $4_1;
   $5_1 = 0;
   $6_1 = __wasm_i64_mul($23_1, $28, $1_1, $17_1);
   $4_1 = $5_1 + $6_1 | 0;
   $10_1 = i64toi32_i32$HIGH_BITS + $2_1 | 0;
   $10_1 = $4_1 >>> 0 < $6_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
   $19_1 = $4_1;
   $6_1 = $10_1;
   $32_1 = ($2_1 | 0) == ($10_1 | 0) & $4_1 >>> 0 < $5_1 >>> 0 | $10_1 >>> 0 < $2_1 >>> 0;
   $41_1 = __wasm_i64_mul($3, $39_1, $14_1, $40_1);
   $33 = i64toi32_i32$HIGH_BITS;
   $29_1 = $16_1;
   $5_1 = __wasm_i64_mul($23_1, $28, $16_1, 0);
   $4_1 = $5_1 + $41_1 | 0;
   $12_1 = i64toi32_i32$HIGH_BITS + $33 | 0;
   $12_1 = $4_1 >>> 0 < $5_1 >>> 0 ? $12_1 + 1 | 0 : $12_1;
   $42_1 = $4_1;
   $7_1 = __wasm_i64_mul($24_1, 0, $1_1, $17_1);
   $4_1 = $4_1 + $7_1 | 0;
   $5_1 = i64toi32_i32$HIGH_BITS + $12_1 | 0;
   $34_1 = $4_1;
   $5_1 = $4_1 >>> 0 < $7_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
   $21_1 = $5_1;
   $7_1 = $5_1;
   $5_1 = ($11_1 | 0) == ($26 | 0) & $2_1 >>> 0 < $8_1 >>> 0 | $11_1 >>> 0 < $26 >>> 0;
   $4_1 = $11_1;
   $2_1 = $4_1 + $34_1 | 0;
   $10_1 = $5_1 + $7_1 | 0;
   $26 = $2_1;
   $10_1 = $2_1 >>> 0 < $4_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
   $4_1 = $10_1;
   $7_1 = $2_1;
   $44 = __wasm_i64_mul($3, $39_1, $16_1, $43_1);
   $35 = i64toi32_i32$HIGH_BITS;
   $2_1 = $23_1;
   $30 = $25_1 | 65536;
   $23_1 = $18;
   $5_1 = __wasm_i64_mul($2_1, $28, $30, $18);
   $2_1 = $5_1 + $44 | 0;
   $10_1 = i64toi32_i32$HIGH_BITS + $35 | 0;
   $10_1 = $2_1 >>> 0 < $5_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
   $45 = $2_1;
   $9_1 = __wasm_i64_mul($14_1, $40_1, $24_1, $46_1);
   $2_1 = $2_1 + $9_1 | 0;
   $18 = $10_1;
   $5_1 = $10_1 + i64toi32_i32$HIGH_BITS | 0;
   $5_1 = $2_1 >>> 0 < $9_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
   $36_1 = $2_1;
   $31_1 = $27_1 & 2147483647 | -2147483648;
   $2_1 = __wasm_i64_mul($31_1, 0, $1_1, $17_1);
   $1_1 = $36_1 + $2_1 | 0;
   $17_1 = $5_1;
   $9_1 = $5_1 + i64toi32_i32$HIGH_BITS | 0;
   $28 = $1_1;
   $2_1 = $1_1 >>> 0 < $2_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
   $10_1 = $4_1 + $1_1 | 0;
   $5_1 = 0;
   $1_1 = $5_1 + $7_1 | 0;
   if ($1_1 >>> 0 < $5_1 >>> 0) {
    $10_1 = $10_1 + 1 | 0
   }
   $27_1 = $1_1;
   $25_1 = $10_1;
   $5_1 = $10_1;
   $7_1 = $1_1 + $32_1 | 0;
   if ($7_1 >>> 0 < $1_1 >>> 0) {
    $5_1 = $5_1 + 1 | 0
   }
   $8_1 = $5_1;
   $16_1 = ($20 + ($37_1 + $38 | 0) | 0) + -16383 | 0;
   $5_1 = __wasm_i64_mul($29_1, $43_1, $24_1, $46_1);
   $1_1 = i64toi32_i32$HIGH_BITS;
   $11_1 = 0;
   $9_1 = __wasm_i64_mul($3, $39_1, $30, $23_1);
   $3 = $9_1 + $5_1 | 0;
   $10_1 = i64toi32_i32$HIGH_BITS + $1_1 | 0;
   $10_1 = $3 >>> 0 < $9_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
   $20 = $3;
   $9_1 = $3;
   $3 = $10_1;
   $10_1 = ($1_1 | 0) == ($3 | 0) & $9_1 >>> 0 < $5_1 >>> 0 | $3 >>> 0 < $1_1 >>> 0;
   $5_1 = __wasm_i64_mul($31_1, $47, $14_1, $40_1);
   $1_1 = $5_1 + $9_1 | 0;
   $9_1 = i64toi32_i32$HIGH_BITS + $3 | 0;
   $9_1 = $1_1 >>> 0 < $5_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
   $14_1 = $1_1;
   $5_1 = $1_1;
   $1_1 = $9_1;
   $3 = ($3 | 0) == ($1_1 | 0) & $5_1 >>> 0 < $20 >>> 0 | $1_1 >>> 0 < $3 >>> 0;
   $5_1 = $10_1 + $3 | 0;
   if ($5_1 >>> 0 < $3 >>> 0) {
    $11_1 = 1
   }
   $9_1 = $5_1;
   $3 = $1_1;
   $5_1 = $11_1;
   $32_1 = $9_1;
   $10_1 = 0;
   $9_1 = ($12_1 | 0) == ($21_1 | 0) & $34_1 >>> 0 < $42_1 >>> 0 | $21_1 >>> 0 < $12_1 >>> 0;
   $12_1 = $9_1 + (($12_1 | 0) == ($33 | 0) & $42_1 >>> 0 < $41_1 >>> 0 | $12_1 >>> 0 < $33 >>> 0) | 0;
   if ($12_1 >>> 0 < $9_1 >>> 0) {
    $10_1 = 1
   }
   $11_1 = $12_1;
   $12_1 = $11_1 + $14_1 | 0;
   $9_1 = $3 + $10_1 | 0;
   $20 = $12_1;
   $10_1 = $12_1;
   $9_1 = $10_1 >>> 0 < $11_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
   $3 = $9_1;
   $1_1 = ($1_1 | 0) == ($3 | 0) & $10_1 >>> 0 < $14_1 >>> 0 | $3 >>> 0 < $1_1 >>> 0;
   $9_1 = $32_1 + $1_1 | 0;
   if ($9_1 >>> 0 < $1_1 >>> 0) {
    $5_1 = $5_1 + 1 | 0
   }
   $1_1 = $9_1;
   $9_1 = __wasm_i64_mul($31_1, $47, $30, $23_1);
   $1_1 = $1_1 + $9_1 | 0;
   $10_1 = i64toi32_i32$HIGH_BITS + $5_1 | 0;
   $10_1 = $1_1 >>> 0 < $9_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
   $11_1 = $1_1;
   $12_1 = __wasm_i64_mul($31_1, $47, $29_1, $43_1);
   $5_1 = i64toi32_i32$HIGH_BITS;
   $14_1 = __wasm_i64_mul($24_1, $46_1, $30, $23_1);
   $1_1 = $14_1 + $12_1 | 0;
   $9_1 = i64toi32_i32$HIGH_BITS + $5_1 | 0;
   $9_1 = $1_1 >>> 0 < $14_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
   $14_1 = $1_1;
   $1_1 = $9_1;
   $9_1 = ($5_1 | 0) == ($1_1 | 0) & $14_1 >>> 0 < $12_1 >>> 0 | $1_1 >>> 0 < $5_1 >>> 0;
   $5_1 = $1_1 + $11_1 | 0;
   $11_1 = $10_1 + $9_1 | 0;
   $9_1 = $5_1 >>> 0 < $1_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
   $29_1 = $5_1;
   $10_1 = $3 + $14_1 | 0;
   $11_1 = 0;
   $1_1 = $11_1 + $20 | 0;
   if ($1_1 >>> 0 < $11_1 >>> 0) {
    $10_1 = $10_1 + 1 | 0
   }
   $12_1 = $1_1;
   $5_1 = $1_1;
   $1_1 = $10_1;
   $3 = ($3 | 0) == ($1_1 | 0) & $5_1 >>> 0 < $20 >>> 0 | $1_1 >>> 0 < $3 >>> 0;
   $5_1 = $29_1 + $3 | 0;
   if ($5_1 >>> 0 < $3 >>> 0) {
    $9_1 = $9_1 + 1 | 0
   }
   $14_1 = $5_1;
   $11_1 = $1_1;
   $10_1 = 0;
   $5_1 = ($18 | 0) == ($17_1 | 0) & $36_1 >>> 0 < $45 >>> 0 | $17_1 >>> 0 < $18 >>> 0;
   $18 = $5_1 + (($18 | 0) == ($35 | 0) & $45 >>> 0 < $44 >>> 0 | $18 >>> 0 < $35 >>> 0) | 0;
   if ($18 >>> 0 < $5_1 >>> 0) {
    $10_1 = 1
   }
   $5_1 = $18 + (($2_1 | 0) == ($17_1 | 0) & $28 >>> 0 < $36_1 >>> 0 | $2_1 >>> 0 < $17_1 >>> 0) | 0;
   $3 = $2_1;
   $2_1 = $3 + $12_1 | 0;
   $11_1 = $5_1 + $11_1 | 0;
   $11_1 = $2_1 >>> 0 < $3 >>> 0 ? $11_1 + 1 | 0 : $11_1;
   $18 = $2_1;
   $3 = $2_1;
   $2_1 = $11_1;
   $1_1 = ($1_1 | 0) == ($2_1 | 0) & $3 >>> 0 < $12_1 >>> 0 | $2_1 >>> 0 < $1_1 >>> 0;
   $3 = $1_1 + $14_1 | 0;
   if ($3 >>> 0 < $1_1 >>> 0) {
    $9_1 = $9_1 + 1 | 0
   }
   $1_1 = $2_1;
   $10_1 = $9_1;
   $9_1 = $3;
   $5_1 = 0;
   $3 = ($4_1 | 0) == ($25_1 | 0) & $27_1 >>> 0 < $26 >>> 0 | $25_1 >>> 0 < $4_1 >>> 0;
   $4_1 = $3 + (($4_1 | 0) == ($21_1 | 0) & $26 >>> 0 < $34_1 >>> 0 | $4_1 >>> 0 < $21_1 >>> 0) | 0;
   if ($4_1 >>> 0 < $3 >>> 0) {
    $5_1 = 1
   }
   $3 = $4_1 + $18 | 0;
   $11_1 = $1_1 + $5_1 | 0;
   $11_1 = $3 >>> 0 < $4_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
   $1_1 = $3;
   $4_1 = $11_1;
   $1_1 = ($2_1 | 0) == ($4_1 | 0) & $1_1 >>> 0 < $18 >>> 0 | $4_1 >>> 0 < $2_1 >>> 0;
   $2_1 = $9_1 + $1_1 | 0;
   if ($2_1 >>> 0 < $1_1 >>> 0) {
    $10_1 = $10_1 + 1 | 0
   }
   $1_1 = $2_1;
   $2_1 = $10_1;
   label$13 : {
    if ($2_1 & 65536) {
     $16_1 = $16_1 + 1 | 0;
     break label$13;
    }
    $12_1 = $6_1 >>> 31 | 0;
    $10_1 = $2_1 << 1 | $1_1 >>> 31;
    $1_1 = $1_1 << 1 | $4_1 >>> 31;
    $2_1 = $10_1;
    $10_1 = $4_1 << 1 | $3 >>> 31;
    $3 = $3 << 1 | $8_1 >>> 31;
    $4_1 = $10_1;
    $9_1 = $19_1;
    $10_1 = $6_1 << 1 | $9_1 >>> 31;
    $19_1 = $9_1 << 1;
    $6_1 = $10_1;
    $9_1 = $8_1 << 1 | $7_1 >>> 31;
    $7_1 = $7_1 << 1 | $12_1;
    $8_1 = $9_1;
   }
   if (($16_1 | 0) >= 32767) {
    $15_1 = $15_1 | 2147418112;
    $1_1 = 0;
    $2_1 = 0;
    break label$1;
   }
   label$16 : {
    if (($16_1 | 0) <= 0) {
     $5_1 = 1 - $16_1 | 0;
     if ($5_1 >>> 0 <= 127) {
      $823($13_1 + 16 | 0, $19_1, $6_1, $7_1, $8_1, $5_1);
      $9_1 = $16_1 + 127 | 0;
      $821($13_1 + 32 | 0, $3, $4_1, $1_1, $2_1, $9_1);
      $821($13_1 + 48 | 0, $19_1, $6_1, $7_1, $8_1, $9_1);
      $823($13_1, $3, $4_1, $1_1, $2_1, $5_1);
      $19_1 = (HEAP32[$13_1 + 48 >> 2] | HEAP32[$13_1 + 56 >> 2]) != 0 | (HEAP32[$13_1 + 52 >> 2] | HEAP32[$13_1 + 60 >> 2]) != 0 | (HEAP32[$13_1 + 32 >> 2] | HEAP32[$13_1 + 16 >> 2]);
      $6_1 = HEAP32[$13_1 + 36 >> 2] | HEAP32[$13_1 + 20 >> 2];
      $7_1 = HEAP32[$13_1 + 40 >> 2] | HEAP32[$13_1 + 24 >> 2];
      $8_1 = HEAP32[$13_1 + 44 >> 2] | HEAP32[$13_1 + 28 >> 2];
      $3 = HEAP32[$13_1 >> 2];
      $4_1 = HEAP32[$13_1 + 4 >> 2];
      $2_1 = HEAP32[$13_1 + 12 >> 2];
      $1_1 = HEAP32[$13_1 + 8 >> 2];
      break label$16;
     }
     $1_1 = 0;
     $2_1 = 0;
     break label$1;
    }
    $2_1 = $2_1 & 65535 | $16_1 << 16;
   }
   $22_1 = $1_1 | $22_1;
   $15_1 = $2_1 | $15_1;
   if (!(!$7_1 & ($8_1 | 0) == -2147483648 ? !($6_1 | $19_1) : ($8_1 | 0) > -1 ? 1 : ($8_1 | 0) >= -1 ? ($7_1 >>> 0 <= 4294967295 ? 0 : 1) : 0)) {
    $11_1 = $15_1;
    $12_1 = $4_1;
    $1_1 = $3 + 1 | 0;
    if ($1_1 >>> 0 < 1) {
     $12_1 = $12_1 + 1 | 0
    }
    $2_1 = $12_1;
    $3 = ($4_1 | 0) == ($2_1 | 0) & $1_1 >>> 0 < $3 >>> 0 | $2_1 >>> 0 < $4_1 >>> 0;
    $4_1 = $3 + $22_1 | 0;
    if ($4_1 >>> 0 < $3 >>> 0) {
     $11_1 = $11_1 + 1 | 0
    }
    $22_1 = $4_1;
    $15_1 = $11_1;
    break label$1;
   }
   if ($7_1 | $19_1 | ($8_1 ^ -2147483648 | $6_1)) {
    $1_1 = $3;
    $2_1 = $4_1;
    break label$1;
   }
   $12_1 = $15_1;
   $10_1 = $4_1;
   $1_1 = $3 & 1;
   $2_1 = $1_1 + $3 | 0;
   if ($2_1 >>> 0 < $1_1 >>> 0) {
    $10_1 = $10_1 + 1 | 0
   }
   $1_1 = $2_1;
   $2_1 = $10_1;
   $3 = ($4_1 | 0) == ($2_1 | 0) & $1_1 >>> 0 < $3 >>> 0 | $2_1 >>> 0 < $4_1 >>> 0;
   $4_1 = $3 + $22_1 | 0;
   if ($4_1 >>> 0 < $3 >>> 0) {
    $12_1 = $12_1 + 1 | 0
   }
   $22_1 = $4_1;
   $15_1 = $12_1;
  }
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $22_1;
  HEAP32[$0 + 12 >> 2] = $15_1;
  global$0 = $13_1 + 96 | 0;
 }
 
 function $825($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $6_1 = $0;
  $7_1 = $0;
  label$1 : {
   if (!$1_1) {
    $1_1 = 0;
    $5_1 = 0;
    break label$1;
   }
   $2_1 = $1_1 >> 31;
   $4_1 = $2_1 + $1_1 ^ $2_1;
   $2_1 = Math_clz32($4_1);
   $821($3, $4_1, 0, 0, 0, $2_1 + 81 | 0);
   $2_1 = (HEAP32[$3 + 12 >> 2] ^ 65536) + (16414 - $2_1 << 16) | 0;
   $4_1 = 0 + HEAP32[$3 + 8 >> 2] | 0;
   if ($4_1 >>> 0 < $5_1 >>> 0) {
    $2_1 = $2_1 + 1 | 0
   }
   $1_1 = $1_1 & -2147483648 | $2_1;
   $2_1 = HEAP32[$3 + 4 >> 2];
   $5_1 = HEAP32[$3 >> 2];
  }
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$6_1 + 4 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $4_1;
  HEAP32[$0 + 12 >> 2] = $1_1;
  global$0 = $3 + 16 | 0;
 }
 
 function $826($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1) {
  var $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18 = 0, $19_1 = 0, $20 = 0;
  $11_1 = global$0 - 112 | 0;
  global$0 = $11_1;
  $12_1 = $7_1;
  $14_1 = $8_1 & 2147483647;
  $10_1 = $2_1 + -1 | 0;
  $9_1 = $1_1 + -1 | 0;
  if ($9_1 >>> 0 < 4294967295) {
   $10_1 = $10_1 + 1 | 0
  }
  $13_1 = $9_1;
  $16_1 = ($9_1 | 0) == -1 & ($10_1 | 0) == -1;
  $15_1 = $4_1 & 2147483647;
  $9_1 = $15_1;
  $17_1 = $3;
  $10_1 = ($2_1 | 0) == ($10_1 | 0) & $13_1 >>> 0 < $1_1 >>> 0 | $10_1 >>> 0 < $2_1 >>> 0;
  $13_1 = $3 + $10_1 | 0;
  if ($13_1 >>> 0 < $10_1 >>> 0) {
   $9_1 = $9_1 + 1 | 0
  }
  $13_1 = $13_1 + -1 | 0;
  $10_1 = $9_1 + -1 | 0;
  $9_1 = $13_1;
  label$1 : {
   label$2 : {
    $10_1 = $9_1 >>> 0 < 4294967295 ? $10_1 + 1 | 0 : $10_1;
    if (!(($9_1 | 0) == -1 & ($10_1 | 0) == 2147418111 ? $16_1 : ($10_1 | 0) == 2147418111 & $9_1 >>> 0 > 4294967295 | $10_1 >>> 0 > 2147418111)) {
     $10_1 = $6_1 + -1 | 0;
     $9_1 = $5_1 + -1 | 0;
     if ($9_1 >>> 0 < 4294967295) {
      $10_1 = $10_1 + 1 | 0
     }
     $13_1 = $9_1;
     $16_1 = ($9_1 | 0) != -1 | ($10_1 | 0) != -1;
     $9_1 = $14_1;
     $10_1 = ($6_1 | 0) == ($10_1 | 0) & $13_1 >>> 0 < $5_1 >>> 0 | $10_1 >>> 0 < $6_1 >>> 0;
     $13_1 = $10_1 + $12_1 | 0;
     if ($13_1 >>> 0 < $10_1 >>> 0) {
      $9_1 = $9_1 + 1 | 0
     }
     $10_1 = $13_1 + -1 | 0;
     $9_1 = $9_1 + -1 | 0;
     $9_1 = $10_1 >>> 0 < 4294967295 ? $9_1 + 1 | 0 : $9_1;
     if (($10_1 | 0) == -1 & ($9_1 | 0) == 2147418111 ? $16_1 : ($9_1 | 0) == 2147418111 & $10_1 >>> 0 < 4294967295 | $9_1 >>> 0 < 2147418111) {
      break label$2
     }
    }
    if (!(!$17_1 & ($15_1 | 0) == 2147418112 ? !($1_1 | $2_1) : ($15_1 | 0) == 2147418112 & $17_1 >>> 0 < 0 | $15_1 >>> 0 < 2147418112)) {
     $7_1 = $3;
     $8_1 = $4_1 | 32768;
     $5_1 = $1_1;
     $6_1 = $2_1;
     break label$1;
    }
    if (!(!$12_1 & ($14_1 | 0) == 2147418112 ? !($5_1 | $6_1) : ($14_1 | 0) == 2147418112 & $12_1 >>> 0 < 0 | $14_1 >>> 0 < 2147418112)) {
     $8_1 = $8_1 | 32768;
     break label$1;
    }
    if (!($1_1 | $17_1 | ($15_1 ^ 2147418112 | $2_1))) {
     $9_1 = $3;
     $3 = !($1_1 ^ $5_1 | $3 ^ $7_1 | ($2_1 ^ $6_1 | $4_1 ^ $8_1 ^ -2147483648));
     $7_1 = $3 ? 0 : $9_1;
     $8_1 = $3 ? 2147450880 : $4_1;
     $5_1 = $3 ? 0 : $1_1;
     $6_1 = $3 ? 0 : $2_1;
     break label$1;
    }
    if (!($5_1 | $12_1 | ($14_1 ^ 2147418112 | $6_1))) {
     break label$1
    }
    if (!($1_1 | $17_1 | ($2_1 | $15_1))) {
     if ($5_1 | $12_1 | ($6_1 | $14_1)) {
      break label$1
     }
     $5_1 = $1_1 & $5_1;
     $6_1 = $2_1 & $6_1;
     $7_1 = $3 & $7_1;
     $8_1 = $4_1 & $8_1;
     break label$1;
    }
    if ($5_1 | $12_1 | ($6_1 | $14_1)) {
     break label$2
    }
    $5_1 = $1_1;
    $6_1 = $2_1;
    $7_1 = $3;
    $8_1 = $4_1;
    break label$1;
   }
   $10_1 = ($12_1 | 0) == ($17_1 | 0) & ($14_1 | 0) == ($15_1 | 0) ? ($2_1 | 0) == ($6_1 | 0) & $5_1 >>> 0 > $1_1 >>> 0 | $6_1 >>> 0 > $2_1 >>> 0 : ($14_1 | 0) == ($15_1 | 0) & $12_1 >>> 0 > $17_1 >>> 0 | $14_1 >>> 0 > $15_1 >>> 0;
   $9_1 = $10_1;
   $15_1 = $9_1 ? $5_1 : $1_1;
   $14_1 = $9_1 ? $6_1 : $2_1;
   $12_1 = $9_1 ? $8_1 : $4_1;
   $17_1 = $12_1;
   $18 = $9_1 ? $7_1 : $3;
   $13_1 = $18;
   $9_1 = $12_1 & 65535;
   $8_1 = $10_1 ? $4_1 : $8_1;
   $19_1 = $8_1;
   $4_1 = $10_1 ? $3 : $7_1;
   $16_1 = $8_1 >>> 16 & 32767;
   $12_1 = $12_1 >>> 16 & 32767;
   if (!$12_1) {
    $3 = !($9_1 | $13_1);
    $7_1 = $3 << 6;
    $8_1 = Math_clz32($3 ? $15_1 : $13_1) + 32 | 0;
    $3 = Math_clz32($3 ? $14_1 : $9_1);
    $3 = $7_1 + (($3 | 0) == 32 ? $8_1 : $3) | 0;
    $821($11_1 + 96 | 0, $15_1, $14_1, $13_1, $9_1, $3 + -15 | 0);
    $13_1 = HEAP32[$11_1 + 104 >> 2];
    $15_1 = HEAP32[$11_1 + 96 >> 2];
    $14_1 = HEAP32[$11_1 + 100 >> 2];
    $12_1 = 16 - $3 | 0;
    $9_1 = HEAP32[$11_1 + 108 >> 2];
   }
   $5_1 = $10_1 ? $1_1 : $5_1;
   $6_1 = $10_1 ? $2_1 : $6_1;
   $1_1 = $4_1;
   $2_1 = $19_1 & 65535;
   if ($16_1) {
    $3 = $1_1;
    $1_1 = $2_1;
   } else {
    $8_1 = $1_1;
    $3 = !($1_1 | $2_1);
    $7_1 = $3 << 6;
    $10_1 = Math_clz32($3 ? $5_1 : $1_1) + 32 | 0;
    $1_1 = Math_clz32($3 ? $6_1 : $2_1);
    $1_1 = $7_1 + (($1_1 | 0) == 32 ? $10_1 : $1_1) | 0;
    $821($11_1 + 80 | 0, $5_1, $6_1, $8_1, $2_1, $1_1 + -15 | 0);
    $16_1 = 16 - $1_1 | 0;
    $5_1 = HEAP32[$11_1 + 80 >> 2];
    $6_1 = HEAP32[$11_1 + 84 >> 2];
    $3 = HEAP32[$11_1 + 88 >> 2];
    $1_1 = HEAP32[$11_1 + 92 >> 2];
   }
   $2_1 = $3;
   $10_1 = $1_1 << 3 | $2_1 >>> 29;
   $7_1 = $2_1 << 3 | $6_1 >>> 29;
   $8_1 = $10_1 | 524288;
   $1_1 = $13_1;
   $3 = $9_1 << 3 | $1_1 >>> 29;
   $10_1 = $1_1 << 3 | $14_1 >>> 29;
   $20 = $3;
   $18 = $4_1 ^ $18;
   $13_1 = $17_1 ^ $19_1;
   $1_1 = $5_1;
   $9_1 = $6_1 << 3 | $1_1 >>> 29;
   $1_1 = $1_1 << 3;
   $2_1 = $9_1;
   $4_1 = $12_1 - $16_1 | 0;
   $3 = $1_1;
   label$11 : {
    if (!$4_1) {
     break label$11
    }
    if ($4_1 >>> 0 > 127) {
     $7_1 = 0;
     $8_1 = 0;
     $9_1 = 0;
     $3 = 1;
     break label$11;
    }
    $821($11_1 - -64 | 0, $1_1, $2_1, $7_1, $8_1, 128 - $4_1 | 0);
    $823($11_1 + 48 | 0, $1_1, $2_1, $7_1, $8_1, $4_1);
    $7_1 = HEAP32[$11_1 + 56 >> 2];
    $8_1 = HEAP32[$11_1 + 60 >> 2];
    $9_1 = HEAP32[$11_1 + 52 >> 2];
    $3 = HEAP32[$11_1 + 48 >> 2] | ((HEAP32[$11_1 + 64 >> 2] | HEAP32[$11_1 + 72 >> 2]) != 0 | (HEAP32[$11_1 + 68 >> 2] | HEAP32[$11_1 + 76 >> 2]) != 0);
   }
   $6_1 = $9_1;
   $4_1 = $10_1;
   $16_1 = $20 | 524288;
   $1_1 = $15_1;
   $9_1 = $14_1 << 3 | $1_1 >>> 29;
   $2_1 = $1_1 << 3;
   label$13 : {
    if (($13_1 | 0) < -1 ? 1 : ($13_1 | 0) <= -1 ? ($18 >>> 0 > 4294967295 ? 0 : 1) : 0) {
     $14_1 = $3;
     $1_1 = $2_1 - $3 | 0;
     $15_1 = $4_1 - $7_1 | 0;
     $3 = ($6_1 | 0) == ($9_1 | 0) & $2_1 >>> 0 < $3 >>> 0 | $9_1 >>> 0 < $6_1 >>> 0;
     $5_1 = $15_1 - $3 | 0;
     $2_1 = $9_1 - (($2_1 >>> 0 < $14_1 >>> 0) + $6_1 | 0) | 0;
     $6_1 = ($16_1 - (($4_1 >>> 0 < $7_1 >>> 0) + $8_1 | 0) | 0) - ($15_1 >>> 0 < $3 >>> 0) | 0;
     if (!($1_1 | $5_1 | ($2_1 | $6_1))) {
      $5_1 = 0;
      $6_1 = 0;
      $7_1 = 0;
      $8_1 = 0;
      break label$1;
     }
     if (($6_1 | 0) == 524287 & $5_1 >>> 0 > 4294967295 | $6_1 >>> 0 > 524287) {
      break label$13
     }
     $7_1 = $1_1;
     $3 = !($5_1 | $6_1);
     $4_1 = $3 << 6;
     $8_1 = Math_clz32($3 ? $1_1 : $5_1) + 32 | 0;
     $1_1 = Math_clz32($3 ? $2_1 : $6_1);
     $1_1 = $4_1 + (($1_1 | 0) == 32 ? $8_1 : $1_1) | 0;
     $1_1 = $1_1 + -12 | 0;
     $821($11_1 + 32 | 0, $7_1, $2_1, $5_1, $6_1, $1_1);
     $12_1 = $12_1 - $1_1 | 0;
     $5_1 = HEAP32[$11_1 + 40 >> 2];
     $6_1 = HEAP32[$11_1 + 44 >> 2];
     $1_1 = HEAP32[$11_1 + 32 >> 2];
     $2_1 = HEAP32[$11_1 + 36 >> 2];
     break label$13;
    }
    $10_1 = $6_1 + $9_1 | 0;
    $1_1 = $3;
    $2_1 = $1_1 + $2_1 | 0;
    if ($2_1 >>> 0 < $1_1 >>> 0) {
     $10_1 = $10_1 + 1 | 0
    }
    $1_1 = $2_1;
    $2_1 = $10_1;
    $6_1 = ($6_1 | 0) == ($2_1 | 0) & $1_1 >>> 0 < $3 >>> 0 | $2_1 >>> 0 < $6_1 >>> 0;
    $10_1 = $8_1 + $16_1 | 0;
    $3 = $4_1 + $7_1 | 0;
    if ($3 >>> 0 < $4_1 >>> 0) {
     $10_1 = $10_1 + 1 | 0
    }
    $5_1 = $3;
    $4_1 = $6_1 + $3 | 0;
    $3 = $10_1;
    $3 = $4_1 >>> 0 < $5_1 >>> 0 ? $3 + 1 | 0 : $3;
    $5_1 = $4_1;
    $6_1 = $3;
    if (!($3 & 1048576)) {
     break label$13
    }
    $1_1 = $1_1 & 1 | (($2_1 & 1) << 31 | $1_1 >>> 1);
    $2_1 = $5_1 << 31 | $2_1 >>> 1;
    $12_1 = $12_1 + 1 | 0;
    $5_1 = ($6_1 & 1) << 31 | $5_1 >>> 1;
    $6_1 = $6_1 >>> 1 | 0;
   }
   $7_1 = 0;
   $9_1 = $17_1 & -2147483648;
   if (($12_1 | 0) >= 32767) {
    $8_1 = $9_1 | 2147418112;
    $5_1 = 0;
    $6_1 = 0;
    break label$1;
   }
   $4_1 = 0;
   label$17 : {
    if (($12_1 | 0) > 0) {
     $4_1 = $12_1;
     break label$17;
    }
    $821($11_1 + 16 | 0, $1_1, $2_1, $5_1, $6_1, $12_1 + 127 | 0);
    $823($11_1, $1_1, $2_1, $5_1, $6_1, 1 - $12_1 | 0);
    $1_1 = HEAP32[$11_1 >> 2] | ((HEAP32[$11_1 + 16 >> 2] | HEAP32[$11_1 + 24 >> 2]) != 0 | (HEAP32[$11_1 + 20 >> 2] | HEAP32[$11_1 + 28 >> 2]) != 0);
    $2_1 = HEAP32[$11_1 + 4 >> 2];
    $5_1 = HEAP32[$11_1 + 8 >> 2];
    $6_1 = HEAP32[$11_1 + 12 >> 2];
   }
   $7_1 = $7_1 | (($6_1 & 7) << 29 | $5_1 >>> 3);
   $4_1 = $9_1 | $6_1 >>> 3 & 65535 | $4_1 << 16;
   $9_1 = $5_1 << 29;
   $3 = 0;
   $5_1 = $9_1;
   $6_1 = ($2_1 & 7) << 29 | $1_1 >>> 3 | $3;
   $9_1 = $4_1;
   $3 = $2_1 >>> 3 | $5_1;
   $10_1 = $3;
   $4_1 = $1_1 & 7;
   $1_1 = $4_1 >>> 0 > 4;
   $2_1 = $1_1 + $6_1 | 0;
   if ($2_1 >>> 0 < $1_1 >>> 0) {
    $10_1 = $10_1 + 1 | 0
   }
   $1_1 = $2_1;
   $2_1 = $10_1;
   $3 = ($3 | 0) == ($2_1 | 0) & $1_1 >>> 0 < $6_1 >>> 0 | $2_1 >>> 0 < $3 >>> 0;
   $5_1 = $3 + $7_1 | 0;
   if ($5_1 >>> 0 < $3 >>> 0) {
    $9_1 = $9_1 + 1 | 0
   }
   $4_1 = ($4_1 | 0) == 4;
   $3 = $4_1 ? $1_1 & 1 : 0;
   $8_1 = $9_1;
   $7_1 = $5_1;
   $4_1 = 0;
   $9_1 = $2_1 + $4_1 | 0;
   $2_1 = $1_1 + $3 | 0;
   if ($2_1 >>> 0 < $1_1 >>> 0) {
    $9_1 = $9_1 + 1 | 0
   }
   $5_1 = $2_1;
   $1_1 = $2_1;
   $6_1 = $9_1;
   $1_1 = ($4_1 | 0) == ($9_1 | 0) & $1_1 >>> 0 < $3 >>> 0 | $9_1 >>> 0 < $4_1 >>> 0;
   $2_1 = $7_1 + $1_1 | 0;
   if ($2_1 >>> 0 < $1_1 >>> 0) {
    $8_1 = $8_1 + 1 | 0
   }
   $7_1 = $2_1;
  }
  HEAP32[$0 >> 2] = $5_1;
  HEAP32[$0 + 4 >> 2] = $6_1;
  HEAP32[$0 + 8 >> 2] = $7_1;
  HEAP32[$0 + 12 >> 2] = $8_1;
  global$0 = $11_1 + 112 | 0;
 }
 
 function $827($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  wasm2js_scratch_store_f64(+$1_1);
  $3 = wasm2js_scratch_load_i32(1) | 0;
  $8_1 = wasm2js_scratch_load_i32(0) | 0;
  $9_1 = $3 & -2147483648;
  $4_1 = $3 & 2147483647;
  $2_1 = $4_1;
  $5_1 = $2_1 + -1048576 | 0;
  $4_1 = $8_1;
  $6_1 = $4_1;
  if ($4_1 >>> 0 < 0) {
   $5_1 = $5_1 + 1 | 0
  }
  label$1 : {
   if (($5_1 | 0) == 2145386495 & $6_1 >>> 0 <= 4294967295 | $5_1 >>> 0 < 2145386495) {
    $5_1 = $4_1 << 28;
    $6_1 = 0;
    $3 = ($2_1 & 15) << 28 | $4_1 >>> 4;
    $2_1 = ($2_1 >>> 4 | 0) + 1006632960 | 0;
    $2_1 = $3 >>> 0 < 0 ? $2_1 + 1 | 0 : $2_1;
    break label$1;
   }
   if (($2_1 | 0) == 2146435072 & $4_1 >>> 0 >= 0 | $2_1 >>> 0 > 2146435072) {
    $6_1 = 0;
    $5_1 = $8_1 << 28;
    $2_1 = $3 >>> 4 | 0;
    $3 = ($3 & 15) << 28 | $8_1 >>> 4;
    $2_1 = $2_1 | 2147418112;
    break label$1;
   }
   if (!($2_1 | $4_1)) {
    $6_1 = 0;
    $5_1 = 0;
    $3 = 0;
    $2_1 = 0;
    break label$1;
   }
   $6_1 = $2_1;
   $2_1 = ($2_1 | 0) == 1 & $4_1 >>> 0 >= 0 | $2_1 >>> 0 > 1 ? Math_clz32($2_1) : Math_clz32($8_1) + 32 | 0;
   $821($7_1, $4_1, $6_1, 0, 0, $2_1 + 49 | 0);
   $6_1 = HEAP32[$7_1 >> 2];
   $5_1 = HEAP32[$7_1 + 4 >> 2];
   $3 = HEAP32[$7_1 + 8 >> 2];
   $2_1 = HEAP32[$7_1 + 12 >> 2] ^ 65536 | 15372 - $2_1 << 16;
  }
  HEAP32[$0 >> 2] = $6_1;
  HEAP32[$0 + 4 >> 2] = $5_1;
  HEAP32[$0 + 8 >> 2] = $3 | $10_1;
  HEAP32[$0 + 12 >> 2] = $2_1 | $9_1;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $828($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  $9_1 = 1;
  $8_1 = $3 & 2147483647;
  $12_1 = $8_1;
  $10_1 = $2_1;
  label$1 : {
   if (!$2_1 & ($8_1 | 0) == 2147418112 ? $0 | $1_1 : ($8_1 | 0) == 2147418112 & $2_1 >>> 0 > 0 | $8_1 >>> 0 > 2147418112) {
    break label$1
   }
   $11_1 = $7_1 & 2147483647;
   $13_1 = $11_1;
   $8_1 = $6_1;
   if (!$6_1 & ($11_1 | 0) == 2147418112 ? $4_1 | $5_1 : ($11_1 | 0) == 2147418112 & $6_1 >>> 0 > 0 | $11_1 >>> 0 > 2147418112) {
    break label$1
   }
   if (!($0 | $4_1 | ($8_1 | $10_1) | ($1_1 | $5_1 | ($12_1 | $13_1)))) {
    return 0
   }
   $10_1 = $3 & $7_1;
   if (($10_1 | 0) > 0 ? 1 : ($10_1 | 0) >= 0 ? (($2_1 & $6_1) >>> 0 < 0 ? 0 : 1) : 0) {
    $9_1 = -1;
    if (($2_1 | 0) == ($6_1 | 0) & ($3 | 0) == ($7_1 | 0) ? ($1_1 | 0) == ($5_1 | 0) & $0 >>> 0 < $4_1 >>> 0 | $1_1 >>> 0 < $5_1 >>> 0 : ($3 | 0) < ($7_1 | 0) ? 1 : ($3 | 0) <= ($7_1 | 0) ? ($2_1 >>> 0 >= $6_1 >>> 0 ? 0 : 1) : 0) {
     break label$1
    }
    return ($0 ^ $4_1 | $2_1 ^ $6_1) != 0 | ($1_1 ^ $5_1 | $3 ^ $7_1) != 0;
   }
   $9_1 = -1;
   if (($2_1 | 0) == ($6_1 | 0) & ($3 | 0) == ($7_1 | 0) ? ($1_1 | 0) == ($5_1 | 0) & $0 >>> 0 > $4_1 >>> 0 | $1_1 >>> 0 > $5_1 >>> 0 : ($3 | 0) > ($7_1 | 0) ? 1 : ($3 | 0) >= ($7_1 | 0) ? ($2_1 >>> 0 <= $6_1 >>> 0 ? 0 : 1) : 0) {
    break label$1
   }
   $9_1 = ($0 ^ $4_1 | $2_1 ^ $6_1) != 0 | ($1_1 ^ $5_1 | $3 ^ $7_1) != 0;
  }
  return $9_1;
 }
 
 function $829($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $6_1 = -1;
  $4_1 = $3 & 2147483647;
  $7_1 = $4_1;
  $5_1 = $2_1;
  label$1 : {
   if (!$2_1 & ($4_1 | 0) == 2147418112 ? $0 | $1_1 : ($4_1 | 0) == 2147418112 & $2_1 >>> 0 > 0 | $4_1 >>> 0 > 2147418112) {
    break label$1
   }
   if (!($0 | $5_1 | ($1_1 | ($7_1 | 1073610752)))) {
    return 0
   }
   $5_1 = $3 & 1073610752;
   if (($5_1 | 0) > 0 ? 1 : ($5_1 | 0) >= 0 ? 1 : 0) {
    if (!$2_1 & ($3 | 0) == 1073610752 ? !$1_1 & $0 >>> 0 < 0 | $1_1 >>> 0 < 0 : ($3 | 0) < 1073610752 ? 1 : ($3 | 0) <= 1073610752 ? ($2_1 >>> 0 >= 0 ? 0 : 1) : 0) {
     break label$1
    }
    return ($0 | $2_1) != 0 | ($1_1 | $3 ^ 1073610752) != 0;
   }
   if (!$2_1 & ($3 | 0) == 1073610752 ? !$1_1 & $0 >>> 0 > 0 | $1_1 >>> 0 > 0 : ($3 | 0) > 1073610752 ? 1 : ($3 | 0) >= 1073610752 ? ($2_1 >>> 0 <= 0 ? 0 : 1) : 0) {
    break label$1
   }
   $6_1 = ($0 | $2_1) != 0 | ($1_1 | $3 ^ 1073610752) != 0;
  }
  return $6_1;
 }
 
 function $830($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1) {
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $4_1 & 65535 | ($8_1 >>> 16 & 32768 | $4_1 >>> 16 & 32767) << 16;
 }
 
 function $831($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $6_1 = $0;
  $7_1 = $0;
  label$1 : {
   if (!$1_1) {
    $1_1 = 0;
    $4_1 = 0;
    break label$1;
   }
   $3 = $1_1;
   $1_1 = Math_clz32($1_1) ^ 31;
   $821($2_1, $3, 0, 0, 0, 112 - $1_1 | 0);
   $1_1 = (HEAP32[$2_1 + 12 >> 2] ^ 65536) + ($1_1 + 16383 << 16) | 0;
   $3 = 0 + HEAP32[$2_1 + 8 >> 2] | 0;
   if ($3 >>> 0 < $5_1 >>> 0) {
    $1_1 = $1_1 + 1 | 0
   }
   $5_1 = HEAP32[$2_1 + 4 >> 2];
   $4_1 = HEAP32[$2_1 >> 2];
  }
  HEAP32[$7_1 >> 2] = $4_1;
  HEAP32[$6_1 + 4 >> 2] = $5_1;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $1_1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $832($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1) {
  var $9_1 = 0;
  $9_1 = global$0 - 16 | 0;
  global$0 = $9_1;
  $826($9_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1 ^ -2147483648);
  $3 = HEAP32[$9_1 >> 2];
  $2_1 = HEAP32[$9_1 + 4 >> 2];
  $1_1 = HEAP32[$9_1 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$9_1 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $1_1;
  HEAP32[$0 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = $2_1;
  global$0 = $9_1 + 16 | 0;
 }
 
 function $833($0, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  label$1 : {
   if (($5_1 | 0) >= 16384) {
    $824($6_1 + 32 | 0, $1_1, $2_1, $3, $4_1, 0, 0, 0, 2147352576);
    $3 = HEAP32[$6_1 + 40 >> 2];
    $4_1 = HEAP32[$6_1 + 44 >> 2];
    $1_1 = HEAP32[$6_1 + 32 >> 2];
    $2_1 = HEAP32[$6_1 + 36 >> 2];
    if (($5_1 | 0) < 32767) {
     $5_1 = $5_1 + -16383 | 0;
     break label$1;
    }
    $824($6_1 + 16 | 0, $1_1, $2_1, $3, $4_1, 0, 0, 0, 2147352576);
    $5_1 = (($5_1 | 0) < 49149 ? $5_1 : 49149) + -32766 | 0;
    $3 = HEAP32[$6_1 + 24 >> 2];
    $4_1 = HEAP32[$6_1 + 28 >> 2];
    $1_1 = HEAP32[$6_1 + 16 >> 2];
    $2_1 = HEAP32[$6_1 + 20 >> 2];
    break label$1;
   }
   if (($5_1 | 0) > -16383) {
    break label$1
   }
   $824($6_1 - -64 | 0, $1_1, $2_1, $3, $4_1, 0, 0, 0, 65536);
   $3 = HEAP32[$6_1 + 72 >> 2];
   $4_1 = HEAP32[$6_1 + 76 >> 2];
   $1_1 = HEAP32[$6_1 + 64 >> 2];
   $2_1 = HEAP32[$6_1 + 68 >> 2];
   if (($5_1 | 0) > -32765) {
    $5_1 = $5_1 + 16382 | 0;
    break label$1;
   }
   $824($6_1 + 48 | 0, $1_1, $2_1, $3, $4_1, 0, 0, 0, 65536);
   $5_1 = (($5_1 | 0) > -49146 ? $5_1 : -49146) + 32764 | 0;
   $3 = HEAP32[$6_1 + 56 >> 2];
   $4_1 = HEAP32[$6_1 + 60 >> 2];
   $1_1 = HEAP32[$6_1 + 48 >> 2];
   $2_1 = HEAP32[$6_1 + 52 >> 2];
  }
  $824($6_1, $1_1, $2_1, $3, $4_1, 0, 0, 0, $5_1 + 16383 << 16);
  $1_1 = HEAP32[$6_1 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$6_1 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $1_1;
  $1_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $1_1;
  global$0 = $6_1 + 80 | 0;
 }
 
 function $834($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1) {
  var $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18 = 0, $19_1 = 0, $20 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26 = 0, $27_1 = 0, $28 = 0, $29_1 = 0, $30 = 0, $31_1 = 0, $32_1 = 0, $33 = 0, $34_1 = 0, $35 = 0, $36_1 = 0, $37_1 = 0, $38 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0;
  $13_1 = global$0 - 192 | 0;
  global$0 = $13_1;
  $29_1 = $7_1;
  $31_1 = $8_1 & 65535;
  $21_1 = $3;
  $15_1 = $4_1 & 65535;
  $30 = ($4_1 ^ $8_1) & -2147483648;
  $14_1 = $8_1 >>> 16 & 32767;
  label$1 : {
   $19_1 = $4_1 >>> 16 & 32767;
   label$2 : {
    label$3 : {
     if ($19_1 + -1 >>> 0 <= 32765) {
      if ($14_1 + -1 >>> 0 < 32766) {
       break label$3
      }
     }
     $10_1 = $4_1 & 2147483647;
     $11_1 = $10_1;
     $9_1 = $3;
     if (!(!$9_1 & ($10_1 | 0) == 2147418112 ? !($1_1 | $2_1) : ($10_1 | 0) == 2147418112 & $9_1 >>> 0 < 0 | $10_1 >>> 0 < 2147418112)) {
      $33 = $3;
      $30 = $4_1 | 32768;
      break label$2;
     }
     $10_1 = $8_1 & 2147483647;
     $4_1 = $10_1;
     $3 = $7_1;
     if (!(!$3 & ($10_1 | 0) == 2147418112 ? !($5_1 | $6_1) : ($10_1 | 0) == 2147418112 & $3 >>> 0 < 0 | $10_1 >>> 0 < 2147418112)) {
      $33 = $7_1;
      $30 = $8_1 | 32768;
      $1_1 = $5_1;
      $2_1 = $6_1;
      break label$2;
     }
     if (!($1_1 | $9_1 | ($11_1 ^ 2147418112 | $2_1))) {
      if (!($3 | $5_1 | ($4_1 ^ 2147418112 | $6_1))) {
       $1_1 = 0;
       $2_1 = 0;
       $30 = 2147450880;
       break label$2;
      }
      $30 = $30 | 2147418112;
      $1_1 = 0;
      $2_1 = 0;
      break label$2;
     }
     if (!($3 | $5_1 | ($4_1 ^ 2147418112 | $6_1))) {
      $1_1 = 0;
      $2_1 = 0;
      break label$2;
     }
     if (!($1_1 | $9_1 | ($2_1 | $11_1))) {
      break label$1
     }
     if (!($3 | $5_1 | ($4_1 | $6_1))) {
      $30 = $30 | 2147418112;
      $1_1 = 0;
      $2_1 = 0;
      break label$2;
     }
     $10_1 = 0;
     if (($11_1 | 0) == 65535 & $9_1 >>> 0 <= 4294967295 | $11_1 >>> 0 < 65535) {
      $9_1 = $1_1;
      $7_1 = !($15_1 | $21_1);
      $8_1 = $7_1 << 6;
      $10_1 = Math_clz32($7_1 ? $1_1 : $21_1) + 32 | 0;
      $1_1 = Math_clz32($7_1 ? $2_1 : $15_1);
      $1_1 = $8_1 + (($1_1 | 0) == 32 ? $10_1 : $1_1) | 0;
      $821($13_1 + 176 | 0, $9_1, $2_1, $21_1, $15_1, $1_1 + -15 | 0);
      $10_1 = 16 - $1_1 | 0;
      $21_1 = HEAP32[$13_1 + 184 >> 2];
      $15_1 = HEAP32[$13_1 + 188 >> 2];
      $2_1 = HEAP32[$13_1 + 180 >> 2];
      $1_1 = HEAP32[$13_1 + 176 >> 2];
     }
     if (($4_1 | 0) == 65535 & $3 >>> 0 > 4294967295 | $4_1 >>> 0 > 65535) {
      break label$3
     }
     $3 = !($29_1 | $31_1);
     $4_1 = $3 << 6;
     $7_1 = Math_clz32($3 ? $5_1 : $29_1) + 32 | 0;
     $3 = Math_clz32($3 ? $6_1 : $31_1);
     $3 = $4_1 + (($3 | 0) == 32 ? $7_1 : $3) | 0;
     $821($13_1 + 160 | 0, $5_1, $6_1, $29_1, $31_1, $3 + -15 | 0);
     $10_1 = ($3 + $10_1 | 0) + -16 | 0;
     $29_1 = HEAP32[$13_1 + 168 >> 2];
     $31_1 = HEAP32[$13_1 + 172 >> 2];
     $5_1 = HEAP32[$13_1 + 160 >> 2];
     $6_1 = HEAP32[$13_1 + 164 >> 2];
    }
    $4_1 = $31_1 | 65536;
    $34_1 = $4_1;
    $40_1 = $29_1;
    $3 = $29_1;
    $12_1 = $4_1 << 15 | $3 >>> 17;
    $3 = $3 << 15 | $6_1 >>> 17;
    $7_1 = -102865788 - $3 | 0;
    $4_1 = $12_1;
    $9_1 = $4_1;
    $8_1 = 1963258675 - ($9_1 + (4192101508 < $3 >>> 0) | 0) | 0;
    $815($13_1 + 144 | 0, $3, $9_1, $7_1, $8_1);
    $9_1 = HEAP32[$13_1 + 152 >> 2];
    $815($13_1 + 128 | 0, 0 - $9_1 | 0, 0 - (HEAP32[$13_1 + 156 >> 2] + (0 < $9_1 >>> 0) | 0) | 0, $7_1, $8_1);
    $7_1 = HEAP32[$13_1 + 136 >> 2];
    $8_1 = $7_1 << 1 | HEAP32[$13_1 + 132 >> 2] >>> 31;
    $7_1 = HEAP32[$13_1 + 140 >> 2] << 1 | $7_1 >>> 31;
    $815($13_1 + 112 | 0, $8_1, $7_1, $3, $4_1);
    $9_1 = $7_1;
    $7_1 = HEAP32[$13_1 + 120 >> 2];
    $815($13_1 + 96 | 0, $8_1, $9_1, 0 - $7_1 | 0, 0 - (HEAP32[$13_1 + 124 >> 2] + (0 < $7_1 >>> 0) | 0) | 0);
    $7_1 = HEAP32[$13_1 + 104 >> 2];
    $11_1 = HEAP32[$13_1 + 108 >> 2] << 1 | $7_1 >>> 31;
    $8_1 = $7_1 << 1 | HEAP32[$13_1 + 100 >> 2] >>> 31;
    $815($13_1 + 80 | 0, $8_1, $11_1, $3, $4_1);
    $7_1 = HEAP32[$13_1 + 88 >> 2];
    $815($13_1 - -64 | 0, $8_1, $11_1, 0 - $7_1 | 0, 0 - (HEAP32[$13_1 + 92 >> 2] + (0 < $7_1 >>> 0) | 0) | 0);
    $7_1 = HEAP32[$13_1 + 72 >> 2];
    $8_1 = $7_1 << 1 | HEAP32[$13_1 + 68 >> 2] >>> 31;
    $7_1 = HEAP32[$13_1 + 76 >> 2] << 1 | $7_1 >>> 31;
    $815($13_1 + 48 | 0, $8_1, $7_1, $3, $4_1);
    $9_1 = $7_1;
    $7_1 = HEAP32[$13_1 + 56 >> 2];
    $815($13_1 + 32 | 0, $8_1, $9_1, 0 - $7_1 | 0, 0 - (HEAP32[$13_1 + 60 >> 2] + (0 < $7_1 >>> 0) | 0) | 0);
    $7_1 = HEAP32[$13_1 + 40 >> 2];
    $11_1 = HEAP32[$13_1 + 44 >> 2] << 1 | $7_1 >>> 31;
    $8_1 = $7_1 << 1 | HEAP32[$13_1 + 36 >> 2] >>> 31;
    $815($13_1 + 16 | 0, $8_1, $11_1, $3, $4_1);
    $7_1 = HEAP32[$13_1 + 24 >> 2];
    $815($13_1, $8_1, $11_1, 0 - $7_1 | 0, 0 - (HEAP32[$13_1 + 28 >> 2] + (0 < $7_1 >>> 0) | 0) | 0);
    $35 = ($19_1 - $14_1 | 0) + $10_1 | 0;
    $7_1 = HEAP32[$13_1 + 8 >> 2];
    $9_1 = HEAP32[$13_1 + 12 >> 2] << 1 | $7_1 >>> 31;
    $8_1 = $7_1 << 1;
    $10_1 = $9_1 + -1 | 0;
    $8_1 = (HEAP32[$13_1 + 4 >> 2] >>> 31 | $8_1) + -1 | 0;
    if ($8_1 >>> 0 < 4294967295) {
     $10_1 = $10_1 + 1 | 0
    }
    $9_1 = 0;
    $16_1 = $9_1;
    $7_1 = $8_1;
    $20 = $4_1;
    $12_1 = 0;
    $18 = __wasm_i64_mul($7_1, $9_1, $4_1, $12_1);
    $4_1 = i64toi32_i32$HIGH_BITS;
    $17_1 = $4_1;
    $25_1 = $10_1;
    $8_1 = 0;
    $14_1 = $3;
    $19_1 = 0;
    $10_1 = __wasm_i64_mul($10_1, $8_1, $3, $19_1);
    $3 = $10_1 + $18 | 0;
    $9_1 = i64toi32_i32$HIGH_BITS + $4_1 | 0;
    $11_1 = $3;
    $3 = $3 >>> 0 < $10_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $14_1 = __wasm_i64_mul($7_1, $16_1, $14_1, $19_1);
    $4_1 = 0 + $14_1 | 0;
    $10_1 = $11_1;
    $9_1 = $10_1 + i64toi32_i32$HIGH_BITS | 0;
    $9_1 = $4_1 >>> 0 < $14_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $19_1 = $4_1;
    $14_1 = $4_1;
    $4_1 = $9_1;
    $14_1 = ($10_1 | 0) == ($9_1 | 0) & $14_1 >>> 0 < $22_1 >>> 0 | $9_1 >>> 0 < $10_1 >>> 0;
    $9_1 = __wasm_i64_mul($25_1, $8_1, $20, $12_1);
    $10_1 = ($3 | 0) == ($17_1 | 0) & $10_1 >>> 0 < $18 >>> 0 | $3 >>> 0 < $17_1 >>> 0;
    $12_1 = $3;
    $3 = $9_1 + $3 | 0;
    $11_1 = $10_1 + i64toi32_i32$HIGH_BITS | 0;
    $11_1 = $3 >>> 0 < $12_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
    $10_1 = $3;
    $3 = $14_1 + $10_1 | 0;
    $9_1 = $11_1;
    $26 = $3;
    $3 = $3 >>> 0 < $10_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $9_1 = $6_1;
    $24_1 = ($9_1 & 131071) << 15 | $5_1 >>> 17;
    $17_1 = __wasm_i64_mul($7_1, $16_1, $24_1, 0);
    $9_1 = i64toi32_i32$HIGH_BITS;
    $20 = $9_1;
    $11_1 = $5_1;
    $12_1 = $11_1 << 15 & -32768;
    $23_1 = __wasm_i64_mul($25_1, $8_1, $12_1, 0);
    $11_1 = $23_1 + $17_1 | 0;
    $10_1 = i64toi32_i32$HIGH_BITS + $9_1 | 0;
    $10_1 = $11_1 >>> 0 < $23_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
    $9_1 = $11_1;
    $23_1 = 0;
    $27_1 = __wasm_i64_mul($7_1, $16_1, $12_1, $22_1);
    $22_1 = $23_1 + $27_1 | 0;
    $9_1 = $9_1 + i64toi32_i32$HIGH_BITS | 0;
    $9_1 = $22_1 >>> 0 < $27_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $18 = ($9_1 | 0) == ($11_1 | 0) & $22_1 >>> 0 < $23_1 >>> 0 | $9_1 >>> 0 < $11_1 >>> 0;
    $9_1 = ($10_1 | 0) == ($20 | 0) & $11_1 >>> 0 < $17_1 >>> 0 | $10_1 >>> 0 < $20 >>> 0;
    $14_1 = $10_1;
    $12_1 = __wasm_i64_mul($25_1, $8_1, $24_1, $28) + $10_1 | 0;
    $11_1 = $9_1 + i64toi32_i32$HIGH_BITS | 0;
    $10_1 = $12_1;
    $9_1 = $18 + $10_1 | 0;
    $12_1 = $10_1 >>> 0 < $14_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
    $12_1 = $9_1 >>> 0 < $10_1 >>> 0 ? $12_1 + 1 | 0 : $12_1;
    $11_1 = $9_1;
    $10_1 = $9_1 + $19_1 | 0;
    $9_1 = $12_1 + $4_1 | 0;
    $9_1 = $10_1 >>> 0 < $11_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $14_1 = $10_1;
    $10_1 = $3;
    $18 = $9_1;
    $3 = ($4_1 | 0) == ($9_1 | 0) & $14_1 >>> 0 < $19_1 >>> 0 | $9_1 >>> 0 < $4_1 >>> 0;
    $4_1 = $3 + $26 | 0;
    if ($4_1 >>> 0 < $3 >>> 0) {
     $10_1 = $10_1 + 1 | 0
    }
    $9_1 = $10_1;
    $3 = ($14_1 | 0) != 0 | ($18 | 0) != 0;
    $4_1 = $4_1 + $3 | 0;
    if ($4_1 >>> 0 < $3 >>> 0) {
     $9_1 = $9_1 + 1 | 0
    }
    $10_1 = $4_1;
    $4_1 = 0 - $10_1 | 0;
    $17_1 = 0;
    $19_1 = __wasm_i64_mul($4_1, $17_1, $7_1, $16_1);
    $3 = i64toi32_i32$HIGH_BITS;
    $20 = $3;
    $22_1 = __wasm_i64_mul($25_1, $8_1, $4_1, $17_1);
    $4_1 = i64toi32_i32$HIGH_BITS;
    $26 = $4_1;
    $24_1 = 0 - ((0 < $10_1 >>> 0) + $9_1 | 0) | 0;
    $9_1 = 0;
    $17_1 = __wasm_i64_mul($7_1, $16_1, $24_1, $9_1);
    $12_1 = $17_1 + $22_1 | 0;
    $10_1 = i64toi32_i32$HIGH_BITS + $4_1 | 0;
    $10_1 = $12_1 >>> 0 < $17_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
    $4_1 = $12_1;
    $17_1 = 0 + $19_1 | 0;
    $11_1 = $3 + $4_1 | 0;
    $11_1 = $17_1 >>> 0 < $28 >>> 0 ? $11_1 + 1 | 0 : $11_1;
    $12_1 = $17_1;
    $3 = $11_1;
    $11_1 = ($20 | 0) == ($3 | 0) & $12_1 >>> 0 < $19_1 >>> 0 | $3 >>> 0 < $20 >>> 0;
    $12_1 = ($10_1 | 0) == ($26 | 0) & $4_1 >>> 0 < $22_1 >>> 0 | $10_1 >>> 0 < $26 >>> 0;
    $4_1 = __wasm_i64_mul($25_1, $8_1, $24_1, $9_1) + $10_1 | 0;
    $9_1 = $12_1 + i64toi32_i32$HIGH_BITS | 0;
    $9_1 = $4_1 >>> 0 < $10_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $10_1 = $4_1;
    $4_1 = $11_1 + $10_1 | 0;
    if ($4_1 >>> 0 < $10_1 >>> 0) {
     $9_1 = $9_1 + 1 | 0
    }
    $26 = $4_1;
    $4_1 = $9_1;
    $10_1 = 0 - $14_1 | 0;
    $24_1 = 0 - ((0 < $14_1 >>> 0) + $18 | 0) | 0;
    $14_1 = 0;
    $22_1 = __wasm_i64_mul($24_1, $14_1, $7_1, $16_1);
    $20 = i64toi32_i32$HIGH_BITS;
    $18 = $10_1;
    $11_1 = __wasm_i64_mul($10_1, 0, $25_1, $8_1);
    $9_1 = $11_1 + $22_1 | 0;
    $10_1 = i64toi32_i32$HIGH_BITS + $20 | 0;
    $10_1 = $9_1 >>> 0 < $11_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
    $11_1 = $9_1;
    $16_1 = __wasm_i64_mul($7_1, $16_1, $18, $28);
    $18 = 0 + $16_1 | 0;
    $9_1 = $9_1 + i64toi32_i32$HIGH_BITS | 0;
    $9_1 = $18 >>> 0 < $16_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $7_1 = __wasm_i64_mul($24_1, $14_1, $25_1, $8_1);
    $7_1 = $7_1 + $10_1 | 0;
    $12_1 = i64toi32_i32$HIGH_BITS + (($10_1 | 0) == ($20 | 0) & $11_1 >>> 0 < $22_1 >>> 0 | $10_1 >>> 0 < $20 >>> 0) | 0;
    $12_1 = $7_1 >>> 0 < $10_1 >>> 0 ? $12_1 + 1 | 0 : $12_1;
    $8_1 = $7_1;
    $7_1 = (($11_1 | 0) == ($9_1 | 0) & $18 >>> 0 < $23_1 >>> 0 | $9_1 >>> 0 < $11_1 >>> 0) + $7_1 | 0;
    $9_1 = $12_1;
    $9_1 = $7_1 >>> 0 < $8_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $8_1 = $7_1;
    $7_1 = $7_1 + $17_1 | 0;
    $9_1 = $9_1 + $3 | 0;
    $9_1 = $7_1 >>> 0 < $8_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $8_1 = $7_1;
    $10_1 = $4_1;
    $4_1 = $9_1;
    $3 = ($3 | 0) == ($9_1 | 0) & $7_1 >>> 0 < $17_1 >>> 0 | $9_1 >>> 0 < $3 >>> 0;
    $7_1 = $3 + $26 | 0;
    if ($7_1 >>> 0 < $3 >>> 0) {
     $10_1 = $10_1 + 1 | 0
    }
    $3 = $7_1;
    $9_1 = $10_1;
    $12_1 = $3;
    $11_1 = $4_1 + -1 | 0;
    $3 = $8_1 + -2 | 0;
    if ($3 >>> 0 < 4294967294) {
     $11_1 = $11_1 + 1 | 0
    }
    $7_1 = $3;
    $10_1 = $3;
    $3 = $11_1;
    $4_1 = ($4_1 | 0) == ($3 | 0) & $10_1 >>> 0 < $8_1 >>> 0 | $3 >>> 0 < $4_1 >>> 0;
    $8_1 = $12_1 + $4_1 | 0;
    if ($8_1 >>> 0 < $4_1 >>> 0) {
     $9_1 = $9_1 + 1 | 0
    }
    $4_1 = $8_1 + -1 | 0;
    $9_1 = $9_1 + -1 | 0;
    $9_1 = $4_1 >>> 0 < 4294967295 ? $9_1 + 1 | 0 : $9_1;
    $8_1 = 0;
    $20 = $8_1;
    $14_1 = $4_1;
    $10_1 = $21_1;
    $22_1 = $10_1 << 2 | $2_1 >>> 30;
    $24_1 = 0;
    $12_1 = __wasm_i64_mul($4_1, $8_1, $22_1, $24_1);
    $8_1 = i64toi32_i32$HIGH_BITS;
    $18 = $8_1;
    $10_1 = $8_1;
    $8_1 = $2_1;
    $28 = ($8_1 & 1073741823) << 2 | $1_1 >>> 30;
    $19_1 = 0;
    $23_1 = $9_1;
    $8_1 = 0;
    $9_1 = __wasm_i64_mul($28, $19_1, $9_1, $8_1);
    $4_1 = $9_1 + $12_1 | 0;
    $11_1 = i64toi32_i32$HIGH_BITS + $10_1 | 0;
    $11_1 = $4_1 >>> 0 < $9_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
    $10_1 = $4_1;
    $17_1 = $11_1;
    $16_1 = ($18 | 0) == ($11_1 | 0) & $10_1 >>> 0 < $12_1 >>> 0 | $11_1 >>> 0 < $18 >>> 0;
    $12_1 = $11_1;
    $11_1 = 0;
    $18 = $11_1;
    $9_1 = 0;
    $26 = $3;
    $27_1 = (($15_1 & 1073741823) << 2 | $21_1 >>> 30) & -262145 | 262144;
    $4_1 = __wasm_i64_mul($3, $11_1, $27_1, 0);
    $3 = $4_1 + $10_1 | 0;
    $12_1 = i64toi32_i32$HIGH_BITS + $12_1 | 0;
    $12_1 = $3 >>> 0 < $4_1 >>> 0 ? $12_1 + 1 | 0 : $12_1;
    $15_1 = $3;
    $4_1 = $12_1;
    $3 = ($17_1 | 0) == ($4_1 | 0) & $3 >>> 0 < $10_1 >>> 0 | $4_1 >>> 0 < $17_1 >>> 0;
    $10_1 = $3 + $16_1 | 0;
    if ($10_1 >>> 0 < $3 >>> 0) {
     $9_1 = 1
    }
    $2_1 = $10_1;
    $10_1 = __wasm_i64_mul($23_1, $8_1, $27_1, $32_1);
    $3 = $2_1 + $10_1 | 0;
    $9_1 = i64toi32_i32$HIGH_BITS + $9_1 | 0;
    $10_1 = $3 >>> 0 < $10_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $11_1 = __wasm_i64_mul($14_1, $20, $27_1, $32_1);
    $9_1 = i64toi32_i32$HIGH_BITS;
    $2_1 = $3;
    $21_1 = __wasm_i64_mul($22_1, $24_1, $23_1, $8_1);
    $3 = $21_1 + $11_1 | 0;
    $12_1 = i64toi32_i32$HIGH_BITS + $9_1 | 0;
    $12_1 = $3 >>> 0 < $21_1 >>> 0 ? $12_1 + 1 | 0 : $12_1;
    $16_1 = $3;
    $3 = $12_1;
    $12_1 = ($9_1 | 0) == ($3 | 0) & $16_1 >>> 0 < $11_1 >>> 0 | $3 >>> 0 < $9_1 >>> 0;
    $11_1 = $2_1 + $3 | 0;
    $10_1 = $10_1 + $12_1 | 0;
    $9_1 = $11_1;
    $12_1 = $9_1 >>> 0 < $3 >>> 0 ? $10_1 + 1 | 0 : $10_1;
    $2_1 = $9_1;
    $11_1 = $4_1 + $16_1 | 0;
    $10_1 = 0;
    $3 = $10_1 + $15_1 | 0;
    if ($3 >>> 0 < $10_1 >>> 0) {
     $11_1 = $11_1 + 1 | 0
    }
    $10_1 = $3;
    $9_1 = $10_1;
    $3 = $11_1;
    $4_1 = ($4_1 | 0) == ($3 | 0) & $9_1 >>> 0 < $15_1 >>> 0 | $3 >>> 0 < $4_1 >>> 0;
    $9_1 = $2_1 + $4_1 | 0;
    if ($9_1 >>> 0 < $4_1 >>> 0) {
     $12_1 = $12_1 + 1 | 0
    }
    $37_1 = $9_1;
    $15_1 = $3;
    $21_1 = __wasm_i64_mul($28, $19_1, $26, $18);
    $11_1 = i64toi32_i32$HIGH_BITS;
    $17_1 = $7_1;
    $16_1 = __wasm_i64_mul($7_1, 0, $22_1, $24_1);
    $7_1 = $16_1 + $21_1 | 0;
    $9_1 = i64toi32_i32$HIGH_BITS + $11_1 | 0;
    $9_1 = $7_1 >>> 0 < $16_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $25_1 = $7_1;
    $16_1 = $7_1;
    $7_1 = $9_1;
    $21_1 = ($11_1 | 0) == ($9_1 | 0) & $16_1 >>> 0 < $21_1 >>> 0 | $9_1 >>> 0 < $11_1 >>> 0;
    $11_1 = $9_1;
    $41_1 = $10_1;
    $9_1 = 0;
    $38 = $21_1;
    $36_1 = $1_1 << 2 & -4;
    $2_1 = 0;
    $21_1 = __wasm_i64_mul($14_1, $20, $36_1, $2_1);
    $4_1 = $21_1 + $16_1 | 0;
    $11_1 = i64toi32_i32$HIGH_BITS + $11_1 | 0;
    $11_1 = $4_1 >>> 0 < $21_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
    $16_1 = $4_1;
    $4_1 = $11_1;
    $7_1 = ($7_1 | 0) == ($11_1 | 0) & $16_1 >>> 0 < $25_1 >>> 0 | $11_1 >>> 0 < $7_1 >>> 0;
    $11_1 = $38 + $7_1 | 0;
    if ($11_1 >>> 0 < $7_1 >>> 0) {
     $9_1 = 1
    }
    $7_1 = $41_1 + $11_1 | 0;
    $9_1 = $9_1 + $15_1 | 0;
    $9_1 = $7_1 >>> 0 < $11_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $21_1 = $7_1;
    $11_1 = $12_1;
    $7_1 = $9_1;
    $3 = ($3 | 0) == ($9_1 | 0) & $21_1 >>> 0 < $10_1 >>> 0 | $9_1 >>> 0 < $3 >>> 0;
    $9_1 = $3 + $37_1 | 0;
    if ($9_1 >>> 0 < $3 >>> 0) {
     $11_1 = $11_1 + 1 | 0
    }
    $38 = $9_1;
    $15_1 = $21_1;
    $25_1 = $7_1;
    $37_1 = __wasm_i64_mul($23_1, $8_1, $36_1, $2_1);
    $23_1 = i64toi32_i32$HIGH_BITS;
    $8_1 = __wasm_i64_mul($27_1, $32_1, $17_1, $39_1);
    $3 = $8_1 + $37_1 | 0;
    $12_1 = i64toi32_i32$HIGH_BITS + $23_1 | 0;
    $12_1 = $3 >>> 0 < $8_1 >>> 0 ? $12_1 + 1 | 0 : $12_1;
    $27_1 = $3;
    $10_1 = __wasm_i64_mul($22_1, $24_1, $26, $18);
    $3 = $3 + $10_1 | 0;
    $8_1 = $12_1;
    $9_1 = $8_1 + i64toi32_i32$HIGH_BITS | 0;
    $9_1 = $3 >>> 0 < $10_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $22_1 = $3;
    $12_1 = __wasm_i64_mul($14_1, $20, $28, $19_1);
    $3 = $3 + $12_1 | 0;
    $10_1 = $9_1;
    $9_1 = $9_1 + i64toi32_i32$HIGH_BITS | 0;
    $14_1 = $3;
    $9_1 = $3 >>> 0 < $12_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
    $20 = 0;
    $12_1 = $11_1;
    $3 = $9_1;
    $11_1 = ($9_1 | 0) == ($10_1 | 0) & $14_1 >>> 0 < $22_1 >>> 0 | $9_1 >>> 0 < $10_1 >>> 0;
    $9_1 = ($8_1 | 0) == ($23_1 | 0) & $27_1 >>> 0 < $37_1 >>> 0 | $8_1 >>> 0 < $23_1 >>> 0;
    $8_1 = ($8_1 | 0) == ($10_1 | 0) & $22_1 >>> 0 < $27_1 >>> 0 | $10_1 >>> 0 < $8_1 >>> 0;
    $10_1 = $9_1 + $8_1 | 0;
    $10_1 >>> 0 < $8_1 >>> 0;
    $8_1 = $11_1 + $10_1 | 0;
    $9_1 = $8_1;
    $11_1 = $3 | 0;
    $8_1 = $11_1 + $15_1 | 0;
    $10_1 = ($9_1 | $20) + $25_1 | 0;
    $10_1 = $8_1 >>> 0 < $11_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
    $25_1 = $8_1;
    $15_1 = $10_1;
    $7_1 = ($7_1 | 0) == ($10_1 | 0) & $8_1 >>> 0 < $21_1 >>> 0 | $10_1 >>> 0 < $7_1 >>> 0;
    $8_1 = $7_1 + $38 | 0;
    if ($8_1 >>> 0 < $7_1 >>> 0) {
     $12_1 = $12_1 + 1 | 0
    }
    $24_1 = $8_1;
    $8_1 = $12_1;
    $12_1 = $25_1;
    $21_1 = $15_1;
    $26 = __wasm_i64_mul($26, $18, $36_1, $2_1);
    $18 = i64toi32_i32$HIGH_BITS;
    $9_1 = __wasm_i64_mul($28, $19_1, $17_1, $39_1);
    $7_1 = $9_1 + $26 | 0;
    $11_1 = i64toi32_i32$HIGH_BITS + $18 | 0;
    $11_1 = $7_1 >>> 0 < $9_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
    $10_1 = $11_1;
    $19_1 = $10_1;
    $11_1 = 0;
    $9_1 = ($10_1 | 0) == ($18 | 0) & $7_1 >>> 0 < $26 >>> 0 | $10_1 >>> 0 < $18 >>> 0;
    $7_1 = $10_1 + $16_1 | 0;
    $10_1 = ($9_1 | $11_1) + $4_1 | 0;
    $10_1 = $7_1 >>> 0 < $19_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
    $19_1 = $7_1;
    $9_1 = $7_1;
    $7_1 = $10_1;
    $9_1 = ($4_1 | 0) == ($10_1 | 0) & $9_1 >>> 0 < $16_1 >>> 0 | $10_1 >>> 0 < $4_1 >>> 0;
    $17_1 = $12_1;
    $4_1 = $9_1;
    $9_1 = $10_1 + $14_1 | 0;
    $12_1 = 0;
    $3 = $12_1 + $19_1 | 0;
    if ($3 >>> 0 < $12_1 >>> 0) {
     $9_1 = $9_1 + 1 | 0
    }
    $3 = ($7_1 | 0) == ($9_1 | 0) & $3 >>> 0 < $19_1 >>> 0 | $9_1 >>> 0 < $7_1 >>> 0;
    $4_1 = $4_1 + $3 | 0;
    if ($4_1 >>> 0 < $3 >>> 0) {
     $11_1 = 1
    }
    $3 = $17_1 + $4_1 | 0;
    $12_1 = $11_1 + $21_1 | 0;
    $7_1 = $3;
    $9_1 = $8_1;
    $12_1 = $3 >>> 0 < $4_1 >>> 0 ? $12_1 + 1 | 0 : $12_1;
    $8_1 = $12_1;
    $3 = ($15_1 | 0) == ($8_1 | 0) & $3 >>> 0 < $25_1 >>> 0 | $8_1 >>> 0 < $15_1 >>> 0;
    $4_1 = $3 + $24_1 | 0;
    if ($4_1 >>> 0 < $3 >>> 0) {
     $9_1 = $9_1 + 1 | 0
    }
    $3 = $4_1;
    $4_1 = $9_1;
    label$12 : {
     if (($9_1 | 0) == 131071 & $3 >>> 0 <= 4294967295 | $9_1 >>> 0 < 131071) {
      $20 = 0;
      $15_1 = $5_1;
      $22_1 = 0;
      $10_1 = __wasm_i64_mul($7_1, $20, $15_1, $22_1);
      $11_1 = i64toi32_i32$HIGH_BITS;
      $9_1 = $1_1 << 17;
      $1_1 = 0;
      $2_1 = ($10_1 | 0) != 0 | ($11_1 | 0) != 0;
      $14_1 = $1_1 - $2_1 | 0;
      $27_1 = $9_1 - ($1_1 >>> 0 < $2_1 >>> 0) | 0;
      $19_1 = 0 - $10_1 | 0;
      $18 = 0 - ((0 < $10_1 >>> 0) + $11_1 | 0) | 0;
      $2_1 = 0;
      $24_1 = __wasm_i64_mul($8_1, $2_1, $15_1, $22_1);
      $1_1 = i64toi32_i32$HIGH_BITS;
      $28 = $1_1;
      $23_1 = $6_1;
      $21_1 = 0;
      $10_1 = __wasm_i64_mul($7_1, $20, $23_1, $21_1);
      $9_1 = $10_1 + $24_1 | 0;
      $11_1 = i64toi32_i32$HIGH_BITS + $1_1 | 0;
      $11_1 = $9_1 >>> 0 < $10_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
      $1_1 = $9_1;
      $10_1 = $9_1;
      $17_1 = 0;
      $9_1 = $17_1;
      $16_1 = $10_1;
      $9_1 = ($10_1 | 0) == ($18 | 0) & $19_1 >>> 0 < $9_1 >>> 0 | $18 >>> 0 < $10_1 >>> 0;
      $25_1 = $14_1 - $9_1 | 0;
      $14_1 = $27_1 - ($14_1 >>> 0 < $9_1 >>> 0) | 0;
      $9_1 = __wasm_i64_mul($3, 0, $15_1, $22_1);
      $10_1 = i64toi32_i32$HIGH_BITS;
      $15_1 = __wasm_i64_mul($7_1, $20, $29_1, 0);
      $9_1 = $15_1 + $9_1 | 0;
      $12_1 = i64toi32_i32$HIGH_BITS + $10_1 | 0;
      $12_1 = $9_1 >>> 0 < $15_1 >>> 0 ? $12_1 + 1 | 0 : $12_1;
      $15_1 = __wasm_i64_mul($8_1, $2_1, $23_1, $21_1);
      $9_1 = $15_1 + $9_1 | 0;
      $10_1 = i64toi32_i32$HIGH_BITS + $12_1 | 0;
      $10_1 = $9_1 >>> 0 < $15_1 >>> 0 ? $10_1 + 1 | 0 : $10_1;
      $12_1 = $10_1;
      $10_1 = ($11_1 | 0) == ($28 | 0) & $1_1 >>> 0 < $24_1 >>> 0 | $11_1 >>> 0 < $28 >>> 0;
      $1_1 = $11_1 + $9_1 | 0;
      $9_1 = $10_1 + $12_1 | 0;
      $9_1 = $1_1 >>> 0 < $11_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
      $11_1 = $1_1;
      $1_1 = $9_1;
      $9_1 = __wasm_i64_mul($7_1, $8_1, $34_1, 0);
      $15_1 = i64toi32_i32$HIGH_BITS;
      $26 = $11_1;
      $11_1 = __wasm_i64_mul($5_1, $23_1, $4_1, 0);
      $10_1 = $11_1 + $9_1 | 0;
      $9_1 = i64toi32_i32$HIGH_BITS + $15_1 | 0;
      $9_1 = $10_1 >>> 0 < $11_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
      $12_1 = __wasm_i64_mul($3, $4_1, $23_1, $21_1);
      $11_1 = $12_1 + $10_1 | 0;
      $10_1 = i64toi32_i32$HIGH_BITS + $9_1 | 0;
      $9_1 = $11_1;
      $11_1 = __wasm_i64_mul($8_1, $2_1, $29_1, $31_1);
      $2_1 = $9_1 + $11_1 | 0;
      $9_1 = $2_1;
      $10_1 = 0;
      $2_1 = $26 + $10_1 | 0;
      $9_1 = $1_1 + $9_1 | 0;
      $1_1 = $2_1;
      $29_1 = $25_1 - $1_1 | 0;
      $9_1 = $14_1 - (($25_1 >>> 0 < $1_1 >>> 0) + ($1_1 >>> 0 < $10_1 >>> 0 ? $9_1 + 1 | 0 : $9_1) | 0) | 0;
      $35 = $35 + -1 | 0;
      $2_1 = $18 - (($19_1 >>> 0 < $17_1 >>> 0) + $16_1 | 0) | 0;
      $10_1 = $19_1 - $17_1 | 0;
      break label$12;
     }
     $17_1 = $8_1 >>> 1 | 0;
     $11_1 = 0;
     $12_1 = $1_1 << 16;
     $10_1 = $3 << 31;
     $7_1 = ($8_1 & 1) << 31 | $7_1 >>> 1;
     $8_1 = $8_1 >>> 1 | $10_1;
     $24_1 = 0;
     $14_1 = $5_1;
     $28 = 0;
     $1_1 = __wasm_i64_mul($7_1, $24_1, $14_1, $28);
     $9_1 = i64toi32_i32$HIGH_BITS;
     $10_1 = $9_1;
     $9_1 = ($1_1 | 0) != 0 | ($9_1 | 0) != 0;
     $15_1 = $2_1 - $9_1 | 0;
     $32_1 = $12_1 - ($2_1 >>> 0 < $9_1 >>> 0) | 0;
     $16_1 = 0 - $1_1 | 0;
     $25_1 = 0 - ((0 < $1_1 >>> 0) + $10_1 | 0) | 0;
     $12_1 = $25_1;
     $23_1 = $6_1;
     $19_1 = 0;
     $18 = __wasm_i64_mul($7_1, $24_1, $23_1, $19_1);
     $1_1 = i64toi32_i32$HIGH_BITS;
     $27_1 = $1_1;
     $10_1 = $3;
     $17_1 = $10_1 << 31 | $17_1;
     $39_1 = $4_1 << 31 | $10_1 >>> 1 | $11_1;
     $2_1 = $17_1;
     $20 = __wasm_i64_mul($2_1, 0, $14_1, $28);
     $10_1 = $20 + $18 | 0;
     $9_1 = i64toi32_i32$HIGH_BITS + $1_1 | 0;
     $9_1 = $10_1 >>> 0 < $20 >>> 0 ? $9_1 + 1 | 0 : $9_1;
     $1_1 = $9_1;
     $9_1 = $10_1;
     $22_1 = $9_1;
     $20 = 0;
     $9_1 = ($9_1 | 0) == ($12_1 | 0) & $16_1 >>> 0 < $20 >>> 0 | $12_1 >>> 0 < $9_1 >>> 0;
     $26 = $15_1 - $9_1 | 0;
     $32_1 = $32_1 - ($15_1 >>> 0 < $9_1 >>> 0) | 0;
     $9_1 = __wasm_i64_mul($23_1, $19_1, $2_1, $11_1);
     $36_1 = i64toi32_i32$HIGH_BITS;
     $2_1 = $4_1 >>> 1 | 0;
     $15_1 = ($4_1 & 1) << 31 | $3 >>> 1;
     $12_1 = __wasm_i64_mul($15_1, 0, $14_1, $28);
     $11_1 = $12_1 + $9_1 | 0;
     $9_1 = i64toi32_i32$HIGH_BITS + $36_1 | 0;
     $9_1 = $11_1 >>> 0 < $12_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
     $12_1 = __wasm_i64_mul($7_1, $24_1, $29_1, 0);
     $11_1 = $12_1 + $11_1 | 0;
     $9_1 = i64toi32_i32$HIGH_BITS + $9_1 | 0;
     $9_1 = $11_1 >>> 0 < $12_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
     $12_1 = $11_1;
     $11_1 = $9_1;
     $3 = $12_1;
     $9_1 = ($1_1 | 0) == ($27_1 | 0) & $10_1 >>> 0 < $18 >>> 0 | $1_1 >>> 0 < $27_1 >>> 0;
     $12_1 = $1_1;
     $1_1 = $3 + $12_1 | 0;
     $11_1 = $9_1 + $11_1 | 0;
     $11_1 = $1_1 >>> 0 < $12_1 >>> 0 ? $11_1 + 1 | 0 : $11_1;
     $12_1 = $1_1;
     $9_1 = __wasm_i64_mul($7_1, $8_1, $34_1, 0);
     $10_1 = i64toi32_i32$HIGH_BITS;
     $4_1 = __wasm_i64_mul($14_1, $23_1, $4_1 >>> 1 | 0, 0);
     $3 = $4_1 + $9_1 | 0;
     $9_1 = i64toi32_i32$HIGH_BITS + $10_1 | 0;
     $9_1 = $3 >>> 0 < $4_1 >>> 0 ? $9_1 + 1 | 0 : $9_1;
     $4_1 = __wasm_i64_mul($23_1, $19_1, $15_1, $2_1);
     $3 = $4_1 + $3 | 0;
     $9_1 = i64toi32_i32$HIGH_BITS + $9_1 | 0;
     $4_1 = __wasm_i64_mul($17_1, $39_1, $29_1, $31_1);
     $3 = $4_1 + $3 | 0;
     $9_1 = $3;
     $4_1 = 0;
     $3 = $4_1 + $12_1 | 0;
     $10_1 = $11_1 + $9_1 | 0;
     $29_1 = $26 - $3 | 0;
     $9_1 = $32_1 - (($26 >>> 0 < $3 >>> 0) + ($3 >>> 0 < $4_1 >>> 0 ? $10_1 + 1 | 0 : $10_1) | 0) | 0;
     $3 = $15_1;
     $4_1 = $2_1;
     $2_1 = $25_1 - (($16_1 >>> 0 < $20 >>> 0) + $22_1 | 0) | 0;
     $10_1 = $16_1 - $20 | 0;
    }
    $1_1 = $2_1;
    if (($35 | 0) >= 16384) {
     $30 = $30 | 2147418112;
     $1_1 = 0;
     $2_1 = 0;
     break label$2;
    }
    if (($35 | 0) <= -16383) {
     $1_1 = 0;
     $2_1 = 0;
     break label$2;
    }
    $11_1 = $8_1;
    $4_1 = $4_1 & 65535;
    $12_1 = $1_1 << 1 | $10_1 >>> 31;
    $15_1 = $10_1 << 1;
    $6_1 = ($6_1 | 0) == ($12_1 | 0) & $15_1 >>> 0 >= $5_1 >>> 0 | $12_1 >>> 0 > $6_1 >>> 0;
    $5_1 = $29_1;
    $12_1 = $9_1 << 1 | $5_1 >>> 31;
    $2_1 = $5_1 << 1 | $1_1 >>> 31;
    $1_1 = ($2_1 | 0) == ($40_1 | 0) & ($12_1 | 0) == ($34_1 | 0) ? $6_1 : ($34_1 | 0) == ($12_1 | 0) & $2_1 >>> 0 >= $40_1 >>> 0 | $12_1 >>> 0 > $34_1 >>> 0;
    $2_1 = $1_1 + $7_1 | 0;
    if ($2_1 >>> 0 < $1_1 >>> 0) {
     $11_1 = $11_1 + 1 | 0
    }
    $1_1 = $2_1;
    $2_1 = $11_1;
    $10_1 = $35 + 16383 << 16;
    $5_1 = $3;
    $3 = (($8_1 | 0) == ($11_1 | 0) & $1_1 >>> 0 < $7_1 >>> 0 | $11_1 >>> 0 < $8_1 >>> 0) + $3 | 0;
    $9_1 = $4_1 | $10_1;
    $33 = $3 | $33;
    $30 = $30 | ($3 >>> 0 < $5_1 >>> 0 ? $9_1 + 1 | 0 : $9_1);
   }
   HEAP32[$0 >> 2] = $1_1;
   HEAP32[$0 + 4 >> 2] = $2_1;
   HEAP32[$0 + 8 >> 2] = $33;
   HEAP32[$0 + 12 >> 2] = $30;
   global$0 = $13_1 + 192 | 0;
   return;
  }
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $1_1 = ($3 | $5_1) != 0 | ($4_1 | $6_1) != 0;
  HEAP32[$0 + 8 >> 2] = $1_1 ? $33 : 0;
  HEAP32[$0 + 12 >> 2] = $1_1 ? $30 : 2147450880;
  global$0 = $13_1 + 192 | 0;
 }
 
 function $835($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $4_1 = $3 & 2147483647;
  $8_1 = $4_1;
  $4_1 = $4_1 + -1006698496 | 0;
  $7_1 = $2_1;
  $5_1 = $2_1;
  if ($2_1 >>> 0 < 0) {
   $4_1 = $4_1 + 1 | 0
  }
  $9_1 = $5_1;
  $5_1 = $4_1;
  $4_1 = $8_1 + -1140785152 | 0;
  $10_1 = $7_1;
  if ($7_1 >>> 0 < 0) {
   $4_1 = $4_1 + 1 | 0
  }
  label$1 : {
   if (($4_1 | 0) == ($5_1 | 0) & $9_1 >>> 0 < $10_1 >>> 0 | $5_1 >>> 0 < $4_1 >>> 0) {
    $4_1 = $3 << 4 | $2_1 >>> 28;
    $2_1 = $2_1 << 4 | $1_1 >>> 28;
    $1_1 = $1_1 & 268435455;
    $7_1 = $1_1;
    if (($1_1 | 0) == 134217728 & $0 >>> 0 >= 1 | $1_1 >>> 0 > 134217728) {
     $4_1 = $4_1 + 1073741824 | 0;
     $0 = $2_1 + 1 | 0;
     if ($0 >>> 0 < 1) {
      $4_1 = $4_1 + 1 | 0
     }
     $5_1 = $0;
     break label$1;
    }
    $5_1 = $2_1;
    $4_1 = $4_1 - (($2_1 >>> 0 < 0) + -1073741824 | 0) | 0;
    if ($0 | $7_1 ^ 134217728) {
     break label$1
    }
    $0 = $5_1 + ($5_1 & 1) | 0;
    if ($0 >>> 0 < $5_1 >>> 0) {
     $4_1 = $4_1 + 1 | 0
    }
    $5_1 = $0;
    break label$1;
   }
   if (!(!$7_1 & ($8_1 | 0) == 2147418112 ? !($0 | $1_1) : ($8_1 | 0) == 2147418112 & $7_1 >>> 0 < 0 | $8_1 >>> 0 < 2147418112)) {
    $4_1 = $3 << 4 | $2_1 >>> 28;
    $5_1 = $2_1 << 4 | $1_1 >>> 28;
    $4_1 = $4_1 & 524287 | 2146959360;
    break label$1;
   }
   $5_1 = 0;
   $4_1 = 2146435072;
   if (($8_1 | 0) == 1140785151 & $7_1 >>> 0 > 4294967295 | $8_1 >>> 0 > 1140785151) {
    break label$1
   }
   $4_1 = 0;
   $7_1 = $8_1 >>> 16 | 0;
   if ($7_1 >>> 0 < 15249) {
    break label$1
   }
   $4_1 = $3 & 65535 | 65536;
   $823($6_1, $0, $1_1, $2_1, $4_1, 15361 - $7_1 | 0);
   $821($6_1 + 16 | 0, $0, $1_1, $2_1, $4_1, $7_1 + -15233 | 0);
   $2_1 = HEAP32[$6_1 + 4 >> 2];
   $0 = HEAP32[$6_1 + 8 >> 2];
   $4_1 = HEAP32[$6_1 + 12 >> 2] << 4 | $0 >>> 28;
   $5_1 = $0 << 4 | $2_1 >>> 28;
   $0 = $2_1 & 268435455;
   $2_1 = $0;
   $1_1 = HEAP32[$6_1 >> 2] | ((HEAP32[$6_1 + 16 >> 2] | HEAP32[$6_1 + 24 >> 2]) != 0 | (HEAP32[$6_1 + 20 >> 2] | HEAP32[$6_1 + 28 >> 2]) != 0);
   if (($0 | 0) == 134217728 & $1_1 >>> 0 >= 1 | $0 >>> 0 > 134217728) {
    $0 = $5_1 + 1 | 0;
    if ($0 >>> 0 < 1) {
     $4_1 = $4_1 + 1 | 0
    }
    $5_1 = $0;
    break label$1;
   }
   if ($1_1 | $2_1 ^ 134217728) {
    break label$1
   }
   $0 = $5_1 + ($5_1 & 1) | 0;
   if ($0 >>> 0 < $5_1 >>> 0) {
    $4_1 = $4_1 + 1 | 0
   }
   $5_1 = $0;
  }
  global$0 = $6_1 + 32 | 0;
  wasm2js_scratch_store_i32(0, $5_1 | 0);
  wasm2js_scratch_store_i32(1, $3 & -2147483648 | $4_1);
  return +wasm2js_scratch_load_f64();
 }
 
 function $837($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  label$1 : {
   if ($2_1 >>> 0 <= 2) {
    $5_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 << 2;
    $7_1 = HEAP32[$2_1 + 6492 >> 2];
    $11_1 = HEAP32[$2_1 + 6480 >> 2];
    while (1) {
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     label$4 : {
      if ($2_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
       HEAP32[$5_1 >> 2] = $2_1 + 1;
       $2_1 = HEAPU8[$2_1 | 0];
       break label$4;
      }
      $2_1 = $812($1_1);
     }
     if ($810($2_1)) {
      continue
     }
     break;
    };
    $4_1 = $2_1 + -43 | 0;
    label$6 : {
     if ($4_1 >>> 0 > 2) {
      $8_1 = 1;
      break label$6;
     }
     $8_1 = 1;
     if (!($4_1 - 1)) {
      break label$6
     }
     $8_1 = ($2_1 | 0) == 45 ? -1 : 1;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     if ($2_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
      HEAP32[$5_1 >> 2] = $2_1 + 1;
      $2_1 = HEAPU8[$2_1 | 0];
      break label$6;
     }
     $2_1 = $812($1_1);
    }
    $4_1 = 0;
    label$9 : {
     label$10 : {
      while (1) {
       if (HEAP8[$4_1 + 6412 | 0] == ($2_1 | 32)) {
        label$13 : {
         if ($4_1 >>> 0 > 6) {
          break label$13
         }
         $2_1 = HEAP32[$1_1 + 4 >> 2];
         if ($2_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
          HEAP32[$5_1 >> 2] = $2_1 + 1;
          $2_1 = HEAPU8[$2_1 | 0];
          break label$13;
         }
         $2_1 = $812($1_1);
        }
        $4_1 = $4_1 + 1 | 0;
        if (($4_1 | 0) != 8) {
         continue
        }
        break label$10;
       }
       break;
      };
      if (($4_1 | 0) != 3) {
       if (($4_1 | 0) == 8) {
        break label$10
       }
       if (!$3 | $4_1 >>> 0 < 4) {
        break label$9
       }
       if (($4_1 | 0) == 8) {
        break label$10
       }
      }
      $1_1 = HEAP32[$1_1 + 104 >> 2];
      if ($1_1) {
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + -1
      }
      if (!$3 | $4_1 >>> 0 < 4) {
       break label$10
      }
      while (1) {
       if ($1_1) {
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + -1
       }
       $4_1 = $4_1 + -1 | 0;
       if ($4_1 >>> 0 > 3) {
        continue
       }
       break;
      };
     }
     $822($6_1, Math_fround(Math_fround($8_1 | 0) * Math_fround(infinity)));
     $8_1 = HEAP32[$6_1 + 8 >> 2];
     $2_1 = HEAP32[$6_1 + 12 >> 2];
     $9_1 = HEAP32[$6_1 >> 2];
     $10_1 = HEAP32[$6_1 + 4 >> 2];
     break label$1;
    }
    label$19 : {
     label$20 : {
      label$21 : {
       if ($4_1) {
        break label$21
       }
       $4_1 = 0;
       while (1) {
        if (HEAP8[$4_1 + 6421 | 0] != ($2_1 | 32)) {
         break label$21
        }
        label$23 : {
         if ($4_1 >>> 0 > 1) {
          break label$23
         }
         $2_1 = HEAP32[$1_1 + 4 >> 2];
         if ($2_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
          HEAP32[$5_1 >> 2] = $2_1 + 1;
          $2_1 = HEAPU8[$2_1 | 0];
          break label$23;
         }
         $2_1 = $812($1_1);
        }
        $4_1 = $4_1 + 1 | 0;
        if (($4_1 | 0) != 3) {
         continue
        }
        break;
       };
       break label$20;
      }
      label$25 : {
       label$26 : {
        if ($4_1 >>> 0 > 3) {
         break label$26
        }
        switch ($4_1 - 1 | 0) {
        case 2:
         break label$20;
        case 0:
        case 1:
         break label$26;
        default:
         break label$25;
        };
       }
       if (HEAP32[$1_1 + 104 >> 2]) {
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + -1
       }
       break label$19;
      }
      label$28 : {
       if (($2_1 | 0) != 48) {
        break label$28
       }
       $4_1 = HEAP32[$1_1 + 4 >> 2];
       label$29 : {
        if ($4_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
         HEAP32[$5_1 >> 2] = $4_1 + 1;
         $4_1 = HEAPU8[$4_1 | 0];
         break label$29;
        }
        $4_1 = $812($1_1);
       }
       if (($4_1 | 32) == 120) {
        $838($6_1 + 16 | 0, $1_1, $11_1, $7_1, $8_1, $3);
        $8_1 = HEAP32[$6_1 + 24 >> 2];
        $2_1 = HEAP32[$6_1 + 28 >> 2];
        $9_1 = HEAP32[$6_1 + 16 >> 2];
        $10_1 = HEAP32[$6_1 + 20 >> 2];
        break label$1;
       }
       if (!HEAP32[$1_1 + 104 >> 2]) {
        break label$28
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + -1;
      }
      $839($6_1 + 32 | 0, $1_1, $2_1, $11_1, $7_1, $8_1, $3);
      $8_1 = HEAP32[$6_1 + 40 >> 2];
      $2_1 = HEAP32[$6_1 + 44 >> 2];
      $9_1 = HEAP32[$6_1 + 32 >> 2];
      $10_1 = HEAP32[$6_1 + 36 >> 2];
      break label$1;
     }
     label$32 : {
      $2_1 = HEAP32[$1_1 + 4 >> 2];
      label$33 : {
       if ($2_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
        HEAP32[$5_1 >> 2] = $2_1 + 1;
        $2_1 = HEAPU8[$2_1 | 0];
        break label$33;
       }
       $2_1 = $812($1_1);
      }
      if (($2_1 | 0) == 40) {
       $4_1 = 1;
       break label$32;
      }
      $8_1 = 0;
      $2_1 = 2147450880;
      if (!HEAP32[$1_1 + 104 >> 2]) {
       break label$1
      }
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + -1;
      break label$1;
     }
     while (1) {
      $2_1 = HEAP32[$1_1 + 4 >> 2];
      label$37 : {
       if ($2_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
        HEAP32[$5_1 >> 2] = $2_1 + 1;
        $7_1 = HEAPU8[$2_1 | 0];
        break label$37;
       }
       $7_1 = $812($1_1);
      }
      if (!($7_1 + -97 >>> 0 >= 26 ? !($7_1 + -48 >>> 0 < 10 | $7_1 + -65 >>> 0 < 26 | ($7_1 | 0) == 95) : 0)) {
       $4_1 = $4_1 + 1 | 0;
       continue;
      }
      break;
     };
     $8_1 = 0;
     $2_1 = 2147450880;
     if (($7_1 | 0) == 41) {
      break label$1
     }
     $7_1 = HEAP32[$1_1 + 104 >> 2];
     if ($7_1) {
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + -1
     }
     if ($3) {
      if (!$4_1) {
       break label$1
      }
      while (1) {
       $4_1 = $4_1 + -1 | 0;
       if ($7_1) {
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + -1
       }
       if ($4_1) {
        continue
       }
       break;
      };
      break label$1;
     }
    }
    HEAP32[5216] = 28;
    $811($1_1, 0, 0);
   }
   $8_1 = 0;
   $2_1 = 0;
  }
  HEAP32[$0 >> 2] = $9_1;
  HEAP32[$0 + 4 >> 2] = $10_1;
  HEAP32[$0 + 8 >> 2] = $8_1;
  HEAP32[$0 + 12 >> 2] = $2_1;
  global$0 = $6_1 + 48 | 0;
 }
 
 function $838($0, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18 = 0, $19_1 = 0, $20 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  $7_1 = HEAP32[$1_1 + 4 >> 2];
  label$1 : {
   if ($7_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
    HEAP32[$1_1 + 4 >> 2] = $7_1 + 1;
    $8_1 = HEAPU8[$7_1 | 0];
    break label$1;
   }
   $8_1 = $812($1_1);
  }
  label$3 : {
   label$4 : {
    while (1) {
     if (($8_1 | 0) != 48) {
      label$6 : {
       if (($8_1 | 0) != 46) {
        break label$3
       }
       $7_1 = HEAP32[$1_1 + 4 >> 2];
       if ($7_1 >>> 0 >= HEAPU32[$1_1 + 104 >> 2]) {
        break label$6
       }
       HEAP32[$1_1 + 4 >> 2] = $7_1 + 1;
       $8_1 = HEAPU8[$7_1 | 0];
       break label$4;
      }
     } else {
      $7_1 = HEAP32[$1_1 + 4 >> 2];
      if ($7_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
       $19_1 = 1;
       HEAP32[$1_1 + 4 >> 2] = $7_1 + 1;
       $8_1 = HEAPU8[$7_1 | 0];
      } else {
       $19_1 = 1;
       $8_1 = $812($1_1);
      }
      continue;
     }
     break;
    };
    $8_1 = $812($1_1);
   }
   $20 = 1;
   if (($8_1 | 0) != 48) {
    break label$3
   }
   while (1) {
    $7_1 = $22_1 + -1 | 0;
    $21_1 = $21_1 + -1 | 0;
    if ($21_1 >>> 0 < 4294967295) {
     $7_1 = $7_1 + 1 | 0
    }
    $22_1 = $7_1;
    $7_1 = HEAP32[$1_1 + 4 >> 2];
    label$11 : {
     if ($7_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
      HEAP32[$1_1 + 4 >> 2] = $7_1 + 1;
      $8_1 = HEAPU8[$7_1 | 0];
      break label$11;
     }
     $8_1 = $812($1_1);
    }
    if (($8_1 | 0) == 48) {
     continue
    }
    break;
   };
   $19_1 = 1;
  }
  $9_1 = 1073676288;
  $7_1 = 0;
  while (1) {
   label$14 : {
    $23_1 = $8_1 | 32;
    label$15 : {
     label$16 : {
      $24_1 = $8_1 + -48 | 0;
      if ($24_1 >>> 0 < 10) {
       break label$16
      }
      if ($23_1 + -97 >>> 0 > 5 ? ($8_1 | 0) != 46 : 0) {
       break label$14
      }
      if (($8_1 | 0) != 46) {
       break label$16
      }
      if ($20) {
       break label$14
      }
      $20 = 1;
      $21_1 = $11_1;
      $22_1 = $7_1;
      break label$15;
     }
     $8_1 = ($8_1 | 0) > 57 ? $23_1 + -87 | 0 : $24_1;
     label$17 : {
      if (($7_1 | 0) < 0 ? 1 : ($7_1 | 0) <= 0 ? ($11_1 >>> 0 > 7 ? 0 : 1) : 0) {
       $16_1 = $8_1 + ($16_1 << 4) | 0;
       break label$17;
      }
      if (($7_1 | 0) < 0 ? 1 : ($7_1 | 0) <= 0 ? ($11_1 >>> 0 > 28 ? 0 : 1) : 0) {
       $824($6_1 + 32 | 0, $12_1, $15_1, $10_1, $9_1, 0, 0, 0, 1073414144);
       $825($6_1 + 48 | 0, $8_1);
       $12_1 = HEAP32[$6_1 + 32 >> 2];
       $15_1 = HEAP32[$6_1 + 36 >> 2];
       $10_1 = HEAP32[$6_1 + 40 >> 2];
       $9_1 = HEAP32[$6_1 + 44 >> 2];
       $824($6_1 + 16 | 0, $12_1, $15_1, $10_1, $9_1, HEAP32[$6_1 + 48 >> 2], HEAP32[$6_1 + 52 >> 2], HEAP32[$6_1 + 56 >> 2], HEAP32[$6_1 + 60 >> 2]);
       $826($6_1, $13_1, $14_1, $17_1, $18, HEAP32[$6_1 + 16 >> 2], HEAP32[$6_1 + 20 >> 2], HEAP32[$6_1 + 24 >> 2], HEAP32[$6_1 + 28 >> 2]);
       $17_1 = HEAP32[$6_1 + 8 >> 2];
       $18 = HEAP32[$6_1 + 12 >> 2];
       $13_1 = HEAP32[$6_1 >> 2];
       $14_1 = HEAP32[$6_1 + 4 >> 2];
       break label$17;
      }
      if (!$8_1 | $25_1) {
       break label$17
      }
      $824($6_1 + 80 | 0, $12_1, $15_1, $10_1, $9_1, 0, 0, 0, 1073610752);
      $826($6_1 - -64 | 0, $13_1, $14_1, $17_1, $18, HEAP32[$6_1 + 80 >> 2], HEAP32[$6_1 + 84 >> 2], HEAP32[$6_1 + 88 >> 2], HEAP32[$6_1 + 92 >> 2]);
      $17_1 = HEAP32[$6_1 + 72 >> 2];
      $18 = HEAP32[$6_1 + 76 >> 2];
      $25_1 = 1;
      $13_1 = HEAP32[$6_1 + 64 >> 2];
      $14_1 = HEAP32[$6_1 + 68 >> 2];
     }
     $11_1 = $11_1 + 1 | 0;
     if ($11_1 >>> 0 < 1) {
      $7_1 = $7_1 + 1 | 0
     }
     $19_1 = 1;
    }
    $8_1 = HEAP32[$1_1 + 4 >> 2];
    if ($8_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
     HEAP32[$1_1 + 4 >> 2] = $8_1 + 1;
     $8_1 = HEAPU8[$8_1 | 0];
    } else {
     $8_1 = $812($1_1)
    }
    continue;
   }
   break;
  };
  label$22 : {
   if (!$19_1) {
    $2_1 = HEAP32[$1_1 + 104 >> 2];
    if ($2_1) {
     HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + -1
    }
    label$25 : {
     if ($5_1) {
      if (!$2_1) {
       break label$25
      }
      HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + -1;
      if (!$20 | !$2_1) {
       break label$25
      }
      HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + -1;
      break label$25;
     }
     $811($1_1, 0, 0);
    }
    $827($6_1 + 96 | 0, +($4_1 | 0) * 0.0);
    $13_1 = HEAP32[$6_1 + 96 >> 2];
    $14_1 = HEAP32[$6_1 + 100 >> 2];
    $2_1 = HEAP32[$6_1 + 108 >> 2];
    $1_1 = HEAP32[$6_1 + 104 >> 2];
    break label$22;
   }
   if (($7_1 | 0) < 0 ? 1 : ($7_1 | 0) <= 0 ? ($11_1 >>> 0 > 7 ? 0 : 1) : 0) {
    $10_1 = $11_1;
    $9_1 = $7_1;
    while (1) {
     $16_1 = $16_1 << 4;
     $12_1 = $9_1;
     $15_1 = $10_1 + 1 | 0;
     if ($15_1 >>> 0 < 1) {
      $12_1 = $12_1 + 1 | 0
     }
     $19_1 = ($9_1 | 0) < 0 ? 1 : ($9_1 | 0) <= 0 ? ($10_1 >>> 0 >= 7 ? 0 : 1) : 0;
     $10_1 = $15_1;
     $9_1 = $12_1;
     if ($19_1) {
      continue
     }
     break;
    };
   }
   label$29 : {
    if (($8_1 | 32) == 112) {
     $10_1 = $840($1_1, $5_1);
     $12_1 = i64toi32_i32$HIGH_BITS;
     $9_1 = $12_1;
     if ($10_1 | ($9_1 | 0) != -2147483648) {
      break label$29
     }
     if ($5_1) {
      $10_1 = 0;
      $9_1 = 0;
      if (!HEAP32[$1_1 + 104 >> 2]) {
       break label$29
      }
      HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + -1;
      break label$29;
     }
     $13_1 = 0;
     $14_1 = 0;
     $811($1_1, 0, 0);
     $2_1 = 0;
     $1_1 = 0;
     break label$22;
    }
    $10_1 = 0;
    $9_1 = 0;
    if (!HEAP32[$1_1 + 104 >> 2]) {
     break label$29
    }
    HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + -1;
   }
   if (!$16_1) {
    $827($6_1 + 112 | 0, +($4_1 | 0) * 0.0);
    $13_1 = HEAP32[$6_1 + 112 >> 2];
    $14_1 = HEAP32[$6_1 + 116 >> 2];
    $2_1 = HEAP32[$6_1 + 124 >> 2];
    $1_1 = HEAP32[$6_1 + 120 >> 2];
    break label$22;
   }
   $1_1 = $20 ? $21_1 : $11_1;
   $5_1 = ($20 ? $22_1 : $7_1) << 2 | $1_1 >>> 30;
   $1_1 = $10_1 + ($1_1 << 2) | 0;
   $7_1 = $1_1 + -32 | 0;
   $11_1 = $7_1;
   $12_1 = 0 - $3 | 0;
   $5_1 = $5_1 + $9_1 | 0;
   $1_1 = ($1_1 >>> 0 < $10_1 >>> 0 ? $5_1 + 1 | 0 : $5_1) + -1 | 0;
   $7_1 = $7_1 >>> 0 < 4294967264 ? $1_1 + 1 | 0 : $1_1;
   $1_1 = $12_1 >> 31;
   if (($7_1 | 0) > ($1_1 | 0) ? 1 : ($7_1 | 0) >= ($1_1 | 0) ? ($11_1 >>> 0 <= $12_1 >>> 0 ? 0 : 1) : 0) {
    $825($6_1 + 160 | 0, $4_1);
    $824($6_1 + 144 | 0, HEAP32[$6_1 + 160 >> 2], HEAP32[$6_1 + 164 >> 2], HEAP32[$6_1 + 168 >> 2], HEAP32[$6_1 + 172 >> 2], -1, -1, -1, 2147418111);
    $824($6_1 + 128 | 0, HEAP32[$6_1 + 144 >> 2], HEAP32[$6_1 + 148 >> 2], HEAP32[$6_1 + 152 >> 2], HEAP32[$6_1 + 156 >> 2], -1, -1, -1, 2147418111);
    HEAP32[5216] = 68;
    $13_1 = HEAP32[$6_1 + 128 >> 2];
    $14_1 = HEAP32[$6_1 + 132 >> 2];
    $2_1 = HEAP32[$6_1 + 140 >> 2];
    $1_1 = HEAP32[$6_1 + 136 >> 2];
    break label$22;
   }
   $1_1 = $3 + -226 | 0;
   $5_1 = $11_1 >>> 0 < $1_1 >>> 0 ? 0 : 1;
   $1_1 = $1_1 >> 31;
   if (($7_1 | 0) > ($1_1 | 0) ? 1 : ($7_1 | 0) >= ($1_1 | 0) ? $5_1 : 0) {
    if (($16_1 | 0) > -1) {
     while (1) {
      $826($6_1 + 416 | 0, $13_1, $14_1, $17_1, $18, 0, 0, 0, -1073807360);
      $1_1 = $829($13_1, $14_1, $17_1, $18);
      $5_1 = ($1_1 | 0) < 0;
      $9_1 = $5_1;
      $826($6_1 + 400 | 0, $13_1, $14_1, $17_1, $18, $9_1 ? $13_1 : HEAP32[$6_1 + 416 >> 2], $9_1 ? $14_1 : HEAP32[$6_1 + 420 >> 2], $9_1 ? $17_1 : HEAP32[$6_1 + 424 >> 2], $9_1 ? $18 : HEAP32[$6_1 + 428 >> 2]);
      $7_1 = $7_1 + -1 | 0;
      $11_1 = $11_1 + -1 | 0;
      if ($11_1 >>> 0 < 4294967295) {
       $7_1 = $7_1 + 1 | 0
      }
      $17_1 = HEAP32[$6_1 + 408 >> 2];
      $18 = HEAP32[$6_1 + 412 >> 2];
      $13_1 = HEAP32[$6_1 + 400 >> 2];
      $14_1 = HEAP32[$6_1 + 404 >> 2];
      $16_1 = $16_1 << 1 | ($1_1 | 0) > -1;
      if (($16_1 | 0) > -1) {
       continue
      }
      break;
     }
    }
    $1_1 = ($11_1 - $3 | 0) + 32 | 0;
    $9_1 = $1_1;
    $5_1 = $2_1;
    $8_1 = $1_1 >>> 0 >= $2_1 >>> 0 ? 0 : 1;
    $3 = $7_1 - (($3 >> 31) + ($11_1 >>> 0 < $3 >>> 0) | 0) | 0;
    $1_1 = $1_1 >>> 0 < 32 ? $3 + 1 | 0 : $3;
    $2_1 = $2_1 >> 31;
    $1_1 = (($1_1 | 0) < ($2_1 | 0) ? 1 : ($1_1 | 0) <= ($2_1 | 0) ? $8_1 : 0) ? (($9_1 | 0) > 0 ? $9_1 : 0) : $5_1;
    label$37 : {
     if (($1_1 | 0) >= 113) {
      $825($6_1 + 384 | 0, $4_1);
      $10_1 = HEAP32[$6_1 + 392 >> 2];
      $9_1 = HEAP32[$6_1 + 396 >> 2];
      $12_1 = HEAP32[$6_1 + 384 >> 2];
      $15_1 = HEAP32[$6_1 + 388 >> 2];
      $3 = 0;
      $4_1 = 0;
      $5_1 = 0;
      $2_1 = 0;
      break label$37;
     }
     $825($6_1 + 336 | 0, $4_1);
     $827($6_1 + 352 | 0, $1776(144 - $1_1 | 0));
     $12_1 = HEAP32[$6_1 + 336 >> 2];
     $15_1 = HEAP32[$6_1 + 340 >> 2];
     $10_1 = HEAP32[$6_1 + 344 >> 2];
     $9_1 = HEAP32[$6_1 + 348 >> 2];
     $830($6_1 + 368 | 0, HEAP32[$6_1 + 352 >> 2], HEAP32[$6_1 + 356 >> 2], HEAP32[$6_1 + 360 >> 2], HEAP32[$6_1 + 364 >> 2], $12_1, $15_1, $10_1, $9_1);
     $3 = HEAP32[$6_1 + 376 >> 2];
     $4_1 = HEAP32[$6_1 + 380 >> 2];
     $5_1 = HEAP32[$6_1 + 372 >> 2];
     $2_1 = HEAP32[$6_1 + 368 >> 2];
    }
    $1_1 = !($16_1 & 1) & (($828($13_1, $14_1, $17_1, $18, 0, 0, 0, 0) | 0) != 0 & ($1_1 | 0) < 32);
    $831($6_1 + 320 | 0, $1_1 + $16_1 | 0);
    $824($6_1 + 304 | 0, $12_1, $15_1, $10_1, $9_1, HEAP32[$6_1 + 320 >> 2], HEAP32[$6_1 + 324 >> 2], HEAP32[$6_1 + 328 >> 2], HEAP32[$6_1 + 332 >> 2]);
    $824($6_1 + 288 | 0, $1_1 ? 0 : $13_1, $1_1 ? 0 : $14_1, $1_1 ? 0 : $17_1, $1_1 ? 0 : $18, $12_1, $15_1, $10_1, $9_1);
    $826($6_1 + 272 | 0, HEAP32[$6_1 + 304 >> 2], HEAP32[$6_1 + 308 >> 2], HEAP32[$6_1 + 312 >> 2], HEAP32[$6_1 + 316 >> 2], $2_1, $5_1, $3, $4_1);
    $826($6_1 + 256 | 0, HEAP32[$6_1 + 288 >> 2], HEAP32[$6_1 + 292 >> 2], HEAP32[$6_1 + 296 >> 2], HEAP32[$6_1 + 300 >> 2], HEAP32[$6_1 + 272 >> 2], HEAP32[$6_1 + 276 >> 2], HEAP32[$6_1 + 280 >> 2], HEAP32[$6_1 + 284 >> 2]);
    $832($6_1 + 240 | 0, HEAP32[$6_1 + 256 >> 2], HEAP32[$6_1 + 260 >> 2], HEAP32[$6_1 + 264 >> 2], HEAP32[$6_1 + 268 >> 2], $2_1, $5_1, $3, $4_1);
    $1_1 = HEAP32[$6_1 + 240 >> 2];
    $2_1 = HEAP32[$6_1 + 244 >> 2];
    $3 = HEAP32[$6_1 + 248 >> 2];
    $4_1 = HEAP32[$6_1 + 252 >> 2];
    if (!$828($1_1, $2_1, $3, $4_1, 0, 0, 0, 0)) {
     HEAP32[5216] = 68
    }
    $833($6_1 + 224 | 0, $1_1, $2_1, $3, $4_1, $11_1);
    $13_1 = HEAP32[$6_1 + 224 >> 2];
    $14_1 = HEAP32[$6_1 + 228 >> 2];
    $2_1 = HEAP32[$6_1 + 236 >> 2];
    $1_1 = HEAP32[$6_1 + 232 >> 2];
    break label$22;
   }
   $825($6_1 + 208 | 0, $4_1);
   $824($6_1 + 192 | 0, HEAP32[$6_1 + 208 >> 2], HEAP32[$6_1 + 212 >> 2], HEAP32[$6_1 + 216 >> 2], HEAP32[$6_1 + 220 >> 2], 0, 0, 0, 65536);
   $824($6_1 + 176 | 0, HEAP32[$6_1 + 192 >> 2], HEAP32[$6_1 + 196 >> 2], HEAP32[$6_1 + 200 >> 2], HEAP32[$6_1 + 204 >> 2], 0, 0, 0, 65536);
   HEAP32[5216] = 68;
   $13_1 = HEAP32[$6_1 + 176 >> 2];
   $14_1 = HEAP32[$6_1 + 180 >> 2];
   $2_1 = HEAP32[$6_1 + 188 >> 2];
   $1_1 = HEAP32[$6_1 + 184 >> 2];
  }
  HEAP32[$0 >> 2] = $13_1;
  HEAP32[$0 + 4 >> 2] = $14_1;
  HEAP32[$0 + 8 >> 2] = $1_1;
  HEAP32[$0 + 12 >> 2] = $2_1;
  global$0 = $6_1 + 432 | 0;
 }
 
 function $839($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18 = 0, $19_1 = 0, $20 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0.0, $25_1 = 0, $26 = 0, $27_1 = 0;
  $7_1 = global$0 - 8960 | 0;
  global$0 = $7_1;
  $22_1 = $3 + $4_1 | 0;
  $25_1 = 0 - $22_1 | 0;
  label$1 : {
   label$2 : {
    while (1) {
     if (($2_1 | 0) != 48) {
      label$4 : {
       if (($2_1 | 0) != 46) {
        break label$1
       }
       $2_1 = HEAP32[$1_1 + 4 >> 2];
       if ($2_1 >>> 0 >= HEAPU32[$1_1 + 104 >> 2]) {
        break label$4
       }
       HEAP32[$1_1 + 4 >> 2] = $2_1 + 1;
       $2_1 = HEAPU8[$2_1 | 0];
       break label$2;
      }
     } else {
      $2_1 = HEAP32[$1_1 + 4 >> 2];
      if ($2_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
       $15_1 = 1;
       HEAP32[$1_1 + 4 >> 2] = $2_1 + 1;
       $2_1 = HEAPU8[$2_1 | 0];
      } else {
       $15_1 = 1;
       $2_1 = $812($1_1);
      }
      continue;
     }
     break;
    };
    $2_1 = $812($1_1);
   }
   $10_1 = 1;
   if (($2_1 | 0) != 48) {
    break label$1
   }
   while (1) {
    $8_1 = $8_1 + -1 | 0;
    $9_1 = $9_1 + -1 | 0;
    if ($9_1 >>> 0 < 4294967295) {
     $8_1 = $8_1 + 1 | 0
    }
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    label$9 : {
     if ($2_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
      HEAP32[$1_1 + 4 >> 2] = $2_1 + 1;
      $2_1 = HEAPU8[$2_1 | 0];
      break label$9;
     }
     $2_1 = $812($1_1);
    }
    if (($2_1 | 0) == 48) {
     continue
    }
    break;
   };
   $15_1 = 1;
  }
  HEAP32[$7_1 + 768 >> 2] = 0;
  $26 = $0;
  $27_1 = $0;
  label$11 : {
   label$12 : {
    $12_1 = ($2_1 | 0) == 46;
    $17_1 = $2_1 + -48 | 0;
    label$13 : {
     label$14 : {
      label$15 : {
       if ($12_1 | $17_1 >>> 0 <= 9) {
        while (1) {
         label$19 : {
          if ($12_1 & 1) {
           if (!$10_1) {
            $9_1 = $14_1;
            $8_1 = $13_1;
            $10_1 = 1;
            break label$19;
           }
           $15_1 = ($15_1 | 0) != 0;
           break label$15;
          }
          $14_1 = $14_1 + 1 | 0;
          if ($14_1 >>> 0 < 1) {
           $13_1 = $13_1 + 1 | 0
          }
          if (($11_1 | 0) <= 2044) {
           $20 = ($2_1 | 0) != 48 ? $14_1 : $20;
           $18 = ($7_1 + 768 | 0) + ($11_1 << 2) | 0;
           HEAP32[$18 >> 2] = $16_1 ? (Math_imul(HEAP32[$18 >> 2], 10) + $2_1 | 0) + -48 | 0 : $17_1;
           $15_1 = 1;
           $2_1 = $16_1 + 1 | 0;
           $12_1 = ($2_1 | 0) == 9;
           $16_1 = $12_1 ? 0 : $2_1;
           $11_1 = $11_1 + $12_1 | 0;
           break label$19;
          }
          if (($2_1 | 0) == 48) {
           break label$19
          }
          HEAP32[$7_1 + 8944 >> 2] = HEAP32[$7_1 + 8944 >> 2] | 1;
         }
         $2_1 = HEAP32[$1_1 + 4 >> 2];
         label$25 : {
          if ($2_1 >>> 0 < HEAPU32[$1_1 + 104 >> 2]) {
           HEAP32[$1_1 + 4 >> 2] = $2_1 + 1;
           $2_1 = HEAPU8[$2_1 | 0];
           break label$25;
          }
          $2_1 = $812($1_1);
         }
         $12_1 = ($2_1 | 0) == 46;
         $17_1 = $2_1 + -48 | 0;
         if ($12_1 | $17_1 >>> 0 < 10) {
          continue
         }
         break;
        }
       }
       $9_1 = $10_1 ? $9_1 : $14_1;
       $8_1 = $10_1 ? $8_1 : $13_1;
       if (!(!$15_1 | ($2_1 | 32) != 101)) {
        $2_1 = $840($1_1, $6_1);
        $12_1 = i64toi32_i32$HIGH_BITS;
        $10_1 = $12_1;
        label$28 : {
         if ($2_1 | ($10_1 | 0) != -2147483648) {
          break label$28
         }
         if (!$6_1) {
          break label$13
         }
         $2_1 = 0;
         $10_1 = 0;
         if (!HEAP32[$1_1 + 104 >> 2]) {
          break label$28
         }
         HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + -1;
        }
        $8_1 = $8_1 + $10_1 | 0;
        $9_1 = $2_1 + $9_1 | 0;
        if ($9_1 >>> 0 < $2_1 >>> 0) {
         $8_1 = $8_1 + 1 | 0
        }
        break label$12;
       }
       $15_1 = ($15_1 | 0) != 0;
       if (($2_1 | 0) < 0) {
        break label$14
       }
      }
      if (!HEAP32[$1_1 + 104 >> 2]) {
       break label$14
      }
      HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] + -1;
     }
     if ($15_1) {
      break label$12
     }
     HEAP32[5216] = 28;
    }
    $811($1_1, 0, 0);
    $9_1 = 0;
    $8_1 = 0;
    $2_1 = 0;
    $1_1 = 0;
    break label$11;
   }
   $1_1 = HEAP32[$7_1 + 768 >> 2];
   if (!$1_1) {
    $827($7_1, +($5_1 | 0) * 0.0);
    $9_1 = HEAP32[$7_1 + 8 >> 2];
    $8_1 = HEAP32[$7_1 + 12 >> 2];
    $2_1 = HEAP32[$7_1 + 4 >> 2];
    $1_1 = HEAP32[$7_1 >> 2];
    break label$11;
   }
   if (!(($9_1 | 0) != ($14_1 | 0) | ($8_1 | 0) != ($13_1 | 0) | (($13_1 | 0) > 0 ? 1 : ($13_1 | 0) >= 0 ? ($14_1 >>> 0 <= 9 ? 0 : 1) : 0) | ($1_1 >>> $3 | 0 ? ($3 | 0) <= 30 : 0))) {
    $831($7_1 + 32 | 0, $1_1);
    $825($7_1 + 48 | 0, $5_1);
    $824($7_1 + 16 | 0, HEAP32[$7_1 + 48 >> 2], HEAP32[$7_1 + 52 >> 2], HEAP32[$7_1 + 56 >> 2], HEAP32[$7_1 + 60 >> 2], HEAP32[$7_1 + 32 >> 2], HEAP32[$7_1 + 36 >> 2], HEAP32[$7_1 + 40 >> 2], HEAP32[$7_1 + 44 >> 2]);
    $9_1 = HEAP32[$7_1 + 24 >> 2];
    $8_1 = HEAP32[$7_1 + 28 >> 2];
    $2_1 = HEAP32[$7_1 + 20 >> 2];
    $1_1 = HEAP32[$7_1 + 16 >> 2];
    break label$11;
   }
   $1_1 = ($4_1 | 0) / -2 | 0;
   $2_1 = $9_1 >>> 0 <= $1_1 >>> 0 ? 0 : 1;
   $1_1 = $1_1 >> 31;
   if (($8_1 | 0) > ($1_1 | 0) ? 1 : ($8_1 | 0) >= ($1_1 | 0) ? $2_1 : 0) {
    $825($7_1 + 96 | 0, $5_1);
    $824($7_1 + 80 | 0, HEAP32[$7_1 + 96 >> 2], HEAP32[$7_1 + 100 >> 2], HEAP32[$7_1 + 104 >> 2], HEAP32[$7_1 + 108 >> 2], -1, -1, -1, 2147418111);
    $824($7_1 - -64 | 0, HEAP32[$7_1 + 80 >> 2], HEAP32[$7_1 + 84 >> 2], HEAP32[$7_1 + 88 >> 2], HEAP32[$7_1 + 92 >> 2], -1, -1, -1, 2147418111);
    HEAP32[5216] = 68;
    $9_1 = HEAP32[$7_1 + 72 >> 2];
    $8_1 = HEAP32[$7_1 + 76 >> 2];
    $2_1 = HEAP32[$7_1 + 68 >> 2];
    $1_1 = HEAP32[$7_1 + 64 >> 2];
    break label$11;
   }
   $1_1 = $4_1 + -226 | 0;
   $2_1 = $9_1 >>> 0 >= $1_1 >>> 0 ? 0 : 1;
   $1_1 = $1_1 >> 31;
   if (($8_1 | 0) < ($1_1 | 0) ? 1 : ($8_1 | 0) <= ($1_1 | 0) ? $2_1 : 0) {
    $825($7_1 + 144 | 0, $5_1);
    $824($7_1 + 128 | 0, HEAP32[$7_1 + 144 >> 2], HEAP32[$7_1 + 148 >> 2], HEAP32[$7_1 + 152 >> 2], HEAP32[$7_1 + 156 >> 2], 0, 0, 0, 65536);
    $824($7_1 + 112 | 0, HEAP32[$7_1 + 128 >> 2], HEAP32[$7_1 + 132 >> 2], HEAP32[$7_1 + 136 >> 2], HEAP32[$7_1 + 140 >> 2], 0, 0, 0, 65536);
    HEAP32[5216] = 68;
    $9_1 = HEAP32[$7_1 + 120 >> 2];
    $8_1 = HEAP32[$7_1 + 124 >> 2];
    $2_1 = HEAP32[$7_1 + 116 >> 2];
    $1_1 = HEAP32[$7_1 + 112 >> 2];
    break label$11;
   }
   if ($16_1) {
    if (($16_1 | 0) <= 8) {
     $6_1 = ($7_1 + 768 | 0) + ($11_1 << 2) | 0;
     $1_1 = HEAP32[$6_1 >> 2];
     while (1) {
      $1_1 = Math_imul($1_1, 10);
      $2_1 = ($16_1 | 0) < 8;
      $16_1 = $16_1 + 1 | 0;
      if ($2_1) {
       continue
      }
      break;
     };
     HEAP32[$6_1 >> 2] = $1_1;
    }
    $11_1 = $11_1 + 1 | 0;
   }
   label$36 : {
    $10_1 = $9_1;
    if (($20 | 0) > 8 | ($20 | 0) > ($10_1 | 0) | ($10_1 | 0) > 17) {
     break label$36
    }
    if (($10_1 | 0) == 9) {
     $831($7_1 + 176 | 0, HEAP32[$7_1 + 768 >> 2]);
     $825($7_1 + 192 | 0, $5_1);
     $824($7_1 + 160 | 0, HEAP32[$7_1 + 192 >> 2], HEAP32[$7_1 + 196 >> 2], HEAP32[$7_1 + 200 >> 2], HEAP32[$7_1 + 204 >> 2], HEAP32[$7_1 + 176 >> 2], HEAP32[$7_1 + 180 >> 2], HEAP32[$7_1 + 184 >> 2], HEAP32[$7_1 + 188 >> 2]);
     $9_1 = HEAP32[$7_1 + 168 >> 2];
     $8_1 = HEAP32[$7_1 + 172 >> 2];
     $2_1 = HEAP32[$7_1 + 164 >> 2];
     $1_1 = HEAP32[$7_1 + 160 >> 2];
     break label$11;
    }
    if (($10_1 | 0) <= 8) {
     $831($7_1 + 256 | 0, HEAP32[$7_1 + 768 >> 2]);
     $825($7_1 + 272 | 0, $5_1);
     $824($7_1 + 240 | 0, HEAP32[$7_1 + 272 >> 2], HEAP32[$7_1 + 276 >> 2], HEAP32[$7_1 + 280 >> 2], HEAP32[$7_1 + 284 >> 2], HEAP32[$7_1 + 256 >> 2], HEAP32[$7_1 + 260 >> 2], HEAP32[$7_1 + 264 >> 2], HEAP32[$7_1 + 268 >> 2]);
     $825($7_1 + 224 | 0, HEAP32[(0 - $10_1 << 2) + 6480 >> 2]);
     $834($7_1 + 208 | 0, HEAP32[$7_1 + 240 >> 2], HEAP32[$7_1 + 244 >> 2], HEAP32[$7_1 + 248 >> 2], HEAP32[$7_1 + 252 >> 2], HEAP32[$7_1 + 224 >> 2], HEAP32[$7_1 + 228 >> 2], HEAP32[$7_1 + 232 >> 2], HEAP32[$7_1 + 236 >> 2]);
     $9_1 = HEAP32[$7_1 + 216 >> 2];
     $8_1 = HEAP32[$7_1 + 220 >> 2];
     $2_1 = HEAP32[$7_1 + 212 >> 2];
     $1_1 = HEAP32[$7_1 + 208 >> 2];
     break label$11;
    }
    $2_1 = (Math_imul($10_1, -3) + $3 | 0) + 27 | 0;
    $1_1 = HEAP32[$7_1 + 768 >> 2];
    if ($1_1 >>> $2_1 | 0 ? ($2_1 | 0) <= 30 : 0) {
     break label$36
    }
    $831($7_1 + 336 | 0, $1_1);
    $825($7_1 + 352 | 0, $5_1);
    $824($7_1 + 320 | 0, HEAP32[$7_1 + 352 >> 2], HEAP32[$7_1 + 356 >> 2], HEAP32[$7_1 + 360 >> 2], HEAP32[$7_1 + 364 >> 2], HEAP32[$7_1 + 336 >> 2], HEAP32[$7_1 + 340 >> 2], HEAP32[$7_1 + 344 >> 2], HEAP32[$7_1 + 348 >> 2]);
    $825($7_1 + 304 | 0, HEAP32[($10_1 << 2) + 6408 >> 2]);
    $824($7_1 + 288 | 0, HEAP32[$7_1 + 320 >> 2], HEAP32[$7_1 + 324 >> 2], HEAP32[$7_1 + 328 >> 2], HEAP32[$7_1 + 332 >> 2], HEAP32[$7_1 + 304 >> 2], HEAP32[$7_1 + 308 >> 2], HEAP32[$7_1 + 312 >> 2], HEAP32[$7_1 + 316 >> 2]);
    $9_1 = HEAP32[$7_1 + 296 >> 2];
    $8_1 = HEAP32[$7_1 + 300 >> 2];
    $2_1 = HEAP32[$7_1 + 292 >> 2];
    $1_1 = HEAP32[$7_1 + 288 >> 2];
    break label$11;
   }
   $16_1 = 0;
   $1_1 = ($10_1 | 0) % 9 | 0;
   label$39 : {
    if (!$1_1) {
     $2_1 = 0;
     break label$39;
    }
    $18 = ($10_1 | 0) > -1 ? $1_1 : $1_1 + 9 | 0;
    label$41 : {
     if (!$11_1) {
      $2_1 = 0;
      $11_1 = 0;
      break label$41;
     }
     $8_1 = HEAP32[(0 - $18 << 2) + 6480 >> 2];
     $14_1 = 1e9 / ($8_1 | 0) | 0;
     $15_1 = 0;
     $1_1 = 0;
     $2_1 = 0;
     while (1) {
      $6_1 = ($7_1 + 768 | 0) + ($1_1 << 2) | 0;
      $12_1 = HEAP32[$6_1 >> 2];
      $9_1 = ($12_1 >>> 0) / ($8_1 >>> 0) | 0;
      $13_1 = $15_1 + $9_1 | 0;
      HEAP32[$6_1 >> 2] = $13_1;
      $6_1 = !$13_1 & ($1_1 | 0) == ($2_1 | 0);
      $2_1 = $6_1 ? $2_1 + 1 & 2047 : $2_1;
      $10_1 = $6_1 ? $10_1 + -9 | 0 : $10_1;
      $15_1 = Math_imul($14_1, $12_1 - Math_imul($8_1, $9_1) | 0);
      $1_1 = $1_1 + 1 | 0;
      if (($11_1 | 0) != ($1_1 | 0)) {
       continue
      }
      break;
     };
     if (!$15_1) {
      break label$41
     }
     HEAP32[($7_1 + 768 | 0) + ($11_1 << 2) >> 2] = $15_1;
     $11_1 = $11_1 + 1 | 0;
    }
    $10_1 = ($10_1 - $18 | 0) + 9 | 0;
   }
   while (1) {
    $14_1 = ($7_1 + 768 | 0) + ($2_1 << 2) | 0;
    label$45 : {
     while (1) {
      if (($10_1 | 0) != 36 | HEAPU32[$14_1 >> 2] >= 10384593 ? ($10_1 | 0) >= 36 : 0) {
       break label$45
      }
      $17_1 = $11_1 + 2047 | 0;
      $15_1 = 0;
      $12_1 = $11_1;
      while (1) {
       $11_1 = $12_1;
       $13_1 = $17_1 & 2047;
       $12_1 = ($7_1 + 768 | 0) + ($13_1 << 2) | 0;
       $1_1 = HEAP32[$12_1 >> 2];
       $8_1 = $1_1 >>> 3 | 0;
       $6_1 = $1_1 << 29;
       $1_1 = $6_1 + $15_1 | 0;
       if ($1_1 >>> 0 < $6_1 >>> 0) {
        $8_1 = $8_1 + 1 | 0
       }
       $9_1 = $1_1;
       $6_1 = 0;
       label$49 : {
        if (!$8_1 & $1_1 >>> 0 < 1000000001 | $8_1 >>> 0 < 0) {
         break label$49
        }
        $1_1 = __wasm_i64_udiv($1_1, $8_1, 1e9);
        $9_1 = $9_1 - __wasm_i64_mul($1_1, i64toi32_i32$HIGH_BITS, 1e9, 0) | 0;
        $6_1 = $1_1;
       }
       $15_1 = $6_1;
       HEAP32[$12_1 >> 2] = $9_1;
       $12_1 = ($13_1 | 0) != ($11_1 + -1 & 2047) ? $11_1 : ($2_1 | 0) == ($13_1 | 0) ? $11_1 : $9_1 ? $11_1 : $13_1;
       $17_1 = $13_1 + -1 | 0;
       if (($2_1 | 0) != ($13_1 | 0)) {
        continue
       }
       break;
      };
      $16_1 = $16_1 + -29 | 0;
      if (!$15_1) {
       continue
      }
      break;
     };
     $2_1 = $2_1 + -1 & 2047;
     if (($12_1 | 0) == ($2_1 | 0)) {
      $1_1 = ($7_1 + 768 | 0) + (($12_1 + 2046 & 2047) << 2) | 0;
      $11_1 = $12_1 + -1 & 2047;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | HEAP32[($7_1 + 768 | 0) + ($11_1 << 2) >> 2];
     }
     $10_1 = $10_1 + 9 | 0;
     HEAP32[($7_1 + 768 | 0) + ($2_1 << 2) >> 2] = $15_1;
     continue;
    }
    break;
   };
   label$51 : {
    label$52 : while (1) {
     $6_1 = $11_1 + 1 & 2047;
     $18 = ($7_1 + 768 | 0) + (($11_1 + -1 & 2047) << 2) | 0;
     while (1) {
      $19_1 = ($10_1 | 0) > 45 ? 9 : 1;
      label$54 : {
       while (1) {
        $12_1 = $2_1;
        $1_1 = 0;
        label$56 : {
         while (1) {
          label$58 : {
           $2_1 = $1_1 + $12_1 & 2047;
           if (($2_1 | 0) == ($11_1 | 0)) {
            break label$58
           }
           $9_1 = HEAP32[($7_1 + 768 | 0) + ($2_1 << 2) >> 2];
           $2_1 = HEAP32[($1_1 << 2) + 6432 >> 2];
           if ($9_1 >>> 0 < $2_1 >>> 0) {
            break label$58
           }
           if ($9_1 >>> 0 > $2_1 >>> 0) {
            break label$56
           }
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != 4) {
            continue
           }
          }
          break;
         };
         if (($10_1 | 0) != 36) {
          break label$56
         }
         $9_1 = 0;
         $8_1 = 0;
         $1_1 = 0;
         $14_1 = 0;
         $13_1 = 0;
         while (1) {
          $2_1 = $1_1 + $12_1 & 2047;
          if (($2_1 | 0) == ($11_1 | 0)) {
           $11_1 = $11_1 + 1 & 2047;
           HEAP32[(($11_1 << 2) + $7_1 | 0) + 764 >> 2] = 0;
          }
          $824($7_1 + 752 | 0, $9_1, $8_1, $14_1, $13_1, 0, 0, 1342177280, 1075633366);
          $831($7_1 + 736 | 0, HEAP32[($7_1 + 768 | 0) + ($2_1 << 2) >> 2]);
          $826($7_1 + 720 | 0, HEAP32[$7_1 + 752 >> 2], HEAP32[$7_1 + 756 >> 2], HEAP32[$7_1 + 760 >> 2], HEAP32[$7_1 + 764 >> 2], HEAP32[$7_1 + 736 >> 2], HEAP32[$7_1 + 740 >> 2], HEAP32[$7_1 + 744 >> 2], HEAP32[$7_1 + 748 >> 2]);
          $14_1 = HEAP32[$7_1 + 728 >> 2];
          $13_1 = HEAP32[$7_1 + 732 >> 2];
          $9_1 = HEAP32[$7_1 + 720 >> 2];
          $8_1 = HEAP32[$7_1 + 724 >> 2];
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != 4) {
           continue
          }
          break;
         };
         $825($7_1 + 704 | 0, $5_1);
         $824($7_1 + 688 | 0, $9_1, $8_1, $14_1, $13_1, HEAP32[$7_1 + 704 >> 2], HEAP32[$7_1 + 708 >> 2], HEAP32[$7_1 + 712 >> 2], HEAP32[$7_1 + 716 >> 2]);
         $14_1 = HEAP32[$7_1 + 696 >> 2];
         $13_1 = HEAP32[$7_1 + 700 >> 2];
         $9_1 = 0;
         $8_1 = 0;
         $2_1 = HEAP32[$7_1 + 688 >> 2];
         $10_1 = HEAP32[$7_1 + 692 >> 2];
         $6_1 = $16_1 + 113 | 0;
         $19_1 = $6_1 - $4_1 | 0;
         $18 = ($19_1 | 0) < ($3 | 0);
         $21_1 = $18 ? (($19_1 | 0) > 0 ? $19_1 : 0) : $3;
         if (($21_1 | 0) <= 112) {
          break label$54
         }
         $1_1 = 0;
         $3 = 0;
         $15_1 = 0;
         $17_1 = 0;
         $20 = 0;
         break label$51;
        }
        $16_1 = $16_1 + $19_1 | 0;
        $2_1 = $11_1;
        if (($12_1 | 0) == ($2_1 | 0)) {
         continue
        }
        break;
       };
       $13_1 = 1e9 >>> $19_1 | 0;
       $14_1 = -1 << $19_1 ^ -1;
       $1_1 = 0;
       $2_1 = $12_1;
       while (1) {
        $8_1 = $1_1;
        $1_1 = ($7_1 + 768 | 0) + ($12_1 << 2) | 0;
        $9_1 = HEAP32[$1_1 >> 2];
        $8_1 = $8_1 + ($9_1 >>> $19_1 | 0) | 0;
        HEAP32[$1_1 >> 2] = $8_1;
        $1_1 = !$8_1 & ($2_1 | 0) == ($12_1 | 0);
        $2_1 = $1_1 ? $2_1 + 1 & 2047 : $2_1;
        $10_1 = $1_1 ? $10_1 + -9 | 0 : $10_1;
        $1_1 = Math_imul($13_1, $9_1 & $14_1);
        $12_1 = $12_1 + 1 & 2047;
        if (($12_1 | 0) != ($11_1 | 0)) {
         continue
        }
        break;
       };
       if (!$1_1) {
        continue
       }
       if (($2_1 | 0) != ($6_1 | 0)) {
        HEAP32[($7_1 + 768 | 0) + ($11_1 << 2) >> 2] = $1_1;
        $11_1 = $6_1;
        continue label$52;
       }
       HEAP32[$18 >> 2] = HEAP32[$18 >> 2] | 1;
       $2_1 = $6_1;
       continue;
      }
      break;
     };
     break;
    };
    $827($7_1 + 640 | 0, $1776(225 - $21_1 | 0));
    $830($7_1 + 672 | 0, HEAP32[$7_1 + 640 >> 2], HEAP32[$7_1 + 644 >> 2], HEAP32[$7_1 + 648 >> 2], HEAP32[$7_1 + 652 >> 2], $2_1, $10_1, $14_1, $13_1);
    $20 = HEAP32[$7_1 + 680 >> 2];
    $23_1 = HEAP32[$7_1 + 684 >> 2];
    $15_1 = HEAP32[$7_1 + 672 >> 2];
    $17_1 = HEAP32[$7_1 + 676 >> 2];
    $827($7_1 + 624 | 0, $1776(113 - $21_1 | 0));
    $1775($7_1 + 656 | 0, $2_1, $10_1, $14_1, $13_1, HEAP32[$7_1 + 624 >> 2], HEAP32[$7_1 + 628 >> 2], HEAP32[$7_1 + 632 >> 2], HEAP32[$7_1 + 636 >> 2]);
    $9_1 = HEAP32[$7_1 + 656 >> 2];
    $8_1 = HEAP32[$7_1 + 660 >> 2];
    $1_1 = HEAP32[$7_1 + 664 >> 2];
    $3 = HEAP32[$7_1 + 668 >> 2];
    $832($7_1 + 608 | 0, $2_1, $10_1, $14_1, $13_1, $9_1, $8_1, $1_1, $3);
    $826($7_1 + 592 | 0, $15_1, $17_1, $20, $23_1, HEAP32[$7_1 + 608 >> 2], HEAP32[$7_1 + 612 >> 2], HEAP32[$7_1 + 616 >> 2], HEAP32[$7_1 + 620 >> 2]);
    $14_1 = HEAP32[$7_1 + 600 >> 2];
    $13_1 = HEAP32[$7_1 + 604 >> 2];
    $2_1 = HEAP32[$7_1 + 592 >> 2];
    $10_1 = HEAP32[$7_1 + 596 >> 2];
   }
   $4_1 = $12_1 + 4 & 2047;
   label$63 : {
    if (($4_1 | 0) == ($11_1 | 0)) {
     break label$63
    }
    $4_1 = HEAP32[($7_1 + 768 | 0) + ($4_1 << 2) >> 2];
    label$64 : {
     if ($4_1 >>> 0 <= 499999999) {
      if (($12_1 + 5 & 2047) == ($11_1 | 0) ? !$4_1 : 0) {
       break label$64
      }
      $827($7_1 + 480 | 0, +($5_1 | 0) * .25);
      $826($7_1 + 464 | 0, $9_1, $8_1, $1_1, $3, HEAP32[$7_1 + 480 >> 2], HEAP32[$7_1 + 484 >> 2], HEAP32[$7_1 + 488 >> 2], HEAP32[$7_1 + 492 >> 2]);
      $1_1 = HEAP32[$7_1 + 472 >> 2];
      $3 = HEAP32[$7_1 + 476 >> 2];
      $9_1 = HEAP32[$7_1 + 464 >> 2];
      $8_1 = HEAP32[$7_1 + 468 >> 2];
      break label$64;
     }
     if (($4_1 | 0) != 5e8) {
      $827($7_1 + 576 | 0, +($5_1 | 0) * .75);
      $826($7_1 + 560 | 0, $9_1, $8_1, $1_1, $3, HEAP32[$7_1 + 576 >> 2], HEAP32[$7_1 + 580 >> 2], HEAP32[$7_1 + 584 >> 2], HEAP32[$7_1 + 588 >> 2]);
      $1_1 = HEAP32[$7_1 + 568 >> 2];
      $3 = HEAP32[$7_1 + 572 >> 2];
      $9_1 = HEAP32[$7_1 + 560 >> 2];
      $8_1 = HEAP32[$7_1 + 564 >> 2];
      break label$64;
     }
     $24_1 = +($5_1 | 0);
     if (($12_1 + 5 & 2047) == ($11_1 | 0)) {
      $827($7_1 + 512 | 0, $24_1 * .5);
      $826($7_1 + 496 | 0, $9_1, $8_1, $1_1, $3, HEAP32[$7_1 + 512 >> 2], HEAP32[$7_1 + 516 >> 2], HEAP32[$7_1 + 520 >> 2], HEAP32[$7_1 + 524 >> 2]);
      $1_1 = HEAP32[$7_1 + 504 >> 2];
      $3 = HEAP32[$7_1 + 508 >> 2];
      $9_1 = HEAP32[$7_1 + 496 >> 2];
      $8_1 = HEAP32[$7_1 + 500 >> 2];
      break label$64;
     }
     $827($7_1 + 544 | 0, $24_1 * .75);
     $826($7_1 + 528 | 0, $9_1, $8_1, $1_1, $3, HEAP32[$7_1 + 544 >> 2], HEAP32[$7_1 + 548 >> 2], HEAP32[$7_1 + 552 >> 2], HEAP32[$7_1 + 556 >> 2]);
     $1_1 = HEAP32[$7_1 + 536 >> 2];
     $3 = HEAP32[$7_1 + 540 >> 2];
     $9_1 = HEAP32[$7_1 + 528 >> 2];
     $8_1 = HEAP32[$7_1 + 532 >> 2];
    }
    if (($21_1 | 0) > 111) {
     break label$63
    }
    $1775($7_1 + 448 | 0, $9_1, $8_1, $1_1, $3, 0, 0, 0, 1073676288);
    if ($828(HEAP32[$7_1 + 448 >> 2], HEAP32[$7_1 + 452 >> 2], HEAP32[$7_1 + 456 >> 2], HEAP32[$7_1 + 460 >> 2], 0, 0, 0, 0)) {
     break label$63
    }
    $826($7_1 + 432 | 0, $9_1, $8_1, $1_1, $3, 0, 0, 0, 1073676288);
    $1_1 = HEAP32[$7_1 + 440 >> 2];
    $3 = HEAP32[$7_1 + 444 >> 2];
    $9_1 = HEAP32[$7_1 + 432 >> 2];
    $8_1 = HEAP32[$7_1 + 436 >> 2];
   }
   $826($7_1 + 416 | 0, $2_1, $10_1, $14_1, $13_1, $9_1, $8_1, $1_1, $3);
   $832($7_1 + 400 | 0, HEAP32[$7_1 + 416 >> 2], HEAP32[$7_1 + 420 >> 2], HEAP32[$7_1 + 424 >> 2], HEAP32[$7_1 + 428 >> 2], $15_1, $17_1, $20, $23_1);
   $14_1 = HEAP32[$7_1 + 408 >> 2];
   $13_1 = HEAP32[$7_1 + 412 >> 2];
   $2_1 = HEAP32[$7_1 + 400 >> 2];
   $10_1 = HEAP32[$7_1 + 404 >> 2];
   label$68 : {
    if (($6_1 & 2147483647) <= (-2 - $22_1 | 0)) {
     break label$68
    }
    $824($7_1 + 384 | 0, $2_1, $10_1, $14_1, $13_1, 0, 0, 0, 1073610752);
    $1_1 = $828($9_1, $8_1, $1_1, $3, 0, 0, 0, 0);
    $3 = Math_abs($835($2_1, $10_1, $14_1, $13_1)) >= 1038459371706965525706099.0e10;
    $14_1 = $3 ? HEAP32[$7_1 + 392 >> 2] : $14_1;
    $13_1 = $3 ? HEAP32[$7_1 + 396 >> 2] : $13_1;
    $2_1 = $3 ? HEAP32[$7_1 + 384 >> 2] : $2_1;
    $10_1 = $3 ? HEAP32[$7_1 + 388 >> 2] : $10_1;
    $16_1 = $3 + $16_1 | 0;
    if (($16_1 + 110 | 0) <= ($25_1 | 0) ? !($18 & ($3 ^ 1 | ($19_1 | 0) != ($21_1 | 0)) & ($1_1 | 0) != 0) : 0) {
     break label$68
    }
    HEAP32[5216] = 68;
   }
   $833($7_1 + 368 | 0, $2_1, $10_1, $14_1, $13_1, $16_1);
   $9_1 = HEAP32[$7_1 + 376 >> 2];
   $8_1 = HEAP32[$7_1 + 380 >> 2];
   $2_1 = HEAP32[$7_1 + 372 >> 2];
   $1_1 = HEAP32[$7_1 + 368 >> 2];
  }
  HEAP32[$27_1 >> 2] = $1_1;
  HEAP32[$26 + 4 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $9_1;
  HEAP32[$0 + 12 >> 2] = $8_1;
  global$0 = $7_1 + 8960 | 0;
 }
 
 function $840($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  label$2 : {
   if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
    HEAP32[$0 + 4 >> 2] = $2_1 + 1;
    $2_1 = HEAPU8[$2_1 | 0];
    break label$2;
   }
   $2_1 = $812($0);
  }
  $3 = $2_1 + -43 | 0;
  label$1 : {
   if (!($3 - 1 | 0 ? $3 >>> 0 <= 2 : 0)) {
    $3 = $2_1 + -48 | 0;
    break label$1;
   }
   $5_1 = ($2_1 | 0) == 45;
   $1_1 = !$1_1;
   $2_1 = HEAP32[$0 + 4 >> 2];
   label$5 : {
    if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
     HEAP32[$0 + 4 >> 2] = $2_1 + 1;
     $2_1 = HEAPU8[$2_1 | 0];
     break label$5;
    }
    $2_1 = $812($0);
   }
   $3 = $2_1 + -48 | 0;
   if (!($1_1 | $3 >>> 0 < 10 | !HEAP32[$0 + 104 >> 2])) {
    HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1
   }
  }
  label$8 : {
   if ($3 >>> 0 < 10) {
    $3 = 0;
    while (1) {
     $3 = Math_imul($3, 10) + $2_1 | 0;
     $1_1 = HEAP32[$0 + 4 >> 2];
     label$11 : {
      if ($1_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
       HEAP32[$0 + 4 >> 2] = $1_1 + 1;
       $2_1 = HEAPU8[$1_1 | 0];
       break label$11;
      }
      $2_1 = $812($0);
     }
     $4_1 = $2_1 + -48 | 0;
     $3 = $3 + -48 | 0;
     if (($3 | 0) < 214748364 ? $4_1 >>> 0 <= 9 : 0) {
      continue
     }
     break;
    };
    $1_1 = $3;
    $3 = $3 >> 31;
    label$13 : {
     if ($4_1 >>> 0 >= 10) {
      break label$13
     }
     while (1) {
      $3 = __wasm_i64_mul($1_1, $3, 10, 0);
      $2_1 = $3 + $2_1 | 0;
      $1_1 = i64toi32_i32$HIGH_BITS;
      $1_1 = $2_1 >>> 0 < $3 >>> 0 ? $1_1 + 1 | 0 : $1_1;
      $2_1 = $2_1 + -48 | 0;
      $3 = $1_1 + -1 | 0;
      $3 = $2_1 >>> 0 < 4294967248 ? $3 + 1 | 0 : $3;
      $1_1 = $2_1;
      $2_1 = HEAP32[$0 + 4 >> 2];
      label$15 : {
       if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
        HEAP32[$0 + 4 >> 2] = $2_1 + 1;
        $2_1 = HEAPU8[$2_1 | 0];
        break label$15;
       }
       $2_1 = $812($0);
      }
      $4_1 = $2_1 + -48 | 0;
      if ($4_1 >>> 0 > 9) {
       break label$13
      }
      if (($3 | 0) < 21474836 ? 1 : ($3 | 0) <= 21474836 ? ($1_1 >>> 0 >= 2061584302 ? 0 : 1) : 0) {
       continue
      }
      break;
     };
    }
    if ($4_1 >>> 0 < 10) {
     while (1) {
      $2_1 = HEAP32[$0 + 4 >> 2];
      label$19 : {
       if ($2_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
        HEAP32[$0 + 4 >> 2] = $2_1 + 1;
        $2_1 = HEAPU8[$2_1 | 0];
        break label$19;
       }
       $2_1 = $812($0);
      }
      if ($2_1 + -48 >>> 0 < 10) {
       continue
      }
      break;
     }
    }
    if (HEAP32[$0 + 104 >> 2]) {
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1
    }
    $0 = $1_1;
    $1_1 = $5_1 ? 0 - $0 | 0 : $0;
    $3 = $5_1 ? 0 - ($3 + (0 < $0 >>> 0) | 0) | 0 : $3;
    break label$8;
   }
   $1_1 = 0;
   $3 = -2147483648;
   if (!HEAP32[$0 + 104 >> 2]) {
    break label$8
   }
   HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + -1;
   i64toi32_i32$HIGH_BITS = -2147483648;
   return 0;
  }
  i64toi32_i32$HIGH_BITS = $3;
  return $1_1;
 }
 
 function $841($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  $5_1 = $3 & 2147483647;
  $6_1 = $5_1;
  $4_1 = $5_1 + -1065418752 | 0;
  $5_1 = $2_1;
  $8_1 = $5_1;
  if ($5_1 >>> 0 < 0) {
   $4_1 = $4_1 + 1 | 0
  }
  $10_1 = $8_1;
  $9_1 = $6_1 + -1082064896 | 0;
  $8_1 = $5_1;
  if ($5_1 >>> 0 < 0) {
   $9_1 = $9_1 + 1 | 0
  }
  label$1 : {
   if (($4_1 | 0) == ($9_1 | 0) & $10_1 >>> 0 < $8_1 >>> 0 | $4_1 >>> 0 < $9_1 >>> 0) {
    $6_1 = ($3 & 33554431) << 7 | $2_1 >>> 25;
    $5_1 = 0;
    $9_1 = $5_1;
    $8_1 = $2_1 & 33554431;
    if (!(!$5_1 & ($8_1 | 0) == 16777216 ? !($0 | $1_1) : !$5_1 & $8_1 >>> 0 < 16777216 | $5_1 >>> 0 < 0)) {
     $4_1 = $6_1 + 1073741825 | 0;
     break label$1;
    }
    $4_1 = $6_1 + 1073741824 | 0;
    if ($8_1 ^ 16777216 | $0 | ($1_1 | $9_1)) {
     break label$1
    }
    $4_1 = ($4_1 & 1) + $4_1 | 0;
    break label$1;
   }
   if (!(!$5_1 & ($6_1 | 0) == 2147418112 ? !($0 | $1_1) : ($6_1 | 0) == 2147418112 & $5_1 >>> 0 < 0 | $6_1 >>> 0 < 2147418112)) {
    $4_1 = (($3 & 33554431) << 7 | $2_1 >>> 25) & 4194303 | 2143289344;
    break label$1;
   }
   $4_1 = 2139095040;
   if (($6_1 | 0) == 1082064895 & $5_1 >>> 0 > 4294967295 | $6_1 >>> 0 > 1082064895) {
    break label$1
   }
   $4_1 = 0;
   $6_1 = $6_1 >>> 16 | 0;
   if ($6_1 >>> 0 < 16145) {
    break label$1
   }
   $4_1 = $3 & 65535 | 65536;
   $823($7_1, $0, $1_1, $2_1, $4_1, 16257 - $6_1 | 0);
   $821($7_1 + 16 | 0, $0, $1_1, $5_1, $4_1, $6_1 + -16129 | 0);
   $1_1 = HEAP32[$7_1 + 8 >> 2];
   $4_1 = (HEAP32[$7_1 + 12 >> 2] & 33554431) << 7 | $1_1 >>> 25;
   $5_1 = HEAP32[$7_1 + 4 >> 2];
   $6_1 = $5_1;
   $0 = 0;
   $8_1 = $0;
   $9_1 = HEAP32[$7_1 >> 2] | ((HEAP32[$7_1 + 16 >> 2] | HEAP32[$7_1 + 24 >> 2]) != 0 | (HEAP32[$7_1 + 20 >> 2] | HEAP32[$7_1 + 28 >> 2]) != 0);
   $1_1 = $1_1 & 33554431;
   if (!(!$0 & ($1_1 | 0) == 16777216 ? !($5_1 | $9_1) : !$0 & $1_1 >>> 0 < 16777216 | $0 >>> 0 < 0)) {
    $4_1 = $4_1 + 1 | 0;
    break label$1;
   }
   if ($1_1 ^ 16777216 | $9_1 | ($6_1 | $8_1)) {
    break label$1
   }
   $4_1 = ($4_1 & 1) + $4_1 | 0;
  }
  global$0 = $7_1 + 32 | 0;
  return wasm2js_scratch_store_i32(0, $3 & -2147483648 | $4_1), wasm2js_scratch_load_f32();
 }
 
 function $842($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18 = 0, $19_1 = 0, $20 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f64$0 = 0.0;
  $7_1 = global$0 - 304 | 0;
  global$0 = $7_1;
  $4_1 = HEAPU8[$1_1 | 0];
  label$2 : {
   if (!$4_1) {
    break label$2
   }
   $9_1 = $0 + 4 | 0;
   label$3 : {
    while (1) {
     label$5 : {
      label$6 : {
       if ($810($4_1 & 255)) {
        while (1) {
         $4_1 = $1_1;
         $1_1 = $1_1 + 1 | 0;
         if ($810(HEAPU8[$4_1 + 1 | 0])) {
          continue
         }
         break;
        };
        $811($0, 0, 0);
        while (1) {
         $1_1 = HEAP32[$0 + 4 >> 2];
         label$10 : {
          if ($1_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$9_1 >> 2] = $1_1 + 1;
           $1_1 = HEAPU8[$1_1 | 0];
           break label$10;
          }
          $1_1 = $812($0);
         }
         if ($810($1_1)) {
          continue
         }
         break;
        };
        label$12 : {
         if (!HEAP32[$0 + 104 >> 2]) {
          $1_1 = HEAP32[$9_1 >> 2];
          break label$12;
         }
         $1_1 = HEAP32[$9_1 >> 2] + -1 | 0;
         HEAP32[$9_1 >> 2] = $1_1;
        }
        $8_1 = $1_1 - HEAP32[$0 + 8 >> 2] | 0;
        $5_1 = $8_1;
        $1_1 = $12_1 + HEAP32[$0 + 124 >> 2] | 0;
        $3 = $10_1 + HEAP32[$0 + 120 >> 2] | 0;
        if ($3 >>> 0 < $10_1 >>> 0) {
         $1_1 = $1_1 + 1 | 0
        }
        $5_1 = $3 + $5_1 | 0;
        $10_1 = $5_1;
        $1_1 = ($8_1 >> 31) + $1_1 | 0;
        $12_1 = $5_1 >>> 0 < $3 >>> 0 ? $1_1 + 1 | 0 : $1_1;
        break label$6;
       }
       label$14 : {
        label$15 : {
         label$16 : {
          $4_1 = HEAPU8[$1_1 | 0];
          if (($4_1 | 0) == 37) {
           $3 = HEAPU8[$1_1 + 1 | 0];
           if (($3 | 0) == 42) {
            break label$16
           }
           if (($3 | 0) != 37) {
            break label$15
           }
          }
          $811($0, 0, 0);
          $4_1 = (($4_1 | 0) == 37) + $1_1 | 0;
          $1_1 = HEAP32[$0 + 4 >> 2];
          label$18 : {
           if ($1_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
            HEAP32[$9_1 >> 2] = $1_1 + 1;
            $1_1 = HEAPU8[$1_1 | 0];
            break label$18;
           }
           $1_1 = $812($0);
          }
          if (($1_1 | 0) != HEAPU8[$4_1 | 0]) {
           if (HEAP32[$0 + 104 >> 2]) {
            HEAP32[$9_1 >> 2] = HEAP32[$9_1 >> 2] + -1
           }
           $16_1 = 0;
           if (($1_1 | 0) >= 0) {
            break label$2
           }
           break label$5;
          }
          $10_1 = $10_1 + 1 | 0;
          if ($10_1 >>> 0 < 1) {
           $12_1 = $12_1 + 1 | 0
          }
          break label$6;
         }
         $8_1 = 0;
         $4_1 = $1_1 + 2 | 0;
         break label$14;
        }
        if (!(!$813($3) | HEAPU8[$1_1 + 2 | 0] != 36)) {
         $8_1 = $843($2_1, HEAPU8[$1_1 + 1 | 0] + -48 | 0);
         $4_1 = $1_1 + 3 | 0;
         break label$14;
        }
        $8_1 = HEAP32[$2_1 >> 2];
        $2_1 = $2_1 + 4 | 0;
        $4_1 = $1_1 + 1 | 0;
       }
       $16_1 = 0;
       $1_1 = 0;
       if ($813(HEAPU8[$4_1 | 0])) {
        while (1) {
         $1_1 = (HEAPU8[$4_1 | 0] + Math_imul($1_1, 10) | 0) + -48 | 0;
         $3 = HEAPU8[$4_1 + 1 | 0];
         $4_1 = $4_1 + 1 | 0;
         if ($813($3)) {
          continue
         }
         break;
        }
       }
       $6_1 = HEAPU8[$4_1 | 0];
       $3 = $4_1;
       label$25 : {
        if (($6_1 | 0) != 109) {
         break label$25
        }
        $11_1 = 0;
        $16_1 = ($8_1 | 0) != 0;
        $6_1 = HEAPU8[$4_1 + 1 | 0];
        $15_1 = 0;
        $3 = $4_1 + 1 | 0;
       }
       $5_1 = ($6_1 & 255) + -65 | 0;
       if ($5_1 >>> 0 > 57) {
        break label$5
       }
       $4_1 = $3 + 1 | 0;
       $6_1 = 3;
       label$26 : {
        label$27 : {
         switch ($5_1 - 1 | 0) {
         case 38:
          $5_1 = $3 + 2 | 0;
          $3 = HEAPU8[$3 + 1 | 0] == 104;
          $4_1 = $3 ? $5_1 : $4_1;
          $6_1 = $3 ? -2 : -1;
          break label$26;
         case 42:
          $5_1 = $3 + 2 | 0;
          $3 = HEAPU8[$3 + 1 | 0] == 108;
          $4_1 = $3 ? $5_1 : $4_1;
          $6_1 = $3 ? 3 : 1;
          break label$26;
         case 50:
         case 56:
          $6_1 = 1;
          break label$26;
         case 10:
          $6_1 = 2;
          break label$26;
         case 40:
          break label$26;
         case 0:
         case 2:
         case 6:
         case 7:
         case 8:
         case 9:
         case 11:
         case 12:
         case 13:
         case 14:
         case 15:
         case 16:
         case 18:
         case 19:
         case 20:
         case 21:
         case 23:
         case 24:
         case 26:
         case 27:
         case 28:
         case 29:
         case 30:
         case 32:
         case 41:
         case 43:
         case 47:
         case 48:
         case 52:
         case 53:
         case 55:
          break label$5;
         default:
          break label$27;
         };
        }
        $6_1 = 0;
        $4_1 = $3;
       }
       $3 = HEAPU8[$4_1 | 0];
       $5_1 = ($3 & 47) == 3;
       $17_1 = $5_1 ? 1 : $6_1;
       $13_1 = $5_1 ? $3 | 32 : $3;
       label$32 : {
        if (($13_1 | 0) == 91) {
         break label$32
        }
        label$33 : {
         if (($13_1 | 0) != 110) {
          if (($13_1 | 0) != 99) {
           break label$33
          }
          $1_1 = ($1_1 | 0) > 1 ? $1_1 : 1;
          break label$32;
         }
         $844($8_1, $17_1, $10_1, $12_1);
         break label$6;
        }
        $811($0, 0, 0);
        while (1) {
         $3 = HEAP32[$0 + 4 >> 2];
         label$36 : {
          if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
           HEAP32[$9_1 >> 2] = $3 + 1;
           $3 = HEAPU8[$3 | 0];
           break label$36;
          }
          $3 = $812($0);
         }
         if ($810($3)) {
          continue
         }
         break;
        };
        label$38 : {
         if (!HEAP32[$0 + 104 >> 2]) {
          $3 = HEAP32[$9_1 >> 2];
          break label$38;
         }
         $3 = HEAP32[$9_1 >> 2] + -1 | 0;
         HEAP32[$9_1 >> 2] = $3;
        }
        $5_1 = $3 - HEAP32[$0 + 8 >> 2] | 0;
        $14_1 = $5_1;
        $12_1 = $12_1 + HEAP32[$0 + 124 >> 2] | 0;
        $3 = $10_1 + HEAP32[$0 + 120 >> 2] | 0;
        if ($3 >>> 0 < $10_1 >>> 0) {
         $12_1 = $12_1 + 1 | 0
        }
        $10_1 = $12_1 + ($5_1 >> 31) | 0;
        $6_1 = $10_1 + 1 | 0;
        $5_1 = $10_1;
        $10_1 = $3 + $14_1 | 0;
        $12_1 = $10_1 >>> 0 < $3 >>> 0 ? $6_1 : $5_1;
       }
       $3 = $1_1 >> 31;
       $19_1 = $3;
       $20 = $1_1;
       $811($0, $1_1, $3);
       $5_1 = HEAP32[$0 + 4 >> 2];
       $3 = HEAP32[$0 + 104 >> 2];
       label$40 : {
        if ($5_1 >>> 0 < $3 >>> 0) {
         HEAP32[$9_1 >> 2] = $5_1 + 1;
         break label$40;
        }
        if (($812($0) | 0) < 0) {
         break label$5
        }
        $3 = HEAP32[$0 + 104 >> 2];
       }
       if ($3) {
        HEAP32[$9_1 >> 2] = HEAP32[$9_1 >> 2] + -1
       }
       label$43 : {
        label$44 : {
         $3 = $13_1 + -88 | 0;
         if ($3 >>> 0 > 32) {
          $1_1 = $13_1 + -65 | 0;
          if ($1_1 >>> 0 > 6 | !(1 << $1_1 & 113)) {
           break label$43
          }
          break label$44;
         }
         $6_1 = 16;
         label$46 : {
          label$47 : {
           label$48 : {
            switch ($3 - 1 | 0) {
            case 16:
             $6_1 = 0;
             break label$47;
            case 11:
            case 28:
             $6_1 = 10;
             break label$47;
            case 0:
            case 1:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 9:
            case 15:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 24:
            case 25:
            case 27:
            case 29:
            case 30:
             break label$43;
            case 8:
            case 12:
            case 13:
            case 14:
             break label$44;
            case 2:
            case 10:
            case 26:
             break label$46;
            case 22:
             break label$48;
            default:
             break label$47;
            };
           }
           $6_1 = 8;
          }
          $1_1 = $816($0, $6_1, 0, -1, -1);
          $3 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
          if (HEAP32[$0 + 120 >> 2] == (0 - $3 | 0) & HEAP32[$0 + 124 >> 2] == (0 - (($3 >> 31) + (0 < $3 >>> 0) | 0) | 0)) {
           break label$3
          }
          if (!(!$8_1 | ($13_1 | 0) != 112)) {
           HEAP32[$8_1 >> 2] = $1_1;
           break label$43;
          }
          $844($8_1, $17_1, $1_1, i64toi32_i32$HIGH_BITS);
          break label$43;
         }
         label$52 : {
          if (($13_1 | 16) == 115) {
           $1779($7_1 + 32 | 0, -1, 257);
           HEAP8[$7_1 + 32 | 0] = 0;
           if (($13_1 | 0) != 115) {
            break label$52
           }
           HEAP8[$7_1 + 65 | 0] = 0;
           HEAP8[$7_1 + 46 | 0] = 0;
           HEAP16[$7_1 + 42 >> 1] = 0;
           HEAP16[$7_1 + 44 >> 1] = 0;
           break label$52;
          }
          $3 = HEAPU8[$4_1 + 1 | 0];
          $5_1 = ($3 | 0) == 94;
          $1779($7_1 + 32 | 0, $5_1, 257);
          HEAP8[$7_1 + 32 | 0] = 0;
          $14_1 = $5_1 ? $4_1 + 2 | 0 : $4_1 + 1 | 0;
          label$54 : {
           label$55 : {
            label$56 : {
             $4_1 = HEAPU8[($5_1 ? 2 : 1) + $4_1 | 0];
             if (($4_1 | 0) != 45) {
              if (($4_1 | 0) == 93) {
               break label$56
              }
              $6_1 = ($3 | 0) != 94;
              $4_1 = $14_1;
              break label$54;
             }
             $6_1 = ($3 | 0) != 94;
             HEAP8[$7_1 + 78 | 0] = $6_1;
             break label$55;
            }
            $6_1 = ($3 | 0) != 94;
            HEAP8[$7_1 + 126 | 0] = $6_1;
           }
           $4_1 = $14_1 + 1 | 0;
          }
          while (1) {
           $3 = HEAPU8[$4_1 | 0];
           label$59 : {
            if (($3 | 0) != 45) {
             if (!$3) {
              break label$5
             }
             if (($3 | 0) != 93) {
              break label$59
             }
             break label$52;
            }
            $3 = 45;
            $5_1 = HEAPU8[$4_1 + 1 | 0];
            if (!$5_1 | ($5_1 | 0) == 93) {
             break label$59
            }
            $14_1 = $4_1 + 1 | 0;
            $4_1 = HEAPU8[$4_1 + -1 | 0];
            label$61 : {
             if ($4_1 >>> 0 >= $5_1 >>> 0) {
              $3 = $5_1;
              break label$61;
             }
             while (1) {
              $4_1 = $4_1 + 1 | 0;
              HEAP8[$4_1 + ($7_1 + 32 | 0) | 0] = $6_1;
              $3 = HEAPU8[$14_1 | 0];
              if ($4_1 >>> 0 < $3 >>> 0) {
               continue
              }
              break;
             };
            }
            $4_1 = $14_1;
           }
           HEAP8[($3 + $7_1 | 0) + 33 | 0] = $6_1;
           $4_1 = $4_1 + 1 | 0;
           continue;
          };
         }
         $5_1 = ($13_1 | 0) == 99;
         $6_1 = $5_1 ? $1_1 + 1 | 0 : 31;
         label$64 : {
          label$65 : {
           $14_1 = ($17_1 | 0) != 1;
           label$66 : {
            if (!$14_1) {
             $3 = $8_1;
             if ($16_1) {
              $3 = $1768($6_1 << 2);
              if (!$3) {
               break label$64
              }
             }
             HEAP32[$7_1 + 296 >> 2] = 0;
             HEAP32[$7_1 + 300 >> 2] = 0;
             $1_1 = 0;
             while (1) {
              $15_1 = $3;
              label$70 : {
               while (1) {
                $3 = HEAP32[$0 + 4 >> 2];
                label$72 : {
                 if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
                  HEAP32[$9_1 >> 2] = $3 + 1;
                  $3 = HEAPU8[$3 | 0];
                  break label$72;
                 }
                 $3 = $812($0);
                }
                if (!HEAPU8[($3 + $7_1 | 0) + 33 | 0]) {
                 break label$70
                }
                HEAP8[$7_1 + 27 | 0] = $3;
                $3 = $818($7_1 + 28 | 0, $7_1 + 27 | 0, 1, $7_1 + 296 | 0);
                if (($3 | 0) == -2) {
                 continue
                }
                if (($3 | 0) == -1) {
                 break label$65
                }
                if ($15_1) {
                 HEAP32[($1_1 << 2) + $15_1 >> 2] = HEAP32[$7_1 + 28 >> 2];
                 $1_1 = $1_1 + 1 | 0;
                }
                if (!$16_1 | ($1_1 | 0) != ($6_1 | 0)) {
                 continue
                }
                break;
               };
               $6_1 = $6_1 << 1 | 1;
               $3 = $1770($15_1, $6_1 << 2);
               if ($3) {
                continue
               }
               break label$65;
              }
              break;
             };
             $3 = $7_1 + 296 | 0;
             $11_1 = 1;
             __inlined_func$820 : {
              if (!$3) {
               break __inlined_func$820
              }
              $11_1 = !HEAP32[$3 >> 2];
             }
             if (!$11_1) {
              break label$65
             }
             $11_1 = 0;
             break label$66;
            }
            if ($16_1) {
             $1_1 = 0;
             $3 = $1768($6_1);
             if (!$3) {
              break label$64
             }
             while (1) {
              $11_1 = $3;
              while (1) {
               $3 = HEAP32[$0 + 4 >> 2];
               label$78 : {
                if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
                 HEAP32[$9_1 >> 2] = $3 + 1;
                 $3 = HEAPU8[$3 | 0];
                 break label$78;
                }
                $3 = $812($0);
               }
               if (!HEAPU8[($3 + $7_1 | 0) + 33 | 0]) {
                $15_1 = 0;
                break label$66;
               }
               HEAP8[$1_1 + $11_1 | 0] = $3;
               $1_1 = $1_1 + 1 | 0;
               if (($6_1 | 0) != ($1_1 | 0)) {
                continue
               }
               break;
              };
              $15_1 = 0;
              $6_1 = $6_1 << 1 | 1;
              $3 = $1770($11_1, $6_1);
              if ($3) {
               continue
              }
              break;
             };
             break label$5;
            }
            $1_1 = 0;
            if ($8_1) {
             while (1) {
              $3 = HEAP32[$0 + 4 >> 2];
              label$83 : {
               if ($3 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
                HEAP32[$9_1 >> 2] = $3 + 1;
                $3 = HEAPU8[$3 | 0];
                break label$83;
               }
               $3 = $812($0);
              }
              if (HEAPU8[($3 + $7_1 | 0) + 33 | 0]) {
               HEAP8[$1_1 + $8_1 | 0] = $3;
               $1_1 = $1_1 + 1 | 0;
               continue;
              } else {
               $15_1 = 0;
               $11_1 = $8_1;
               break label$66;
              }
             }
            }
            while (1) {
             $1_1 = HEAP32[$0 + 4 >> 2];
             label$88 : {
              if ($1_1 >>> 0 < HEAPU32[$0 + 104 >> 2]) {
               HEAP32[$9_1 >> 2] = $1_1 + 1;
               $1_1 = HEAPU8[$1_1 | 0];
               break label$88;
              }
              $1_1 = $812($0);
             }
             if (HEAPU8[($1_1 + $7_1 | 0) + 33 | 0]) {
              continue
             }
             break;
            };
            $11_1 = 0;
            $15_1 = 0;
            $1_1 = 0;
           }
           label$90 : {
            if (!HEAP32[$0 + 104 >> 2]) {
             $3 = HEAP32[$9_1 >> 2];
             break label$90;
            }
            $3 = HEAP32[$9_1 >> 2] + -1 | 0;
            HEAP32[$9_1 >> 2] = $3;
           }
           $3 = $3 - HEAP32[$0 + 8 >> 2] | 0;
           $6_1 = $3;
           $13_1 = $3 + HEAP32[$0 + 120 >> 2] | 0;
           $3 = HEAP32[$0 + 124 >> 2] + ($3 >> 31) | 0;
           $3 = $13_1 >>> 0 < $6_1 >>> 0 ? $3 + 1 | 0 : $3;
           if (!($13_1 | $3) | ($5_1 ? ($13_1 | 0) != ($20 | 0) | ($3 | 0) != ($19_1 | 0) : 0)) {
            break label$3
           }
           label$92 : {
            if (!$16_1) {
             break label$92
            }
            if (!$14_1) {
             HEAP32[$8_1 >> 2] = $15_1;
             break label$92;
            }
            HEAP32[$8_1 >> 2] = $11_1;
           }
           if ($5_1) {
            break label$43
           }
           if ($15_1) {
            HEAP32[($1_1 << 2) + $15_1 >> 2] = 0
           }
           if (!$11_1) {
            $11_1 = 0;
            break label$43;
           }
           HEAP8[$1_1 + $11_1 | 0] = 0;
           break label$43;
          }
          $11_1 = 0;
          break label$5;
         }
         $11_1 = 0;
         $15_1 = 0;
         break label$5;
        }
        $837($7_1, $0, $17_1, 0);
        $1_1 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
        $3 = $1_1;
        if (HEAP32[$0 + 120 >> 2] == (0 - $3 | 0) & HEAP32[$0 + 124 >> 2] == (0 - (($3 >> 31) + (0 < $3 >>> 0) | 0) | 0)) {
         break label$3
        }
        if (!$8_1 | $17_1 >>> 0 > 2) {
         break label$43
        }
        $1_1 = HEAP32[$7_1 + 8 >> 2];
        $3 = HEAP32[$7_1 + 12 >> 2];
        $5_1 = HEAP32[$7_1 >> 2];
        $14_1 = HEAP32[$7_1 + 4 >> 2];
        label$96 : {
         switch ($17_1 - 1 | 0) {
         default:
          (wasm2js_i32$0 = $8_1, wasm2js_f32$0 = $841($5_1, $14_1, $1_1, $3)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
          break label$43;
         case 0:
          (wasm2js_i32$0 = $8_1, wasm2js_f64$0 = $835($5_1, $14_1, $1_1, $3)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
          break label$43;
         case 1:
          break label$96;
         };
        }
        HEAP32[$8_1 >> 2] = $5_1;
        HEAP32[$8_1 + 4 >> 2] = $14_1;
        HEAP32[$8_1 + 8 >> 2] = $1_1;
        HEAP32[$8_1 + 12 >> 2] = $3;
       }
       $1_1 = HEAP32[$0 + 4 >> 2] - HEAP32[$0 + 8 >> 2] | 0;
       $3 = $1_1;
       $5_1 = $3 >> 31;
       $12_1 = $12_1 + HEAP32[$0 + 124 >> 2] | 0;
       $1_1 = $10_1 + HEAP32[$0 + 120 >> 2] | 0;
       if ($1_1 >>> 0 < $10_1 >>> 0) {
        $12_1 = $12_1 + 1 | 0
       }
       $10_1 = $1_1 + $3 | 0;
       $3 = $5_1 + $12_1 | 0;
       $12_1 = $10_1 >>> 0 < $1_1 >>> 0 ? $3 + 1 | 0 : $3;
       $18 = (($8_1 | 0) != 0) + $18 | 0;
      }
      $1_1 = $4_1 + 1 | 0;
      $4_1 = HEAPU8[$4_1 + 1 | 0];
      if ($4_1) {
       continue
      }
      break label$2;
     }
     break;
    };
    $18 = $18 ? $18 : -1;
   }
   if (!$16_1) {
    break label$2
   }
   $1769($11_1);
   $1769($15_1);
  }
  global$0 = $7_1 + 304 | 0;
  return $18;
 }
 
 function $843($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[$2_1 + 12 >> 2] = $0;
  $0 = (($1_1 << 2) - ((($1_1 | 0) != 0) << 2) | 0) + $0 | 0;
  HEAP32[$2_1 + 8 >> 2] = $0 + 4;
  return HEAP32[$0 >> 2];
 }
 
 function $844($0, $1_1, $2_1, $3) {
  label$1 : {
   if (!$0) {
    break label$1
   }
   $1_1 = $1_1 + 2 | 0;
   if ($1_1 >>> 0 > 5) {
    break label$1
   }
   label$2 : {
    switch ($1_1 - 1 | 0) {
    default:
     HEAP8[$0 | 0] = $2_1;
     return;
    case 0:
     HEAP16[$0 >> 1] = $2_1;
     return;
    case 1:
    case 2:
     HEAP32[$0 >> 2] = $2_1;
     return;
    case 3:
     break label$1;
    case 4:
     break label$2;
    };
   }
   HEAP32[$0 >> 2] = $2_1;
   HEAP32[$0 + 4 >> 2] = $3;
  }
 }
 
 function $845($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = ($1_1 | 0) != 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!$1_1 | !($0 & 3)) {
       break label$4
      }
      while (1) {
       if (!HEAPU8[$0 | 0]) {
        break label$3
       }
       $0 = $0 + 1 | 0;
       $1_1 = $1_1 + -1 | 0;
       $2_1 = ($1_1 | 0) != 0;
       if (!$1_1) {
        break label$4
       }
       if ($0 & 3) {
        continue
       }
       break;
      };
     }
     if (!$2_1) {
      break label$2
     }
    }
    if (!HEAPU8[$0 | 0]) {
     break label$1
    }
    label$6 : {
     if ($1_1 >>> 0 >= 4) {
      $3 = $1_1 + -4 | 0;
      $2_1 = $3 & 3;
      $3 = (($3 & -4) + $0 | 0) + 4 | 0;
      while (1) {
       $4_1 = HEAP32[$0 >> 2];
       if (($4_1 ^ -1) & $4_1 + -16843009 & -2139062144) {
        break label$6
       }
       $0 = $0 + 4 | 0;
       $1_1 = $1_1 + -4 | 0;
       if ($1_1 >>> 0 > 3) {
        continue
       }
       break;
      };
      $1_1 = $2_1;
      $0 = $3;
     }
     if (!$1_1) {
      break label$2
     }
    }
    while (1) {
     if (!HEAPU8[$0 | 0]) {
      break label$1
     }
     $0 = $0 + 1 | 0;
     $1_1 = $1_1 + -1 | 0;
     if ($1_1) {
      continue
     }
     break;
    };
   }
   return 0;
  }
  return $0;
 }
 
 function $846($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = HEAP32[$0 + 84 >> 2];
  $3 = $2_1 + 256 | 0;
  $5_1 = $845($4_1, $3);
  $3 = $5_1 ? $5_1 - $4_1 | 0 : $3;
  $2_1 = $3 >>> 0 < $2_1 >>> 0 ? $3 : $2_1;
  $1778($1_1, $4_1, $2_1);
  $1_1 = $4_1 + $3 | 0;
  HEAP32[$0 + 84 >> 2] = $1_1;
  HEAP32[$0 + 8 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = $2_1 + $4_1;
  return $2_1;
 }
 
 function $847($0, $1_1, $2_1) {
  var $3 = 0;
  $3 = global$0 - 144 | 0;
  global$0 = $3;
  $3 = $1779($3, 0, 144);
  HEAP32[$3 + 76 >> 2] = -1;
  HEAP32[$3 + 44 >> 2] = $0;
  HEAP32[$3 + 32 >> 2] = 165;
  HEAP32[$3 + 84 >> 2] = $0;
  $0 = $842($3, $1_1, $2_1);
  global$0 = $3 + 144 | 0;
  return $0;
 }
 
 function $848($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $846($0, $1_1, $2_1) | 0;
 }
 
 function $849($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = HEAPU8[$0 | 0];
  $3 = HEAPU8[$1_1 | 0];
  label$1 : {
   if (!$2_1 | ($2_1 | 0) != ($3 | 0)) {
    break label$1
   }
   while (1) {
    $3 = HEAPU8[$1_1 + 1 | 0];
    $2_1 = HEAPU8[$0 + 1 | 0];
    if (!$2_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0 = $0 + 1 | 0;
    if (($2_1 | 0) == ($3 | 0)) {
     continue
    }
    break;
   };
  }
  return $2_1 - $3 | 0;
 }
 
 function $850() {
  var $0 = 0, $1_1 = 0, $2_1 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  label$1 : {
   if (fimport$11($0 + 12 | 0, $0 + 8 | 0)) {
    break label$1
   }
   $1_1 = $1768((HEAP32[$0 + 12 >> 2] << 2) + 4 | 0);
   HEAP32[6019] = $1_1;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    $1_1 = $1768(HEAP32[$0 + 8 >> 2]);
    if ($1_1) {
     $2_1 = HEAP32[6019];
     if ($2_1) {
      break label$2
     }
    }
    HEAP32[6019] = 0;
    break label$1;
   }
   HEAP32[(HEAP32[$0 + 12 >> 2] << 2) + $2_1 >> 2] = 0;
   if (!fimport$12(HEAP32[6019], $1_1 | 0)) {
    break label$1
   }
   HEAP32[6019] = 0;
  }
  global$0 = $0 + 16 | 0;
 }
 
 function $851($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  label$1 : {
   $3 = $1_1 & 255;
   if ($3) {
    if ($0 & 3) {
     while (1) {
      $2_1 = HEAPU8[$0 | 0];
      if (!$2_1 | ($2_1 | 0) == ($1_1 & 255)) {
       break label$1
      }
      $0 = $0 + 1 | 0;
      if ($0 & 3) {
       continue
      }
      break;
     }
    }
    $2_1 = HEAP32[$0 >> 2];
    label$5 : {
     if (($2_1 ^ -1) & $2_1 + -16843009 & -2139062144) {
      break label$5
     }
     $3 = Math_imul($3, 16843009);
     while (1) {
      $2_1 = $2_1 ^ $3;
      if (($2_1 ^ -1) & $2_1 + -16843009 & -2139062144) {
       break label$5
      }
      $2_1 = HEAP32[$0 + 4 >> 2];
      $0 = $0 + 4 | 0;
      if (!($2_1 + -16843009 & ($2_1 ^ -1) & -2139062144)) {
       continue
      }
      break;
     };
    }
    while (1) {
     $2_1 = $0;
     $3 = HEAPU8[$2_1 | 0];
     if ($3) {
      $0 = $2_1 + 1 | 0;
      if (($3 | 0) != ($1_1 & 255)) {
       continue
      }
     }
     break;
    };
    return $2_1;
   }
   return $644($0) + $0 | 0;
  }
  return $0;
 }
 
 function $853($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  if (!$2_1) {
   return 0
  }
  $3 = HEAPU8[$0 | 0];
  label$2 : {
   if (!$3) {
    break label$2
   }
   while (1) {
    label$4 : {
     $4_1 = HEAPU8[$1_1 | 0];
     if (($4_1 | 0) != ($3 | 0)) {
      break label$4
     }
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1 | !$4_1) {
      break label$4
     }
     $1_1 = $1_1 + 1 | 0;
     $3 = HEAPU8[$0 + 1 | 0];
     $0 = $0 + 1 | 0;
     if ($3) {
      continue
     }
     break label$2;
    }
    break;
   };
   $5_1 = $3;
  }
  return ($5_1 & 255) - HEAPU8[$1_1 | 0] | 0;
 }
 
 function $854($0) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = $644($0);
  label$1 : {
   label$2 : {
    if (!HEAP32[6019] | !HEAPU8[$0 | 0]) {
     break label$2
    }
    $1_1 = $851($0, 61);
    if (HEAPU8[$1_1 | 0] == 61 ? $1_1 : 0) {
     break label$2
    }
    $1_1 = HEAP32[HEAP32[6019] >> 2];
    if (!$1_1) {
     break label$2
    }
    while (1) {
     label$4 : {
      $3 = $853($0, $1_1, $4_1);
      $1_1 = HEAP32[6019];
      if (!$3) {
       $3 = HEAP32[$1_1 + ($2_1 << 2) >> 2];
       $5_1 = $3 + $4_1 | 0;
       if (HEAPU8[$5_1 | 0] == 61) {
        break label$4
       }
      }
      $2_1 = $2_1 + 1 | 0;
      $1_1 = HEAP32[$1_1 + ($2_1 << 2) >> 2];
      if ($1_1) {
       continue
      }
      break label$1;
     }
     break;
    };
    if (!$3) {
     break label$1
    }
    $2_1 = $5_1 + 1 | 0;
   }
   return $2_1;
  }
  return 0;
 }
 
 function $855($0) {
  if ($0 >>> 0 >= 4294963201) {
   HEAP32[5216] = 0 - $0;
   $0 = -1;
  }
  return $0;
 }
 
 function $856($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  HEAP32[$2_1 >> 2] = $0;
  $855(fimport$14(91, $2_1 | 0) | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $857($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 272 | 0;
  global$0 = $4_1;
  label$1 : {
   if (HEAPU8[$1_1 | 0]) {
    break label$1
   }
   $1_1 = $854(6608);
   if (HEAPU8[$1_1 | 0] ? $1_1 : 0) {
    break label$1
   }
   $1_1 = $854(Math_imul($0, 12) + 6624 | 0);
   if (HEAPU8[$1_1 | 0] ? $1_1 : 0) {
    break label$1
   }
   $1_1 = $854(6696);
   if (HEAPU8[$1_1 | 0] ? $1_1 : 0) {
    break label$1
   }
   $1_1 = 6701;
  }
  label$5 : {
   while (1) {
    $3 = HEAPU8[$1_1 + $2_1 | 0];
    if (!(!$3 | ($3 | 0) == 47)) {
     $5_1 = 15;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != 15) {
      continue
     }
     break label$5;
    }
    break;
   };
   $5_1 = $2_1;
  }
  $3 = 6701;
  label$8 : {
   label$9 : {
    $2_1 = HEAPU8[$1_1 | 0];
    label$10 : {
     label$11 : {
      if (!(HEAPU8[$1_1 + $5_1 | 0] | ($2_1 | 0) == 46)) {
       $3 = $1_1;
       if (($2_1 | 0) != 67) {
        break label$11
       }
      }
      if (!HEAPU8[$3 + 1 | 0]) {
       break label$10
      }
     }
     if (!$849($3, 6701)) {
      break label$10
     }
     if ($849($3, 6709)) {
      break label$9
     }
    }
    if (!$0) {
     $2_1 = 6532;
     if (HEAPU8[$3 + 1 | 0] == 46) {
      break label$8
     }
    }
    $2_1 = 0;
    break label$8;
   }
   $2_1 = HEAP32[6022];
   if ($2_1) {
    while (1) {
     if (!$849($3, $2_1 + 8 | 0)) {
      break label$8
     }
     $2_1 = HEAP32[$2_1 + 24 >> 2];
     if ($2_1) {
      continue
     }
     break;
    }
   }
   fimport$9(24080);
   $2_1 = HEAP32[6022];
   if ($2_1) {
    while (1) {
     if (!$849($3, $2_1 + 8 | 0)) {
      fimport$10(24080);
      break label$8;
     }
     $2_1 = HEAP32[$2_1 + 24 >> 2];
     if ($2_1) {
      continue
     }
     break;
    }
   }
   $1_1 = 0;
   label$19 : {
    label$20 : {
     label$21 : {
      if (HEAP32[6004]) {
       break label$21
      }
      $2_1 = $854(6715);
      if (!$2_1 | !HEAPU8[$2_1 | 0]) {
       break label$21
      }
      $9_1 = $5_1 + 1 | 0;
      $10_1 = 254 - $5_1 | 0;
      while (1) {
       $7_1 = $851($2_1, 58);
       $6_1 = HEAPU8[$7_1 | 0];
       $8_1 = ($7_1 - $2_1 | 0) - (($6_1 | 0) != 0) | 0;
       if ($8_1 >>> 0 < $10_1 >>> 0) {
        $1778($4_1 + 16 | 0, $2_1, $8_1);
        $2_1 = ($4_1 + 16 | 0) + $8_1 | 0;
        HEAP8[$2_1 | 0] = 47;
        $1778($2_1 + 1 | 0, $3, $5_1);
        HEAP8[$4_1 + 16 + ($8_1 + $9_1) | 0] = 0;
        $6_1 = fimport$13($4_1 + 16 | 0, $4_1 + 12 | 0) | 0;
        if ($6_1) {
         $2_1 = $1768(28);
         if ($2_1) {
          break label$20
         }
         $856($6_1, HEAP32[$4_1 + 12 >> 2]);
         break label$21;
        }
        $6_1 = HEAPU8[$7_1 | 0];
       }
       $2_1 = $7_1 + (($6_1 | 0) != 0) | 0;
       if (HEAPU8[$2_1 | 0]) {
        continue
       }
       break;
      };
     }
     $2_1 = $1768(28);
     if (!$2_1) {
      break label$19
     }
     $1_1 = HEAP32[1634];
     HEAP32[$2_1 >> 2] = HEAP32[1633];
     HEAP32[$2_1 + 4 >> 2] = $1_1;
     $1_1 = $2_1 + 8 | 0;
     $1778($1_1, $3, $5_1);
     HEAP8[$1_1 + $5_1 | 0] = 0;
     HEAP32[$2_1 + 24 >> 2] = HEAP32[6022];
     HEAP32[6022] = $2_1;
     $1_1 = $2_1;
     break label$19;
    }
    HEAP32[$2_1 >> 2] = $6_1;
    HEAP32[$2_1 + 4 >> 2] = HEAP32[$4_1 + 12 >> 2];
    $1_1 = $2_1 + 8 | 0;
    $1778($1_1, $3, $5_1);
    HEAP8[$1_1 + $5_1 | 0] = 0;
    HEAP32[$2_1 + 24 >> 2] = HEAP32[6022];
    HEAP32[6022] = $2_1;
    $1_1 = $2_1;
   }
   fimport$10(24080);
   $2_1 = $0 | $1_1 ? $1_1 : 6532;
  }
  global$0 = $4_1 + 272 | 0;
  return $2_1;
 }
 
 function $858($0) {
  return ($0 | 0) != 0 & ($0 | 0) != 6560 & ($0 | 0) != 6584;
 }
 
 function $859() {
  var $0 = 0, $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($858(0)) {
     while (1) {
      if (2147483647 >>> $0 & 1) {
       (wasm2js_i32$0 = $0 << 2, wasm2js_i32$1 = $857($0, 11573)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1
      }
      $0 = $0 + 1 | 0;
      if (($0 | 0) != 6) {
       continue
      }
      break;
     };
     break label$2;
    }
    while (1) {
     $5_1 = ($2_1 + 8 | 0) + ($0 << 2) | 0;
     $1_1 = 1 << $0 & 2147483647;
     $3 = HEAP32[$0 << 2 >> 2];
     label$7 : {
      if (!($1_1 | 1)) {
       break label$7
      }
      $3 = $857($0, $1_1 ? 11573 : 6728);
     }
     $1_1 = $3;
     HEAP32[$5_1 >> 2] = $1_1;
     $4_1 = (($1_1 | 0) != 0) + $4_1 | 0;
     $0 = $0 + 1 | 0;
     if (($0 | 0) != 6) {
      continue
     }
     break;
    };
    if ($4_1 >>> 0 > 1) {
     break label$2
    }
    $0 = 6560;
    if ($4_1 - 1) {
     break label$1
    }
    if (HEAP32[$2_1 + 8 >> 2] != 6532) {
     break label$2
    }
    $0 = 6584;
    break label$1;
   }
   $0 = 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0;
 }
 
 function $860($0, $1_1) {
  label$1 : {
   if ($0) {
    if ($1_1 >>> 0 <= 127) {
     break label$1
    }
    label$3 : {
     if (!HEAP32[HEAP32[5196] >> 2]) {
      if (($1_1 & -128) == 57216) {
       break label$1
      }
      break label$3;
     }
     if ($1_1 >>> 0 <= 2047) {
      HEAP8[$0 + 1 | 0] = $1_1 & 63 | 128;
      HEAP8[$0 | 0] = $1_1 >>> 6 | 192;
      return 2;
     }
     if (!(($1_1 & -8192) != 57344 ? $1_1 >>> 0 >= 55296 : 0)) {
      HEAP8[$0 + 2 | 0] = $1_1 & 63 | 128;
      HEAP8[$0 | 0] = $1_1 >>> 12 | 224;
      HEAP8[$0 + 1 | 0] = $1_1 >>> 6 & 63 | 128;
      return 3;
     }
     if ($1_1 + -65536 >>> 0 <= 1048575) {
      HEAP8[$0 + 3 | 0] = $1_1 & 63 | 128;
      HEAP8[$0 | 0] = $1_1 >>> 18 | 240;
      HEAP8[$0 + 2 | 0] = $1_1 >>> 6 & 63 | 128;
      HEAP8[$0 + 1 | 0] = $1_1 >>> 12 & 63 | 128;
      return 4;
     }
    }
    HEAP32[5216] = 25;
    $0 = -1;
   } else {
    $0 = 1
   }
   return $0;
  }
  HEAP8[$0 | 0] = $1_1;
  return 1;
 }
 
 function $861($0, $1_1) {
  if (!$0) {
   return 0
  }
  return $860($0, $1_1);
 }
 
 function $862($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  wasm2js_scratch_store_f64(+$0);
  $2_1 = wasm2js_scratch_load_i32(1) | 0;
  $3 = wasm2js_scratch_load_i32(0) | 0;
  $4_1 = $2_1;
  $2_1 = $2_1 >>> 20 & 2047;
  if (($2_1 | 0) != 2047) {
   if (!$2_1) {
    $2_1 = $1_1;
    if ($0 == 0.0) {
     $1_1 = 0
    } else {
     $0 = $862($0 * 18446744073709551615.0, $1_1);
     $1_1 = HEAP32[$1_1 >> 2] + -64 | 0;
    }
    HEAP32[$2_1 >> 2] = $1_1;
    return $0;
   }
   HEAP32[$1_1 >> 2] = $2_1 + -1022;
   wasm2js_scratch_store_i32(0, $3 | 0);
   wasm2js_scratch_store_i32(1, $4_1 & -2146435073 | 1071644672);
   $0 = +wasm2js_scratch_load_f64();
  }
  return $0;
 }
 
 function $863($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 208 | 0;
  global$0 = $3;
  HEAP32[$3 + 204 >> 2] = $2_1;
  $2_1 = 0;
  $1779($3 + 160 | 0, 0, 40);
  HEAP32[$3 + 200 >> 2] = HEAP32[$3 + 204 >> 2];
  label$1 : {
   if (($864(0, $1_1, $3 + 200 | 0, $3 + 80 | 0, $3 + 160 | 0) | 0) < 0) {
    $1_1 = -1;
    break label$1;
   }
   $2_1 = HEAP32[$0 + 76 >> 2] >= 0 ? 1 : $2_1;
   $4_1 = HEAP32[$0 >> 2];
   if (HEAP8[$0 + 74 | 0] <= 0) {
    HEAP32[$0 >> 2] = $4_1 & -33
   }
   $6_1 = $4_1 & 32;
   label$5 : {
    if (HEAP32[$0 + 48 >> 2]) {
     $5_1 = $864($0, $1_1, $3 + 200 | 0, $3 + 80 | 0, $3 + 160 | 0);
     break label$5;
    }
    HEAP32[$0 + 48 >> 2] = 80;
    HEAP32[$0 + 16 >> 2] = $3 + 80;
    HEAP32[$0 + 28 >> 2] = $3;
    HEAP32[$0 + 20 >> 2] = $3;
    $4_1 = HEAP32[$0 + 44 >> 2];
    HEAP32[$0 + 44 >> 2] = $3;
    $1_1 = $864($0, $1_1, $3 + 200 | 0, $3 + 80 | 0, $3 + 160 | 0);
    $5_1 = $1_1;
    if (!$4_1) {
     break label$5
    }
    FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, 0, 0) | 0;
    HEAP32[$0 + 48 >> 2] = 0;
    HEAP32[$0 + 44 >> 2] = $4_1;
    HEAP32[$0 + 28 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    $4_1 = HEAP32[$0 + 20 >> 2];
    HEAP32[$0 + 20 >> 2] = 0;
    $5_1 = $4_1 ? $1_1 : -1;
   }
   $1_1 = $5_1;
   $5_1 = $0;
   $0 = HEAP32[$0 >> 2];
   HEAP32[$5_1 >> 2] = $0 | $6_1;
   $1_1 = $0 & 32 ? -1 : $1_1;
   if (!$2_1) {
    break label$1
   }
  }
  global$0 = $3 + 208 | 0;
  return $1_1;
 }
 
 function $864($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18 = 0, $19_1 = 0;
  $5_1 = global$0 - 80 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 76 >> 2] = $1_1;
  $19_1 = $5_1 + 55 | 0;
  $17_1 = $5_1 + 56 | 0;
  $1_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($13_1 | 0) < 0) {
      break label$3
     }
     if (($1_1 | 0) > (2147483647 - $13_1 | 0)) {
      HEAP32[5216] = 61;
      $13_1 = -1;
      break label$3;
     }
     $13_1 = $1_1 + $13_1 | 0;
    }
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          label$11 : {
           label$12 : {
            label$13 : {
             label$14 : {
              label$15 : {
               label$16 : {
                label$17 : {
                 label$18 : {
                  $10_1 = HEAP32[$5_1 + 76 >> 2];
                  $1_1 = $10_1;
                  $7_1 = HEAPU8[$1_1 | 0];
                  if ($7_1) {
                   while (1) {
                    label$21 : {
                     label$22 : {
                      $6_1 = $7_1 & 255;
                      label$23 : {
                       if (!$6_1) {
                        $7_1 = $1_1;
                        break label$23;
                       }
                       if (($6_1 | 0) != 37) {
                        break label$22
                       }
                       $7_1 = $1_1;
                       while (1) {
                        if (HEAPU8[$1_1 + 1 | 0] != 37) {
                         break label$23
                        }
                        $6_1 = $1_1 + 2 | 0;
                        HEAP32[$5_1 + 76 >> 2] = $6_1;
                        $7_1 = $7_1 + 1 | 0;
                        $9_1 = HEAPU8[$1_1 + 2 | 0];
                        $1_1 = $6_1;
                        if (($9_1 | 0) == 37) {
                         continue
                        }
                        break;
                       };
                      }
                      $1_1 = $7_1 - $10_1 | 0;
                      if ($0) {
                       $865($0, $10_1, $1_1)
                      }
                      if ($1_1) {
                       continue label$2
                      }
                      $14_1 = -1;
                      $6_1 = $5_1;
                      $7_1 = !$813(HEAP8[HEAP32[$5_1 + 76 >> 2] + 1 | 0]);
                      $1_1 = HEAP32[$5_1 + 76 >> 2];
                      if ($7_1 | HEAPU8[$1_1 + 2 | 0] != 36) {
                       $7_1 = 1
                      } else {
                       $14_1 = HEAP8[$1_1 + 1 | 0] + -48 | 0;
                       $18 = 1;
                       $7_1 = 3;
                      }
                      $1_1 = $7_1 + $1_1 | 0;
                      HEAP32[$6_1 + 76 >> 2] = $1_1;
                      $7_1 = 0;
                      $15_1 = HEAP8[$1_1 | 0];
                      $9_1 = $15_1 + -32 | 0;
                      label$28 : {
                       if ($9_1 >>> 0 > 31) {
                        $6_1 = $1_1;
                        break label$28;
                       }
                       $6_1 = $1_1;
                       $8_1 = 1 << $9_1;
                       if (!($8_1 & 75913)) {
                        break label$28
                       }
                       while (1) {
                        $6_1 = $1_1 + 1 | 0;
                        HEAP32[$5_1 + 76 >> 2] = $6_1;
                        $7_1 = $7_1 | $8_1;
                        $15_1 = HEAP8[$1_1 + 1 | 0];
                        $9_1 = $15_1 + -32 | 0;
                        if ($9_1 >>> 0 > 31) {
                         break label$28
                        }
                        $1_1 = $6_1;
                        $8_1 = 1 << $9_1;
                        if ($8_1 & 75913) {
                         continue
                        }
                        break;
                       };
                      }
                      label$31 : {
                       if (($15_1 | 0) == 42) {
                        $9_1 = $5_1;
                        label$33 : {
                         label$34 : {
                          if (!$813(HEAP8[$6_1 + 1 | 0])) {
                           break label$34
                          }
                          $1_1 = HEAP32[$5_1 + 76 >> 2];
                          if (HEAPU8[$1_1 + 2 | 0] != 36) {
                           break label$34
                          }
                          HEAP32[((HEAP8[$1_1 + 1 | 0] << 2) + $4_1 | 0) + -192 >> 2] = 10;
                          $11_1 = HEAP32[((HEAP8[$1_1 + 1 | 0] << 3) + $3 | 0) + -384 >> 2];
                          $18 = 1;
                          $1_1 = $1_1 + 3 | 0;
                          break label$33;
                         }
                         if ($18) {
                          break label$18
                         }
                         $18 = 0;
                         $11_1 = 0;
                         if ($0) {
                          $1_1 = HEAP32[$2_1 >> 2];
                          HEAP32[$2_1 >> 2] = $1_1 + 4;
                          $11_1 = HEAP32[$1_1 >> 2];
                         }
                         $1_1 = HEAP32[$5_1 + 76 >> 2] + 1 | 0;
                        }
                        HEAP32[$9_1 + 76 >> 2] = $1_1;
                        if (($11_1 | 0) > -1) {
                         break label$31
                        }
                        $11_1 = 0 - $11_1 | 0;
                        $7_1 = $7_1 | 8192;
                        break label$31;
                       }
                       $11_1 = $866($5_1 + 76 | 0);
                       if (($11_1 | 0) < 0) {
                        break label$18
                       }
                       $1_1 = HEAP32[$5_1 + 76 >> 2];
                      }
                      $8_1 = -1;
                      label$36 : {
                       if (HEAPU8[$1_1 | 0] != 46) {
                        break label$36
                       }
                       if (HEAPU8[$1_1 + 1 | 0] == 42) {
                        label$38 : {
                         if (!$813(HEAP8[$1_1 + 2 | 0])) {
                          break label$38
                         }
                         $1_1 = HEAP32[$5_1 + 76 >> 2];
                         if (HEAPU8[$1_1 + 3 | 0] != 36) {
                          break label$38
                         }
                         HEAP32[((HEAP8[$1_1 + 2 | 0] << 2) + $4_1 | 0) + -192 >> 2] = 10;
                         $8_1 = HEAP32[((HEAP8[$1_1 + 2 | 0] << 3) + $3 | 0) + -384 >> 2];
                         $1_1 = $1_1 + 4 | 0;
                         HEAP32[$5_1 + 76 >> 2] = $1_1;
                         break label$36;
                        }
                        if ($18) {
                         break label$18
                        }
                        if ($0) {
                         $1_1 = HEAP32[$2_1 >> 2];
                         HEAP32[$2_1 >> 2] = $1_1 + 4;
                         $8_1 = HEAP32[$1_1 >> 2];
                        } else {
                         $8_1 = 0
                        }
                        $1_1 = HEAP32[$5_1 + 76 >> 2] + 2 | 0;
                        HEAP32[$5_1 + 76 >> 2] = $1_1;
                        break label$36;
                       }
                       HEAP32[$5_1 + 76 >> 2] = $1_1 + 1;
                       $8_1 = $866($5_1 + 76 | 0);
                       $1_1 = HEAP32[$5_1 + 76 >> 2];
                      }
                      $6_1 = 0;
                      while (1) {
                       $16_1 = $6_1;
                       $12_1 = -1;
                       if (HEAP8[$1_1 | 0] + -65 >>> 0 > 57) {
                        break label$1
                       }
                       $15_1 = $1_1 + 1 | 0;
                       HEAP32[$5_1 + 76 >> 2] = $15_1;
                       $6_1 = HEAP8[$1_1 | 0];
                       $1_1 = $15_1;
                       $6_1 = HEAPU8[($6_1 + Math_imul($16_1, 58) | 0) + 6687 | 0];
                       if ($6_1 + -1 >>> 0 < 8) {
                        continue
                       }
                       break;
                      };
                      if (!$6_1) {
                       break label$1
                      }
                      label$42 : {
                       label$43 : {
                        label$44 : {
                         if (($6_1 | 0) == 19) {
                          if (($14_1 | 0) <= -1) {
                           break label$44
                          }
                          break label$1;
                         }
                         if (($14_1 | 0) < 0) {
                          break label$43
                         }
                         HEAP32[($14_1 << 2) + $4_1 >> 2] = $6_1;
                         $6_1 = ($14_1 << 3) + $3 | 0;
                         $1_1 = HEAP32[$6_1 + 4 >> 2];
                         HEAP32[$5_1 + 64 >> 2] = HEAP32[$6_1 >> 2];
                         HEAP32[$5_1 + 68 >> 2] = $1_1;
                        }
                        $1_1 = 0;
                        if (!$0) {
                         continue label$2
                        }
                        break label$42;
                       }
                       if (!$0) {
                        break label$5
                       }
                       $867($5_1 - -64 | 0, $6_1, $2_1);
                       $15_1 = HEAP32[$5_1 + 76 >> 2];
                      }
                      $9_1 = $7_1 & -65537;
                      $7_1 = $7_1 & 8192 ? $9_1 : $7_1;
                      $12_1 = 0;
                      $14_1 = 6729;
                      $6_1 = $17_1;
                      $1_1 = HEAP8[$15_1 + -1 | 0];
                      $1_1 = $16_1 ? (($1_1 & 15) == 3 ? $1_1 & -33 : $1_1) : $1_1;
                      $15_1 = $1_1 + -88 | 0;
                      if ($15_1 >>> 0 <= 32) {
                       break label$21
                      }
                      label$46 : {
                       label$47 : {
                        label$48 : {
                         label$49 : {
                          $9_1 = $1_1 + -65 | 0;
                          if ($9_1 >>> 0 > 6) {
                           if (($1_1 | 0) != 83) {
                            break label$6
                           }
                           if (!$8_1) {
                            break label$49
                           }
                           $6_1 = HEAP32[$5_1 + 64 >> 2];
                           break label$47;
                          }
                          switch ($9_1 - 1 | 0) {
                          case 1:
                           break label$48;
                          case 0:
                          case 2:
                           break label$6;
                          default:
                           break label$17;
                          };
                         }
                         $1_1 = 0;
                         $868($0, 32, $11_1, 0, $7_1);
                         break label$46;
                        }
                        HEAP32[$5_1 + 12 >> 2] = 0;
                        HEAP32[$5_1 + 8 >> 2] = HEAP32[$5_1 + 64 >> 2];
                        HEAP32[$5_1 + 64 >> 2] = $5_1 + 8;
                        $8_1 = -1;
                        $6_1 = $5_1 + 8 | 0;
                       }
                       $1_1 = 0;
                       label$51 : {
                        while (1) {
                         $9_1 = HEAP32[$6_1 >> 2];
                         if (!$9_1) {
                          break label$51
                         }
                         $10_1 = $861($5_1 + 4 | 0, $9_1);
                         $9_1 = ($10_1 | 0) < 0;
                         if (!($9_1 | $10_1 >>> 0 > $8_1 - $1_1 >>> 0)) {
                          $6_1 = $6_1 + 4 | 0;
                          $1_1 = $1_1 + $10_1 | 0;
                          if ($8_1 >>> 0 > $1_1 >>> 0) {
                           continue
                          }
                          break label$51;
                         }
                         break;
                        };
                        $12_1 = -1;
                        if ($9_1) {
                         break label$1
                        }
                       }
                       $868($0, 32, $11_1, $1_1, $7_1);
                       if (!$1_1) {
                        $1_1 = 0;
                        break label$46;
                       }
                       $8_1 = 0;
                       $6_1 = HEAP32[$5_1 + 64 >> 2];
                       while (1) {
                        $9_1 = HEAP32[$6_1 >> 2];
                        if (!$9_1) {
                         break label$46
                        }
                        $9_1 = $861($5_1 + 4 | 0, $9_1);
                        $8_1 = $9_1 + $8_1 | 0;
                        if (($8_1 | 0) > ($1_1 | 0)) {
                         break label$46
                        }
                        $865($0, $5_1 + 4 | 0, $9_1);
                        $6_1 = $6_1 + 4 | 0;
                        if ($8_1 >>> 0 < $1_1 >>> 0) {
                         continue
                        }
                        break;
                       };
                      }
                      $868($0, 32, $11_1, $1_1, $7_1 ^ 8192);
                      $1_1 = ($11_1 | 0) > ($1_1 | 0) ? $11_1 : $1_1;
                      continue label$2;
                     }
                     $6_1 = $1_1 + 1 | 0;
                     HEAP32[$5_1 + 76 >> 2] = $6_1;
                     $7_1 = HEAPU8[$1_1 + 1 | 0];
                     $1_1 = $6_1;
                     continue;
                    }
                    break;
                   };
                   switch ($15_1 - 1 | 0) {
                   case 21:
                    break label$10;
                   case 23:
                    break label$12;
                   case 22:
                    break label$13;
                   case 11:
                   case 16:
                    break label$14;
                   case 10:
                    break label$15;
                   case 26:
                    break label$16;
                   case 8:
                   case 12:
                   case 13:
                   case 14:
                    break label$17;
                   case 0:
                   case 1:
                   case 2:
                   case 3:
                   case 4:
                   case 5:
                   case 6:
                   case 7:
                   case 9:
                   case 15:
                   case 17:
                   case 18:
                   case 19:
                   case 20:
                   case 24:
                   case 25:
                   case 27:
                   case 29:
                   case 30:
                    break label$6;
                   case 28:
                    break label$9;
                   default:
                    break label$11;
                   };
                  }
                  $12_1 = $13_1;
                  if ($0) {
                   break label$1
                  }
                  if (!$18) {
                   break label$5
                  }
                  $1_1 = 1;
                  while (1) {
                   $0 = HEAP32[($1_1 << 2) + $4_1 >> 2];
                   if ($0) {
                    $867(($1_1 << 3) + $3 | 0, $0, $2_1);
                    $12_1 = 1;
                    $1_1 = $1_1 + 1 | 0;
                    if (($1_1 | 0) != 10) {
                     continue
                    }
                    break label$1;
                   }
                   break;
                  };
                  $12_1 = 1;
                  if ($1_1 >>> 0 >= 10) {
                   break label$1
                  }
                  while (1) {
                   if (HEAP32[($1_1 << 2) + $4_1 >> 2]) {
                    break label$18
                   }
                   $0 = $1_1 >>> 0 > 8;
                   $1_1 = $1_1 + 1 | 0;
                   if (!$0) {
                    continue
                   }
                   break;
                  };
                  break label$1;
                 }
                 $12_1 = -1;
                 break label$1;
                }
                $1_1 = FUNCTION_TABLE[166]($0, HEAPF64[$5_1 + 64 >> 3], $11_1, $8_1, $7_1, $1_1) | 0;
                continue;
               }
               $1_1 = HEAP32[$5_1 + 64 >> 2];
               $10_1 = $1_1 ? $1_1 : 6739;
               $1_1 = $845($10_1, $8_1);
               $6_1 = $1_1 ? $1_1 : $8_1 + $10_1 | 0;
               $7_1 = $9_1;
               $8_1 = $1_1 ? $1_1 - $10_1 | 0 : $8_1;
               break label$6;
              }
              HEAP8[$5_1 + 55 | 0] = HEAP32[$5_1 + 64 >> 2];
              $8_1 = 1;
              $10_1 = $19_1;
              $7_1 = $9_1;
              break label$6;
             }
             $9_1 = HEAP32[$5_1 + 68 >> 2];
             $1_1 = $9_1;
             $6_1 = HEAP32[$5_1 + 64 >> 2];
             if (($1_1 | 0) < -1 ? 1 : ($1_1 | 0) <= -1 ? ($6_1 >>> 0 > 4294967295 ? 0 : 1) : 0) {
              $1_1 = 0 - ($1_1 + (0 < $6_1 >>> 0) | 0) | 0;
              $6_1 = 0 - $6_1 | 0;
              HEAP32[$5_1 + 64 >> 2] = $6_1;
              HEAP32[$5_1 + 68 >> 2] = $1_1;
              $12_1 = 1;
              $14_1 = 6729;
              break label$8;
             }
             if ($7_1 & 2048) {
              $12_1 = 1;
              $14_1 = 6730;
              break label$8;
             }
             $12_1 = $7_1 & 1;
             $14_1 = $12_1 ? 6731 : 6729;
             break label$8;
            }
            $10_1 = $869(HEAP32[$5_1 + 64 >> 2], HEAP32[$5_1 + 68 >> 2], $17_1);
            if (!($7_1 & 8)) {
             break label$7
            }
            $1_1 = $17_1 - $10_1 | 0;
            $8_1 = ($8_1 | 0) > ($1_1 | 0) ? $8_1 : $1_1 + 1 | 0;
            break label$7;
           }
           $8_1 = $8_1 >>> 0 > 8 ? $8_1 : 8;
           $7_1 = $7_1 | 8;
           $1_1 = 120;
          }
          $10_1 = $870(HEAP32[$5_1 + 64 >> 2], HEAP32[$5_1 + 68 >> 2], $17_1, $1_1 & 32);
          if (!($7_1 & 8) | !(HEAP32[$5_1 + 64 >> 2] | HEAP32[$5_1 + 68 >> 2])) {
           break label$7
          }
          $14_1 = ($1_1 >>> 4 | 0) + 6729 | 0;
          $12_1 = 2;
          break label$7;
         }
         $1_1 = 0;
         $6_1 = $16_1 & 255;
         if ($6_1 >>> 0 > 7) {
          continue
         }
         label$61 : {
          switch ($6_1 - 1 | 0) {
          default:
           HEAP32[HEAP32[$5_1 + 64 >> 2] >> 2] = $13_1;
           continue;
          case 0:
           HEAP32[HEAP32[$5_1 + 64 >> 2] >> 2] = $13_1;
           continue;
          case 1:
           $6_1 = HEAP32[$5_1 + 64 >> 2];
           HEAP32[$6_1 >> 2] = $13_1;
           HEAP32[$6_1 + 4 >> 2] = $13_1 >> 31;
           continue;
          case 2:
           HEAP16[HEAP32[$5_1 + 64 >> 2] >> 1] = $13_1;
           continue;
          case 3:
           HEAP8[HEAP32[$5_1 + 64 >> 2]] = $13_1;
           continue;
          case 5:
           HEAP32[HEAP32[$5_1 + 64 >> 2] >> 2] = $13_1;
           continue;
          case 4:
           continue;
          case 6:
           break label$61;
          };
         }
         $6_1 = HEAP32[$5_1 + 64 >> 2];
         HEAP32[$6_1 >> 2] = $13_1;
         HEAP32[$6_1 + 4 >> 2] = $13_1 >> 31;
         continue;
        }
        $6_1 = HEAP32[$5_1 + 64 >> 2];
        $1_1 = HEAP32[$5_1 + 68 >> 2];
        $14_1 = 6729;
       }
       $10_1 = $871($6_1, $1_1, $17_1);
      }
      $7_1 = ($8_1 | 0) > -1 ? $7_1 & -65537 : $7_1;
      $6_1 = HEAP32[$5_1 + 64 >> 2];
      $1_1 = HEAP32[$5_1 + 68 >> 2];
      label$68 : {
       if (!(!!($6_1 | $1_1) | $8_1)) {
        $10_1 = $17_1;
        $8_1 = 0;
        break label$68;
       }
       $1_1 = !($1_1 | $6_1) + ($17_1 - $10_1 | 0) | 0;
       $8_1 = ($8_1 | 0) > ($1_1 | 0) ? $8_1 : $1_1;
      }
      $6_1 = $17_1;
     }
     $9_1 = $6_1 - $10_1 | 0;
     $6_1 = ($8_1 | 0) < ($9_1 | 0) ? $9_1 : $8_1;
     $16_1 = $6_1 + $12_1 | 0;
     $1_1 = ($11_1 | 0) < ($16_1 | 0) ? $16_1 : $11_1;
     $868($0, 32, $1_1, $16_1, $7_1);
     $865($0, $14_1, $12_1);
     $868($0, 48, $1_1, $16_1, $7_1 ^ 65536);
     $868($0, 48, $6_1, $9_1, 0);
     $865($0, $10_1, $9_1);
     $868($0, 32, $1_1, $16_1, $7_1 ^ 8192);
     continue;
    }
    break;
   };
   $12_1 = 0;
  }
  global$0 = $5_1 + 80 | 0;
  return $12_1;
 }
 
 function $865($0, $1_1, $2_1) {
  if (!(HEAPU8[$0 | 0] & 32)) {
   $761($1_1, $2_1, $0)
  }
 }
 
 function $866($0) {
  var $1_1 = 0, $2_1 = 0, $3 = 0;
  if ($813(HEAP8[HEAP32[$0 >> 2]])) {
   while (1) {
    $1_1 = HEAP32[$0 >> 2];
    $3 = HEAP8[$1_1 | 0];
    HEAP32[$0 >> 2] = $1_1 + 1;
    $2_1 = (Math_imul($2_1, 10) + $3 | 0) + -48 | 0;
    if ($813(HEAP8[$1_1 + 1 | 0])) {
     continue
    }
    break;
   }
  }
  return $2_1;
 }
 
 function $867($0, $1_1, $2_1) {
  folding_inner2 : {
   folding_inner1 : {
    folding_inner0 : {
     label$1 : {
      if ($1_1 >>> 0 > 20) {
       break label$1
      }
      $1_1 = $1_1 + -9 | 0;
      if ($1_1 >>> 0 > 9) {
       break label$1
      }
      label$2 : {
       switch ($1_1 - 1 | 0) {
       default:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
        return;
       case 0:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        $1_1 = HEAP32[$1_1 >> 2];
        HEAP32[$0 >> 2] = $1_1;
        break folding_inner1;
       case 1:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
        break folding_inner2;
       case 3:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        $1_1 = HEAP16[$1_1 >> 1];
        HEAP32[$0 >> 2] = $1_1;
        break folding_inner1;
       case 4:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        HEAP32[$0 >> 2] = HEAPU16[$1_1 >> 1];
        break folding_inner2;
       case 5:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        $1_1 = HEAP8[$1_1 | 0];
        HEAP32[$0 >> 2] = $1_1;
        break folding_inner1;
       case 6:
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        HEAP32[$0 >> 2] = HEAPU8[$1_1 | 0];
        break folding_inner2;
       case 2:
       case 7:
        break folding_inner0;
       case 8:
        break label$2;
       };
      }
      FUNCTION_TABLE[167]($0, $2_1);
     }
     return;
    }
    $1_1 = HEAP32[$2_1 >> 2] + 7 & -8;
    HEAP32[$2_1 >> 2] = $1_1 + 8;
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0 + 4 >> 2] = $2_1;
    return;
   }
   HEAP32[$0 + 4 >> 2] = $1_1 >> 31;
   return;
  }
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function $868($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  if (!($4_1 & 73728 | ($2_1 | 0) <= ($3 | 0))) {
   $4_1 = $2_1 - $3 | 0;
   $6_1 = $4_1 >>> 0 < 256;
   $1779($5_1, $1_1, $6_1 ? $4_1 : 256);
   $1_1 = $0;
   $7_1 = $5_1;
   if (!$6_1) {
    $2_1 = $2_1 - $3 | 0;
    while (1) {
     $865($0, $5_1, 256);
     $4_1 = $4_1 + -256 | 0;
     if ($4_1 >>> 0 > 255) {
      continue
     }
     break;
    };
    $4_1 = $2_1 & 255;
   }
   $865($1_1, $7_1, $4_1);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $869($0, $1_1, $2_1) {
  if ($0 | $1_1) {
   while (1) {
    $2_1 = $2_1 + -1 | 0;
    HEAP8[$2_1 | 0] = $0 & 7 | 48;
    $0 = ($1_1 & 7) << 29 | $0 >>> 3;
    $1_1 = $1_1 >>> 3 | 0;
    if ($0 | $1_1) {
     continue
    }
    break;
   }
  }
  return $2_1;
 }
 
 function $870($0, $1_1, $2_1, $3) {
  if ($0 | $1_1) {
   while (1) {
    $2_1 = $2_1 + -1 | 0;
    HEAP8[$2_1 | 0] = HEAPU8[($0 & 15) + 7216 | 0] | $3;
    $0 = ($1_1 & 15) << 28 | $0 >>> 4;
    $1_1 = $1_1 >>> 4 | 0;
    if ($0 | $1_1) {
     continue
    }
    break;
   }
  }
  return $2_1;
 }
 
 function $871($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (($1_1 | 0) == 1 & $0 >>> 0 < 0 | $1_1 >>> 0 < 1) {
    $3 = $0;
    break label$1;
   }
   while (1) {
    $3 = __wasm_i64_udiv($0, $1_1, 10);
    $4_1 = i64toi32_i32$HIGH_BITS;
    $5_1 = $4_1;
    $4_1 = __wasm_i64_mul($3, $4_1, 10, 0);
    $2_1 = $2_1 + -1 | 0;
    HEAP8[$2_1 | 0] = $0 - $4_1 | 48;
    $4_1 = ($1_1 | 0) == 9 & $0 >>> 0 > 4294967295 | $1_1 >>> 0 > 9;
    $0 = $3;
    $1_1 = $5_1;
    if ($4_1) {
     continue
    }
    break;
   };
  }
  if ($3) {
   while (1) {
    $2_1 = $2_1 + -1 | 0;
    $0 = ($3 >>> 0) / 10 | 0;
    HEAP8[$2_1 | 0] = $3 - Math_imul($0, 10) | 48;
    $1_1 = $3 >>> 0 > 9;
    $3 = $0;
    if ($1_1) {
     continue
    }
    break;
   }
  }
  return $2_1;
 }
 
 function $872($0, $1_1, $2_1) {
  return $863($0, $1_1, $2_1);
 }
 
 function $873($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18 = 0.0, $19_1 = 0, $20 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0;
  $10_1 = global$0 - 560 | 0;
  global$0 = $10_1;
  HEAP32[$10_1 + 44 >> 2] = 0;
  $7_1 = $875($1_1);
  $9_1 = i64toi32_i32$HIGH_BITS;
  $6_1 = $9_1;
  label$1 : {
   if (($6_1 | 0) < -1 ? 1 : ($6_1 | 0) <= -1 ? ($7_1 >>> 0 > 4294967295 ? 0 : 1) : 0) {
    $1_1 = -$1_1;
    $875($1_1);
    $6_1 = i64toi32_i32$HIGH_BITS;
    $20 = 1;
    $21_1 = 7232;
    break label$1;
   }
   if ($4_1 & 2048) {
    $20 = 1;
    $21_1 = 7235;
    break label$1;
   }
   $20 = $4_1 & 1;
   $21_1 = $20 ? 7238 : 7233;
  }
  label$4 : {
   if (($6_1 & 2146435072) == 2146435072) {
    $12_1 = $20 + 3 | 0;
    $868($0, 32, $2_1, $12_1, $4_1 & -65537);
    $865($0, $21_1, $20);
    $3 = $5_1 >>> 5 & 1;
    $865($0, $1_1 != $1_1 ? ($3 ? 7259 : 7263) : $3 ? 7251 : 7255, 3);
    break label$4;
   }
   $1_1 = $862($1_1, $10_1 + 44 | 0);
   $1_1 = $1_1 + $1_1;
   if ($1_1 != 0.0) {
    HEAP32[$10_1 + 44 >> 2] = HEAP32[$10_1 + 44 >> 2] + -1
   }
   $17_1 = $10_1 + 16 | 0;
   $22_1 = $5_1 | 32;
   if (($22_1 | 0) == 97) {
    $11_1 = $5_1 & 32;
    $7_1 = $11_1 ? $21_1 + 9 | 0 : $21_1;
    label$8 : {
     if ($3 >>> 0 > 11) {
      break label$8
     }
     $6_1 = 12 - $3 | 0;
     if (!$6_1) {
      break label$8
     }
     $18 = 8.0;
     while (1) {
      $18 = $18 * 16.0;
      $6_1 = $6_1 + -1 | 0;
      if ($6_1) {
       continue
      }
      break;
     };
     if (HEAPU8[$7_1 | 0] == 45) {
      $1_1 = -($18 + (-$1_1 - $18));
      break label$8;
     }
     $1_1 = $1_1 + $18 - $18;
    }
    $9_1 = HEAP32[$10_1 + 44 >> 2];
    $6_1 = $9_1 >> 31;
    $6_1 = $871($6_1 ^ $6_1 + $9_1, 0, $17_1);
    if (($17_1 | 0) == ($6_1 | 0)) {
     HEAP8[$10_1 + 15 | 0] = 48;
     $6_1 = $10_1 + 15 | 0;
    }
    $9_1 = $20 | 2;
    $8_1 = HEAP32[$10_1 + 44 >> 2];
    $14_1 = $6_1 + -2 | 0;
    HEAP8[$14_1 | 0] = $5_1 + 15;
    HEAP8[$6_1 + -1 | 0] = ($8_1 | 0) < 0 ? 45 : 43;
    $21_1 = $4_1 & 8;
    $8_1 = $10_1 + 16 | 0;
    while (1) {
     $5_1 = $8_1;
     $12_1 = $11_1;
     if (Math_abs($1_1) < 2147483648.0) {
      $6_1 = ~~$1_1
     } else {
      $6_1 = -2147483648
     }
     HEAP8[$8_1 | 0] = $12_1 | HEAPU8[$6_1 + 7216 | 0];
     $1_1 = ($1_1 - +($6_1 | 0)) * 16.0;
     $8_1 = $5_1 + 1 | 0;
     if (!(($8_1 - ($10_1 + 16 | 0) | 0) != 1 | ($1_1 == 0.0 ? !(($3 | 0) > 0 | $21_1) : 0))) {
      HEAP8[$5_1 + 1 | 0] = 46;
      $8_1 = $5_1 + 2 | 0;
     }
     if ($1_1 != 0.0) {
      continue
     }
     break;
    };
    $5_1 = $0;
    $6_1 = $2_1;
    if (!$3 | (($8_1 - $10_1 | 0) + -18 | 0) >= ($3 | 0)) {
     $11_1 = (($17_1 - ($10_1 + 16 | 0) | 0) - $14_1 | 0) + $8_1 | 0
    } else {
     $11_1 = (($3 + $17_1 | 0) - $14_1 | 0) + 2 | 0
    }
    $3 = $11_1;
    $12_1 = $3 + $9_1 | 0;
    $868($5_1, 32, $6_1, $12_1, $4_1);
    $865($0, $7_1, $9_1);
    $868($0, 48, $2_1, $12_1, $4_1 ^ 65536);
    $5_1 = $8_1 - ($10_1 + 16 | 0) | 0;
    $865($0, $10_1 + 16 | 0, $5_1);
    $3 = $17_1 - $14_1 | 0;
    $868($0, 48, $11_1 - ($3 + $5_1 | 0) | 0, 0, 0);
    $865($0, $14_1, $3);
    break label$4;
   }
   $6_1 = ($3 | 0) < 0;
   label$19 : {
    if ($1_1 == 0.0) {
     $7_1 = HEAP32[$10_1 + 44 >> 2];
     break label$19;
    }
    $7_1 = HEAP32[$10_1 + 44 >> 2] + -28 | 0;
    HEAP32[$10_1 + 44 >> 2] = $7_1;
    $1_1 = $1_1 * 268435456.0;
   }
   $11_1 = $6_1 ? 6 : $3;
   $14_1 = ($7_1 | 0) < 0 ? $10_1 + 48 | 0 : $10_1 + 336 | 0;
   $9_1 = $14_1;
   while (1) {
    $3 = $9_1;
    if ($1_1 < 4294967296.0 & $1_1 >= 0.0) {
     $6_1 = ~~$1_1 >>> 0
    } else {
     $6_1 = 0
    }
    HEAP32[$3 >> 2] = $6_1;
    $9_1 = $9_1 + 4 | 0;
    $1_1 = ($1_1 - +($6_1 >>> 0)) * 1.0e9;
    if ($1_1 != 0.0) {
     continue
    }
    break;
   };
   label$24 : {
    if (($7_1 | 0) < 1) {
     $6_1 = $9_1;
     $8_1 = $14_1;
     break label$24;
    }
    $8_1 = $14_1;
    while (1) {
     $13_1 = ($7_1 | 0) < 29 ? $7_1 : 29;
     $6_1 = $9_1 + -4 | 0;
     label$27 : {
      if ($6_1 >>> 0 < $8_1 >>> 0) {
       break label$27
      }
      $3 = $13_1;
      $7_1 = 0;
      while (1) {
       $12_1 = $6_1;
       $23_1 = $7_1;
       $16_1 = HEAP32[$6_1 >> 2];
       $15_1 = $3 & 31;
       if (32 <= ($3 & 63) >>> 0) {
        $7_1 = $16_1 << $15_1;
        $16_1 = 0;
       } else {
        $7_1 = (1 << $15_1) - 1 & $16_1 >>> 32 - $15_1;
        $16_1 = $16_1 << $15_1;
       }
       $15_1 = $23_1 + $16_1 | 0;
       $7_1 = $7_1 + $24_1 | 0;
       $7_1 = $15_1 >>> 0 < $16_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
       $7_1 = __wasm_i64_udiv($15_1, $7_1, 1e9);
       $16_1 = $12_1;
       $12_1 = __wasm_i64_mul($7_1, i64toi32_i32$HIGH_BITS, 1e9, 0);
       HEAP32[$16_1 >> 2] = $15_1 - $12_1;
       $6_1 = $6_1 + -4 | 0;
       if ($6_1 >>> 0 >= $8_1 >>> 0) {
        continue
       }
       break;
      };
      if (!$7_1) {
       break label$27
      }
      $8_1 = $8_1 + -4 | 0;
      HEAP32[$8_1 >> 2] = $7_1;
     }
     while (1) {
      $6_1 = $9_1;
      if ($6_1 >>> 0 > $8_1 >>> 0) {
       $9_1 = $6_1 + -4 | 0;
       if (!HEAP32[$9_1 >> 2]) {
        continue
       }
      }
      break;
     };
     $7_1 = HEAP32[$10_1 + 44 >> 2] - $13_1 | 0;
     HEAP32[$10_1 + 44 >> 2] = $7_1;
     $9_1 = $6_1;
     if (($7_1 | 0) > 0) {
      continue
     }
     break;
    };
   }
   if (($7_1 | 0) <= -1) {
    $19_1 = (($11_1 + 25 | 0) / 9 | 0) + 1 | 0;
    $13_1 = ($22_1 | 0) == 102;
    while (1) {
     $3 = ($7_1 | 0) < -9 ? 9 : 0 - $7_1 | 0;
     label$33 : {
      if ($8_1 >>> 0 >= $6_1 >>> 0) {
       $8_1 = HEAP32[$8_1 >> 2] ? $8_1 : $8_1 + 4 | 0;
       break label$33;
      }
      $12_1 = 1e9 >>> $3 | 0;
      $15_1 = -1 << $3 ^ -1;
      $7_1 = 0;
      $9_1 = $8_1;
      while (1) {
       $16_1 = $7_1;
       $7_1 = HEAP32[$9_1 >> 2];
       HEAP32[$9_1 >> 2] = $16_1 + ($7_1 >>> $3 | 0);
       $7_1 = Math_imul($12_1, $7_1 & $15_1);
       $9_1 = $9_1 + 4 | 0;
       if ($9_1 >>> 0 < $6_1 >>> 0) {
        continue
       }
       break;
      };
      $8_1 = HEAP32[$8_1 >> 2] ? $8_1 : $8_1 + 4 | 0;
      if (!$7_1) {
       break label$33
      }
      HEAP32[$6_1 >> 2] = $7_1;
      $6_1 = $6_1 + 4 | 0;
     }
     $7_1 = $3 + HEAP32[$10_1 + 44 >> 2] | 0;
     HEAP32[$10_1 + 44 >> 2] = $7_1;
     $3 = $13_1 ? $14_1 : $8_1;
     $6_1 = $6_1 - $3 >> 2 > ($19_1 | 0) ? $3 + ($19_1 << 2) | 0 : $6_1;
     if (($7_1 | 0) < 0) {
      continue
     }
     break;
    };
   }
   $9_1 = 0;
   label$36 : {
    if ($8_1 >>> 0 >= $6_1 >>> 0) {
     break label$36
    }
    $9_1 = Math_imul($14_1 - $8_1 >> 2, 9);
    $7_1 = 10;
    $3 = HEAP32[$8_1 >> 2];
    if ($3 >>> 0 < 10) {
     break label$36
    }
    while (1) {
     $9_1 = $9_1 + 1 | 0;
     $7_1 = Math_imul($7_1, 10);
     if ($3 >>> 0 >= $7_1 >>> 0) {
      continue
     }
     break;
    };
   }
   $3 = ($11_1 - (($22_1 | 0) == 102 ? 0 : $9_1) | 0) - (($22_1 | 0) == 103 & ($11_1 | 0) != 0) | 0;
   if (($3 | 0) < (Math_imul($6_1 - $14_1 >> 2, 9) + -9 | 0)) {
    $7_1 = $3 + 9216 | 0;
    $12_1 = ($7_1 | 0) / 9 | 0;
    $13_1 = ($14_1 + ($12_1 << 2) | 0) + -4092 | 0;
    $3 = 10;
    $7_1 = $7_1 - Math_imul($12_1, 9) | 0;
    if (($7_1 | 0) <= 7) {
     while (1) {
      $3 = Math_imul($3, 10);
      $12_1 = ($7_1 | 0) < 7;
      $7_1 = $7_1 + 1 | 0;
      if ($12_1) {
       continue
      }
      break;
     }
    }
    $12_1 = HEAP32[$13_1 >> 2];
    $15_1 = ($12_1 >>> 0) / ($3 >>> 0) | 0;
    $19_1 = $13_1 + 4 | 0;
    $7_1 = $12_1 - Math_imul($3, $15_1) | 0;
    label$41 : {
     if ($7_1 ? 0 : ($19_1 | 0) == ($6_1 | 0)) {
      break label$41
     }
     $16_1 = $3 >>> 1 | 0;
     $18 = $7_1 >>> 0 < $16_1 >>> 0 ? .5 : ($6_1 | 0) == ($19_1 | 0) ? (($16_1 | 0) == ($7_1 | 0) ? 1.0 : 1.5) : 1.5;
     $1_1 = $15_1 & 1 ? 9007199254740994.0 : 9007199254740992.0;
     if (!(!$20 | HEAPU8[$21_1 | 0] != 45)) {
      $18 = -$18;
      $1_1 = -$1_1;
     }
     $7_1 = $12_1 - $7_1 | 0;
     HEAP32[$13_1 >> 2] = $7_1;
     if ($1_1 + $18 == $1_1) {
      break label$41
     }
     $3 = $3 + $7_1 | 0;
     HEAP32[$13_1 >> 2] = $3;
     if ($3 >>> 0 >= 1e9) {
      while (1) {
       HEAP32[$13_1 >> 2] = 0;
       $13_1 = $13_1 + -4 | 0;
       if ($13_1 >>> 0 < $8_1 >>> 0) {
        $8_1 = $8_1 + -4 | 0;
        HEAP32[$8_1 >> 2] = 0;
       }
       $3 = HEAP32[$13_1 >> 2] + 1 | 0;
       HEAP32[$13_1 >> 2] = $3;
       if ($3 >>> 0 > 999999999) {
        continue
       }
       break;
      }
     }
     $9_1 = Math_imul($14_1 - $8_1 >> 2, 9);
     $7_1 = 10;
     $3 = HEAP32[$8_1 >> 2];
     if ($3 >>> 0 < 10) {
      break label$41
     }
     while (1) {
      $9_1 = $9_1 + 1 | 0;
      $7_1 = Math_imul($7_1, 10);
      if ($3 >>> 0 >= $7_1 >>> 0) {
       continue
      }
      break;
     };
    }
    $3 = $13_1 + 4 | 0;
    $6_1 = $6_1 >>> 0 > $3 >>> 0 ? $3 : $6_1;
   }
   label$47 : {
    while (1) {
     $7_1 = $6_1;
     $13_1 = 0;
     if ($6_1 >>> 0 <= $8_1 >>> 0) {
      break label$47
     }
     $6_1 = $7_1 + -4 | 0;
     if (!HEAP32[$6_1 >> 2]) {
      continue
     }
     break;
    };
    $13_1 = 1;
   }
   label$49 : {
    if (($22_1 | 0) != 103) {
     $15_1 = $4_1 & 8;
     break label$49;
    }
    $3 = $11_1 ? $11_1 : 1;
    $6_1 = ($3 | 0) > ($9_1 | 0) & ($9_1 | 0) > -5;
    $11_1 = ($6_1 ? $9_1 ^ -1 : -1) + $3 | 0;
    $5_1 = ($6_1 ? -1 : -2) + $5_1 | 0;
    $15_1 = $4_1 & 8;
    if ($15_1) {
     break label$49
    }
    $6_1 = 9;
    label$51 : {
     if (!$13_1) {
      break label$51
     }
     $12_1 = HEAP32[$7_1 + -4 >> 2];
     if (!$12_1) {
      break label$51
     }
     $3 = 10;
     $6_1 = 0;
     if (($12_1 >>> 0) % 10) {
      break label$51
     }
     while (1) {
      $6_1 = $6_1 + 1 | 0;
      $3 = Math_imul($3, 10);
      if (!(($12_1 >>> 0) % ($3 >>> 0))) {
       continue
      }
      break;
     };
    }
    $3 = Math_imul($7_1 - $14_1 >> 2, 9) + -9 | 0;
    if (($5_1 | 32) == 102) {
     $15_1 = 0;
     $3 = $3 - $6_1 | 0;
     $3 = ($3 | 0) > 0 ? $3 : 0;
     $11_1 = ($11_1 | 0) < ($3 | 0) ? $11_1 : $3;
     break label$49;
    }
    $15_1 = 0;
    $3 = ($3 + $9_1 | 0) - $6_1 | 0;
    $3 = ($3 | 0) > 0 ? $3 : 0;
    $11_1 = ($11_1 | 0) < ($3 | 0) ? $11_1 : $3;
   }
   $22_1 = $11_1 | $15_1;
   $16_1 = ($22_1 | 0) != 0;
   $3 = $0;
   $23_1 = $2_1;
   $24_1 = $5_1 | 32;
   $6_1 = ($9_1 | 0) > 0 ? $9_1 : 0;
   label$54 : {
    if (($24_1 | 0) == 102) {
     break label$54
    }
    $6_1 = $9_1 >> 31;
    $6_1 = $871($6_1 + $9_1 ^ $6_1, 0, $17_1);
    if (($17_1 - $6_1 | 0) <= 1) {
     while (1) {
      $6_1 = $6_1 + -1 | 0;
      HEAP8[$6_1 | 0] = 48;
      if (($17_1 - $6_1 | 0) < 2) {
       continue
      }
      break;
     }
    }
    $19_1 = $6_1 + -2 | 0;
    HEAP8[$19_1 | 0] = $5_1;
    HEAP8[$6_1 + -1 | 0] = ($9_1 | 0) < 0 ? 45 : 43;
    $6_1 = $17_1 - $19_1 | 0;
   }
   $12_1 = ($6_1 + ($16_1 + ($11_1 + $20 | 0) | 0) | 0) + 1 | 0;
   $868($3, 32, $23_1, $12_1, $4_1);
   $865($0, $21_1, $20);
   $868($0, 48, $2_1, $12_1, $4_1 ^ 65536);
   label$57 : {
    label$58 : {
     label$59 : {
      if (($24_1 | 0) == 102) {
       $3 = $10_1 + 16 | 8;
       $5_1 = $10_1 + 16 | 9;
       $9_1 = $8_1 >>> 0 > $14_1 >>> 0 ? $14_1 : $8_1;
       $8_1 = $9_1;
       while (1) {
        $6_1 = $871(HEAP32[$8_1 >> 2], 0, $5_1);
        label$62 : {
         if (($8_1 | 0) != ($9_1 | 0)) {
          if ($6_1 >>> 0 <= $10_1 + 16 >>> 0) {
           break label$62
          }
          while (1) {
           $6_1 = $6_1 + -1 | 0;
           HEAP8[$6_1 | 0] = 48;
           if ($6_1 >>> 0 > $10_1 + 16 >>> 0) {
            continue
           }
           break;
          };
          break label$62;
         }
         if (($5_1 | 0) != ($6_1 | 0)) {
          break label$62
         }
         HEAP8[$10_1 + 24 | 0] = 48;
         $6_1 = $3;
        }
        $865($0, $6_1, $5_1 - $6_1 | 0);
        $8_1 = $8_1 + 4 | 0;
        if ($8_1 >>> 0 <= $14_1 >>> 0) {
         continue
        }
        break;
       };
       if ($22_1) {
        $865($0, 7267, 1)
       }
       if (($11_1 | 0) < 1 | $8_1 >>> 0 >= $7_1 >>> 0) {
        break label$59
       }
       while (1) {
        $6_1 = $871(HEAP32[$8_1 >> 2], 0, $5_1);
        if ($6_1 >>> 0 > $10_1 + 16 >>> 0) {
         while (1) {
          $6_1 = $6_1 + -1 | 0;
          HEAP8[$6_1 | 0] = 48;
          if ($6_1 >>> 0 > $10_1 + 16 >>> 0) {
           continue
          }
          break;
         }
        }
        $865($0, $6_1, ($11_1 | 0) < 9 ? $11_1 : 9);
        $6_1 = $11_1 + -9 | 0;
        $8_1 = $8_1 + 4 | 0;
        if ($8_1 >>> 0 >= $7_1 >>> 0) {
         break label$58
        }
        $3 = ($11_1 | 0) > 9;
        $11_1 = $6_1;
        if ($3) {
         continue
        }
        break;
       };
       break label$58;
      }
      label$69 : {
       if (($11_1 | 0) < 0) {
        break label$69
       }
       $14_1 = $13_1 ? $7_1 : $8_1 + 4 | 0;
       $3 = $10_1 + 16 | 8;
       $5_1 = $10_1 + 16 | 9;
       $9_1 = $8_1;
       while (1) {
        $6_1 = $871(HEAP32[$9_1 >> 2], 0, $5_1);
        if (($5_1 | 0) == ($6_1 | 0)) {
         HEAP8[$10_1 + 24 | 0] = 48;
         $6_1 = $3;
        }
        label$72 : {
         if (($8_1 | 0) != ($9_1 | 0)) {
          if ($6_1 >>> 0 <= $10_1 + 16 >>> 0) {
           break label$72
          }
          while (1) {
           $6_1 = $6_1 + -1 | 0;
           HEAP8[$6_1 | 0] = 48;
           if ($6_1 >>> 0 > $10_1 + 16 >>> 0) {
            continue
           }
           break;
          };
          break label$72;
         }
         $865($0, $6_1, 1);
         $6_1 = $6_1 + 1 | 0;
         if (($11_1 | 0) < 1 ? !$15_1 : 0) {
          break label$72
         }
         $865($0, 7267, 1);
        }
        $7_1 = $6_1;
        $6_1 = $5_1 - $6_1 | 0;
        $865($0, $7_1, ($11_1 | 0) > ($6_1 | 0) ? $6_1 : $11_1);
        $11_1 = $11_1 - $6_1 | 0;
        $9_1 = $9_1 + 4 | 0;
        if ($9_1 >>> 0 >= $14_1 >>> 0) {
         break label$69
        }
        if (($11_1 | 0) > -1) {
         continue
        }
        break;
       };
      }
      $868($0, 48, $11_1 + 18 | 0, 18, 0);
      $865($0, $19_1, $17_1 - $19_1 | 0);
      break label$57;
     }
     $6_1 = $11_1;
    }
    $868($0, 48, $6_1 + 9 | 0, 9, 0);
   }
  }
  $868($0, 32, $2_1, $12_1, $4_1 ^ 8192);
  global$0 = $10_1 + 560 | 0;
  return (($12_1 | 0) < ($2_1 | 0) ? $2_1 : $12_1) | 0;
 }
 
 function $874($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $2_1 = $1_1;
  $1_1 = HEAP32[$1_1 >> 2] + 15 & -16;
  HEAP32[$2_1 >> 2] = $1_1 + 16;
  (wasm2js_i32$0 = $0, wasm2js_f64$0 = $835(HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], HEAP32[$1_1 + 8 >> 2], HEAP32[$1_1 + 12 >> 2])), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
 }
 
 function $875($0) {
  var $1_1 = 0, $2_1 = 0;
  wasm2js_scratch_store_f64(+$0);
  $1_1 = wasm2js_scratch_load_i32(1) | 0;
  $2_1 = wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $2_1;
 }
 
 function $876($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $1778($4_1 + 8 | 0, 7272, 144);
  label$1 : {
   label$2 : {
    if ($1_1 + -1 >>> 0 >= 2147483647) {
     if ($1_1) {
      break label$2
     }
     $1_1 = 1;
     $0 = $4_1 + 159 | 0;
    }
    HEAP32[$4_1 + 52 >> 2] = $0;
    HEAP32[$4_1 + 28 >> 2] = $0;
    $5_1 = -2 - $0 | 0;
    $1_1 = $1_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $1_1;
    HEAP32[$4_1 + 56 >> 2] = $1_1;
    $0 = $0 + $1_1 | 0;
    HEAP32[$4_1 + 36 >> 2] = $0;
    HEAP32[$4_1 + 24 >> 2] = $0;
    $0 = $872($4_1 + 8 | 0, $2_1, $3);
    if (!$1_1) {
     break label$1
    }
    $1_1 = HEAP32[$4_1 + 28 >> 2];
    HEAP8[$1_1 - (($1_1 | 0) == HEAP32[$4_1 + 24 >> 2]) | 0] = 0;
    break label$1;
   }
   HEAP32[5216] = 61;
   $0 = -1;
  }
  global$0 = $4_1 + 160 | 0;
  return $0;
 }
 
 function $877($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0;
  $4_1 = HEAP32[$0 + 20 >> 2];
  $3 = HEAP32[$0 + 16 >> 2] - $4_1 | 0;
  $3 = $3 >>> 0 > $2_1 >>> 0 ? $2_1 : $3;
  $1778($4_1, $1_1, $3);
  HEAP32[$0 + 20 >> 2] = $3 + HEAP32[$0 + 20 >> 2];
  return $2_1 | 0;
 }
 
 function $878($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = $2_1;
  HEAP32[$3 + 8 >> 2] = $2_1;
  $4_1 = -1;
  $2_1 = $876(0, 0, $1_1, $2_1);
  label$1 : {
   if (($2_1 | 0) < 0) {
    break label$1
   }
   $5_1 = $0;
   $2_1 = $2_1 + 1 | 0;
   $0 = $1768($2_1);
   HEAP32[$5_1 >> 2] = $0;
   if (!$0) {
    break label$1
   }
   $4_1 = $876($0, $2_1, $1_1, HEAP32[$3 + 12 >> 2]);
  }
  global$0 = $3 + 16 | 0;
  return $4_1;
 }
 
 function $880($0, $1_1) {
  return ($813($0) | 0) != 0 | ($0 | 32) + -97 >>> 0 < 6;
 }
 
 function $881($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $0 = $847($0, 11552, $1_1);
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $882($0, $1_1, $2_1, $3) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $3;
  $0 = $876($0, $1_1, $2_1, $3);
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $885($0) {
  if ($858($0)) {
   $1769($0)
  }
 }
 
 function $886($0) {
  var $1_1 = 0, $2_1 = 0;
  $2_1 = $0;
  while (1) {
   $1_1 = $2_1;
   $2_1 = $1_1 + 4 | 0;
   if (HEAP32[$1_1 >> 2]) {
    continue
   }
   break;
  };
  return $1_1 - $0 >> 2;
 }
 
 function $890($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($0) {
       if ($2_1 >>> 0 >= 4) {
        break label$4
       }
       $3 = $2_1;
       break label$3;
      }
      $2_1 = 0;
      $0 = HEAP32[$1_1 >> 2];
      $3 = HEAP32[$0 >> 2];
      if (!$3) {
       break label$1
      }
      while (1) {
       $5_1 = 1;
       if ($3 >>> 0 >= 128) {
        $6_1 = -1;
        $5_1 = $860($7_1 + 12 | 0, $3);
        if (($5_1 | 0) == -1) {
         break label$1
        }
       }
       $3 = HEAP32[$0 + 4 >> 2];
       $0 = $0 + 4 | 0;
       $2_1 = $2_1 + $5_1 | 0;
       $6_1 = $2_1;
       if ($3) {
        continue
       }
       break;
      };
      break label$1;
     }
     $5_1 = HEAP32[$1_1 >> 2];
     $3 = $2_1;
     while (1) {
      $4_1 = HEAP32[$5_1 >> 2];
      label$10 : {
       if ($4_1 + -1 >>> 0 >= 127) {
        if (!$4_1) {
         HEAP8[$0 | 0] = 0;
         HEAP32[$1_1 >> 2] = 0;
         break label$2;
        }
        $6_1 = -1;
        $4_1 = $860($0, $4_1);
        if (($4_1 | 0) == -1) {
         break label$1
        }
        $3 = $3 - $4_1 | 0;
        $0 = $0 + $4_1 | 0;
        break label$10;
       }
       HEAP8[$0 | 0] = $4_1;
       $3 = $3 + -1 | 0;
       $5_1 = HEAP32[$1_1 >> 2];
       $0 = $0 + 1 | 0;
      }
      $5_1 = $5_1 + 4 | 0;
      HEAP32[$1_1 >> 2] = $5_1;
      if ($3 >>> 0 > 3) {
       continue
      }
      break;
     };
    }
    if ($3) {
     $5_1 = HEAP32[$1_1 >> 2];
     while (1) {
      $4_1 = HEAP32[$5_1 >> 2];
      label$15 : {
       if ($4_1 + -1 >>> 0 >= 127) {
        if (!$4_1) {
         HEAP8[$0 | 0] = 0;
         HEAP32[$1_1 >> 2] = 0;
         break label$2;
        }
        $6_1 = -1;
        $4_1 = $860($7_1 + 12 | 0, $4_1);
        if (($4_1 | 0) == -1) {
         break label$1
        }
        if ($3 >>> 0 < $4_1 >>> 0) {
         break label$2
        }
        $860($0, HEAP32[$5_1 >> 2]);
        $3 = $3 - $4_1 | 0;
        $0 = $0 + $4_1 | 0;
        break label$15;
       }
       HEAP8[$0 | 0] = $4_1;
       $3 = $3 + -1 | 0;
       $5_1 = HEAP32[$1_1 >> 2];
       $0 = $0 + 1 | 0;
      }
      $5_1 = $5_1 + 4 | 0;
      HEAP32[$1_1 >> 2] = $5_1;
      if ($3) {
       continue
      }
      break;
     };
    }
    $6_1 = $2_1;
    break label$1;
   }
   $6_1 = $2_1 - $3 | 0;
  }
  global$0 = $7_1 + 16 | 0;
  return $6_1;
 }
 
 function $891($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2];
  HEAP32[$5_1 + 12 >> 2] = $6_1;
  $7_1 = $0 ? $0 : $5_1 + 16 | 0;
  $3 = $0 ? $3 : 256;
  label$1 : {
   if (!$3 | !$6_1) {
    break label$1
   }
   $4_1 = $3 >>> 0 <= $2_1 >>> 0;
   if (!($4_1 | $2_1 >>> 0 > 32)) {
    break label$1
   }
   while (1) {
    $4_1 = $4_1 ? $3 : $2_1;
    $2_1 = $2_1 - $4_1 | 0;
    $4_1 = $890($7_1, $5_1 + 12 | 0, $4_1);
    if (($4_1 | 0) == -1) {
     $3 = 0;
     $6_1 = HEAP32[$5_1 + 12 >> 2];
     $8_1 = -1;
     break label$1;
    }
    $6_1 = ($5_1 + 16 | 0) == ($7_1 | 0);
    $7_1 = $6_1 ? $7_1 : $4_1 + $7_1 | 0;
    $8_1 = $4_1 + $8_1 | 0;
    $3 = $3 - ($6_1 ? 0 : $4_1) | 0;
    $6_1 = HEAP32[$5_1 + 12 >> 2];
    if (!$3 | !$6_1) {
     break label$1
    }
    $4_1 = $2_1 >>> 0 >= $3 >>> 0;
    if ($4_1 | $2_1 >>> 0 >= 33) {
     continue
    }
    break;
   };
  }
  label$6 : {
   label$7 : {
    if (!$2_1 | (!$6_1 | !$3)) {
     break label$7
    }
    while (1) {
     $9_1 = $860($7_1, HEAP32[$6_1 >> 2]);
     if ($9_1 + 1 >>> 0 <= 1) {
      $4_1 = -1;
      if ($9_1) {
       break label$6
      }
      HEAP32[$5_1 + 12 >> 2] = 0;
      break label$7;
     }
     $6_1 = HEAP32[$5_1 + 12 >> 2] + 4 | 0;
     HEAP32[$5_1 + 12 >> 2] = $6_1;
     $8_1 = $8_1 + $9_1 | 0;
     $3 = $3 - $9_1 | 0;
     if (!$3) {
      break label$7
     }
     $7_1 = $7_1 + $9_1 | 0;
     $4_1 = $8_1;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue
     }
     break;
    };
    break label$6;
   }
   $4_1 = $8_1;
  }
  if ($0) {
   HEAP32[$1_1 >> 2] = HEAP32[$5_1 + 12 >> 2]
  }
  global$0 = $5_1 + 272 | 0;
  return $4_1;
 }
 
 function $892($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $5_1 = HEAP32[$1_1 >> 2];
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if (!$3) {
               break label$12
              }
              $6_1 = HEAP32[$3 >> 2];
              if (!$6_1) {
               break label$12
              }
              if (!$0) {
               $3 = $2_1;
               break label$10;
              }
              HEAP32[$3 >> 2] = 0;
              $3 = $2_1;
              break label$11;
             }
             label$14 : {
              if (!HEAP32[HEAP32[5196] >> 2]) {
               if (!$0) {
                break label$14
               }
               if (!$2_1) {
                break label$1
               }
               $6_1 = $2_1;
               while (1) {
                $3 = HEAP8[$5_1 | 0];
                if ($3) {
                 HEAP32[$0 >> 2] = $3 & 57343;
                 $0 = $0 + 4 | 0;
                 $5_1 = $5_1 + 1 | 0;
                 $6_1 = $6_1 + -1 | 0;
                 if ($6_1) {
                  continue
                 }
                 break label$1;
                }
                break;
               };
               HEAP32[$0 >> 2] = 0;
               HEAP32[$1_1 >> 2] = 0;
               return $2_1 - $6_1 | 0;
              }
              $3 = $2_1;
              if (!$0) {
               break label$9
              }
              $4_1 = $2_1;
              break label$7;
             }
             return $644($5_1);
            }
            $7_1 = 1;
            break label$7;
           }
           $4_1 = 0;
           break label$8;
          }
          $4_1 = 1;
         }
         while (1) {
          if (!$4_1) {
           $4_1 = HEAPU8[$5_1 | 0] >>> 3 | 0;
           if (($4_1 + -16 | $4_1 + ($6_1 >> 26)) >>> 0 > 7) {
            break label$6
           }
           $4_1 = $5_1 + 1 | 0;
           $8_1 = $4_1;
           label$20 : {
            if (!($6_1 & 33554432)) {
             break label$20
            }
            if ((HEAPU8[$4_1 | 0] & 192) != 128) {
             break label$6
            }
            $4_1 = $5_1 + 2 | 0;
            $8_1 = $4_1;
            if (!($6_1 & 524288)) {
             break label$20
            }
            if ((HEAPU8[$4_1 | 0] & 192) != 128) {
             break label$6
            }
            $8_1 = $5_1 + 3 | 0;
           }
           $5_1 = $8_1;
           $3 = $3 + -1 | 0;
           $4_1 = 1;
           continue;
          }
          while (1) {
           $6_1 = HEAPU8[$5_1 | 0];
           label$22 : {
            if ($5_1 & 3 | $6_1 + -1 >>> 0 > 126) {
             break label$22
            }
            $6_1 = HEAP32[$5_1 >> 2];
            if (($6_1 | $6_1 + -16843009) & -2139062144) {
             break label$22
            }
            while (1) {
             $3 = $3 + -4 | 0;
             $6_1 = HEAP32[$5_1 + 4 >> 2];
             $4_1 = $5_1 + 4 | 0;
             $5_1 = $4_1;
             if (!(($6_1 + -16843009 | $6_1) & -2139062144)) {
              continue
             }
             break;
            };
            $5_1 = $4_1;
           }
           $4_1 = $6_1 & 255;
           if ($4_1 + -1 >>> 0 <= 126) {
            $3 = $3 + -1 | 0;
            $5_1 = $5_1 + 1 | 0;
            continue;
           }
           break;
          };
          $4_1 = $4_1 + -194 | 0;
          if ($4_1 >>> 0 > 50) {
           break label$5
          }
          $5_1 = $5_1 + 1 | 0;
          $6_1 = HEAP32[($4_1 << 2) + 6208 >> 2];
          $4_1 = 0;
          continue;
         };
        }
        while (1) {
         if (!$7_1) {
          if (!$4_1) {
           break label$1
          }
          while (1) {
           label$28 : {
            $7_1 = HEAPU8[$5_1 | 0];
            $9_1 = $7_1 + -1 | 0;
            label$29 : {
             label$30 : {
              if ($9_1 >>> 0 > 126) {
               $6_1 = $7_1;
               $3 = $4_1;
               break label$30;
              }
              if ($5_1 & 3 | $4_1 >>> 0 < 5) {
               break label$29
              }
              $3 = ($4_1 - ($4_1 + -5 & -4) | 0) + -4 | 0;
              label$32 : {
               label$33 : {
                while (1) {
                 $6_1 = HEAP32[$5_1 >> 2];
                 if (($6_1 | $6_1 + -16843009) & -2139062144) {
                  break label$33
                 }
                 HEAP32[$0 >> 2] = $6_1 & 255;
                 HEAP32[$0 + 4 >> 2] = HEAPU8[$5_1 + 1 | 0];
                 HEAP32[$0 + 8 >> 2] = HEAPU8[$5_1 + 2 | 0];
                 HEAP32[$0 + 12 >> 2] = HEAPU8[$5_1 + 3 | 0];
                 $0 = $0 + 16 | 0;
                 $5_1 = $5_1 + 4 | 0;
                 $4_1 = $4_1 + -4 | 0;
                 if ($4_1 >>> 0 > 4) {
                  continue
                 }
                 break;
                };
                $6_1 = HEAPU8[$5_1 | 0];
                break label$32;
               }
               $3 = $4_1;
              }
              $7_1 = $6_1 & 255;
              $9_1 = $7_1 + -1 | 0;
             }
             if ($9_1 >>> 0 > 126) {
              break label$28
             }
             $4_1 = $3;
            }
            HEAP32[$0 >> 2] = $7_1;
            $0 = $0 + 4 | 0;
            $5_1 = $5_1 + 1 | 0;
            $4_1 = $4_1 + -1 | 0;
            if ($4_1) {
             continue
            }
            break label$1;
           }
           break;
          };
          $7_1 = $7_1 + -194 | 0;
          if ($7_1 >>> 0 > 50) {
           break label$5
          }
          $5_1 = $5_1 + 1 | 0;
          $6_1 = HEAP32[($7_1 << 2) + 6208 >> 2];
          $7_1 = 1;
          continue;
         }
         $4_1 = HEAPU8[$5_1 | 0];
         $7_1 = $4_1 >>> 3 | 0;
         if (($7_1 + -16 | $7_1 + ($6_1 >> 26)) >>> 0 > 7) {
          break label$6
         }
         label$35 : {
          label$36 : {
           $7_1 = $5_1 + 1 | 0;
           $4_1 = $4_1 + -128 | $6_1 << 6;
           $8_1 = $7_1;
           label$37 : {
            if (($4_1 | 0) > -1) {
             break label$37
            }
            $7_1 = HEAPU8[$7_1 | 0] + -128 | 0;
            if ($7_1 >>> 0 > 63) {
             break label$36
            }
            $9_1 = $5_1 + 2 | 0;
            $4_1 = $7_1 | $4_1 << 6;
            $8_1 = $9_1;
            if (($4_1 | 0) > -1) {
             break label$37
            }
            $7_1 = HEAPU8[$9_1 | 0] + -128 | 0;
            if ($7_1 >>> 0 > 63) {
             break label$36
            }
            $4_1 = $7_1 | $4_1 << 6;
            $8_1 = $5_1 + 3 | 0;
           }
           $5_1 = $8_1;
           HEAP32[$0 >> 2] = $4_1;
           $4_1 = $3 + -1 | 0;
           $0 = $0 + 4 | 0;
           break label$35;
          }
          HEAP32[5216] = 25;
          $5_1 = $5_1 + -1 | 0;
          break label$3;
         }
         $7_1 = 0;
         continue;
        };
       }
       $5_1 = $5_1 + -1 | 0;
       if ($6_1) {
        break label$4
       }
       $6_1 = HEAPU8[$5_1 | 0];
      }
      if ($6_1 & 255) {
       break label$4
      }
      if ($0) {
       HEAP32[$0 >> 2] = 0;
       HEAP32[$1_1 >> 2] = 0;
      }
      return $2_1 - $3 | 0;
     }
     HEAP32[5216] = 25;
     if (!$0) {
      break label$2
     }
    }
    HEAP32[$1_1 >> 2] = $5_1;
   }
   return -1;
  }
  HEAP32[$1_1 >> 2] = $5_1;
  return $2_1;
 }
 
 function $893($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $6_1 = global$0 - 1040 | 0;
  global$0 = $6_1;
  $7_1 = HEAP32[$1_1 >> 2];
  HEAP32[$6_1 + 12 >> 2] = $7_1;
  $8_1 = $0 ? $0 : $6_1 + 16 | 0;
  $3 = $0 ? $3 : 256;
  label$1 : {
   if (!$3 | !$7_1) {
    break label$1
   }
   $5_1 = $2_1 >>> 2 | 0;
   $10_1 = $5_1 >>> 0 >= $3 >>> 0;
   if ($5_1 >>> 0 < $3 >>> 0 ? $2_1 >>> 0 <= 131 : 0) {
    break label$1
   }
   while (1) {
    $5_1 = $10_1 ? $3 : $5_1;
    $2_1 = $2_1 - $5_1 | 0;
    $5_1 = $892($8_1, $6_1 + 12 | 0, $5_1, $4_1);
    if (($5_1 | 0) == -1) {
     $3 = 0;
     $7_1 = HEAP32[$6_1 + 12 >> 2];
     $9_1 = -1;
     break label$1;
    }
    $10_1 = ($6_1 + 16 | 0) == ($8_1 | 0);
    $8_1 = $10_1 ? $8_1 : ($5_1 << 2) + $8_1 | 0;
    $9_1 = $5_1 + $9_1 | 0;
    $3 = $3 - ($10_1 ? 0 : $5_1) | 0;
    $7_1 = HEAP32[$6_1 + 12 >> 2];
    if (!$3 | !$7_1) {
     break label$1
    }
    $5_1 = $2_1 >>> 2 | 0;
    $10_1 = $5_1 >>> 0 >= $3 >>> 0;
    if ($2_1 >>> 0 > 131 | $5_1 >>> 0 >= $3 >>> 0) {
     continue
    }
    break;
   };
  }
  label$4 : {
   label$5 : {
    if (!$2_1 | (!$7_1 | !$3)) {
     break label$5
    }
    while (1) {
     $5_1 = $818($8_1, $7_1, $2_1, $4_1);
     if ($5_1 + 2 >>> 0 <= 2) {
      $2_1 = $5_1 + 1 | 0;
      if ($2_1 >>> 0 <= 1) {
       if ($2_1 - 1) {
        break label$4
       }
       HEAP32[$6_1 + 12 >> 2] = 0;
       break label$5;
      }
      HEAP32[$4_1 >> 2] = 0;
      break label$5;
     }
     $7_1 = HEAP32[$6_1 + 12 >> 2] + $5_1 | 0;
     HEAP32[$6_1 + 12 >> 2] = $7_1;
     $9_1 = $9_1 + 1 | 0;
     $3 = $3 + -1 | 0;
     if (!$3) {
      break label$5
     }
     $8_1 = $8_1 + 4 | 0;
     $2_1 = $2_1 - $5_1 | 0;
     $5_1 = $9_1;
     if ($2_1) {
      continue
     }
     break;
    };
    break label$4;
   }
   $5_1 = $9_1;
  }
  if ($0) {
   HEAP32[$1_1 >> 2] = HEAP32[$6_1 + 12 >> 2]
  }
  global$0 = $6_1 + 1040 | 0;
  return $5_1;
 }
 
 function $897($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[5196];
  if ($0) {
   HEAP32[5196] = ($0 | 0) == -1 ? 24048 : $0
  }
  return ($1_1 | 0) == 24048 ? -1 : $1_1;
 }
 
 function $899($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 144 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 44 >> 2] = $0;
  HEAP32[$5_1 + 4 >> 2] = $0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 76 >> 2] = -1;
  HEAP32[$5_1 + 8 >> 2] = ($0 | 0) < 0 ? -1 : $0 + 2147483647 | 0;
  $811($5_1, 0, 0);
  $2_1 = $816($5_1, $2_1, 1, $3, $4_1);
  $3 = i64toi32_i32$HIGH_BITS;
  if ($1_1) {
   HEAP32[$1_1 >> 2] = ((HEAP32[$5_1 + 4 >> 2] + HEAP32[$5_1 + 120 >> 2] | 0) - HEAP32[$5_1 + 8 >> 2] | 0) + $0
  }
  global$0 = $5_1 + 144 | 0;
  i64toi32_i32$HIGH_BITS = $3;
  return $2_1;
 }
 
 function $901($0, $1_1, $2_1, $3) {
  return $899($0, $1_1, $2_1, -1, -1);
 }
 
 function $902($0, $1_1, $2_1, $3) {
  return $899($0, $1_1, $2_1, 0, -2147483648);
 }
 
 function $903($0, $1_1) {
  var $2_1 = 0, $3 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $904($2_1, $0, $1_1, 0);
  $3 = $841(HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2], HEAP32[$2_1 + 8 >> 2], HEAP32[$2_1 + 12 >> 2]);
  global$0 = $2_1 + 16 | 0;
  return $3;
 }
 
 function $904($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $1779($4_1 + 16 | 0, 0, 144);
  HEAP32[$4_1 + 92 >> 2] = -1;
  HEAP32[$4_1 + 60 >> 2] = $1_1;
  HEAP32[$4_1 + 24 >> 2] = -1;
  HEAP32[$4_1 + 20 >> 2] = $1_1;
  $811($4_1 + 16 | 0, 0, 0);
  $837($4_1, $4_1 + 16 | 0, $3, 1);
  $3 = HEAP32[$4_1 + 8 >> 2];
  $6_1 = HEAP32[$4_1 + 12 >> 2];
  $7_1 = HEAP32[$4_1 >> 2];
  $8_1 = HEAP32[$4_1 + 4 >> 2];
  if ($2_1) {
   $9_1 = $2_1;
   $5_1 = $1_1;
   $1_1 = HEAP32[$4_1 + 20 >> 2] - HEAP32[$4_1 + 24 >> 2] | 0;
   $10_1 = $1_1;
   $2_1 = $1_1 + HEAP32[$4_1 + 136 >> 2] | 0;
   $1_1 = HEAP32[$4_1 + 140 >> 2] + ($1_1 >> 31) | 0;
   $1_1 = $2_1 >>> 0 < $10_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   HEAP32[$9_1 >> 2] = !($1_1 | $2_1) ? $5_1 : $5_1 + $2_1 | 0;
  }
  HEAP32[$0 >> 2] = $7_1;
  HEAP32[$0 + 4 >> 2] = $8_1;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $6_1;
  global$0 = $4_1 + 160 | 0;
 }
 
 function $905($0, $1_1) {
  var $2_1 = 0, $3 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $904($2_1, $0, $1_1, 1);
  $3 = $835(HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2], HEAP32[$2_1 + 8 >> 2], HEAP32[$2_1 + 12 >> 2]);
  global$0 = $2_1 + 16 | 0;
  return $3;
 }
 
 function $906($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $904($3, $1_1, $2_1, 2);
  $1_1 = HEAP32[$3 >> 2];
  $2_1 = HEAP32[$3 + 4 >> 2];
  $4_1 = HEAP32[$3 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $4_1;
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  global$0 = $3 + 16 | 0;
 }
 
 function $909($0, $1_1, $2_1, $3) {
  var $4_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $906($3, $1_1, $2_1);
  $1_1 = HEAP32[$3 >> 2];
  $2_1 = HEAP32[$3 + 4 >> 2];
  $4_1 = HEAP32[$3 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $4_1;
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  global$0 = $3 + 16 | 0;
 }
 
 function $912($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  label$1 : {
   while (1) {
    if (($3 | 0) != ($4_1 | 0)) {
     $0 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     $5_1 = HEAP8[$1_1 | 0];
     $6_1 = HEAP8[$3 | 0];
     if (($5_1 | 0) < ($6_1 | 0)) {
      break label$1
     }
     if (($6_1 | 0) < ($5_1 | 0)) {
      return 1
     } else {
      $3 = $3 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      continue;
     }
    }
    break;
   };
   $0 = ($1_1 | 0) != ($2_1 | 0);
  }
  return $0 | 0;
 }
 
 function $913($0, $1_1, $2_1, $3) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $25($0);
  $915($0, $2_1, $3);
 }
 
 function $915($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $4_1 = $533($1_1, $2_1);
  if ($4_1 >>> 0 <= 4294967279) {
   label$2 : {
    if ($4_1 >>> 0 <= 10) {
     $114($0, $4_1);
     $3 = $0;
     break label$2;
    }
    $6_1 = $116($4_1) + 1 | 0;
    $3 = $118($0, $6_1);
    $120($0, $3);
    $121($0, $6_1);
    $122($0, $4_1);
   }
   while (1) {
    if (($1_1 | 0) != ($2_1 | 0)) {
     $124($3, $1_1);
     $3 = $3 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue;
    }
    break;
   };
   HEAP8[$5_1 + 15 | 0] = 0;
   $124($3, $5_1 + 15 | 0);
   global$0 = $5_1 + 16 | 0;
   return;
  }
  $1591();
  abort();
 }
 
 function $916($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $0 = 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $0 = HEAP8[$1_1 | 0] + ($0 << 4) | 0;
    $3 = $0 & -268435456;
    $0 = ($3 | $3 >>> 24) ^ $0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  return $0 | 0;
 }
 
 function $917($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  label$1 : {
   while (1) {
    if (($3 | 0) != ($4_1 | 0)) {
     $0 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break label$1
     }
     $5_1 = HEAP32[$1_1 >> 2];
     $6_1 = HEAP32[$3 >> 2];
     if (($5_1 | 0) < ($6_1 | 0)) {
      break label$1
     }
     if (($6_1 | 0) < ($5_1 | 0)) {
      return 1
     } else {
      $3 = $3 + 4 | 0;
      $1_1 = $1_1 + 4 | 0;
      continue;
     }
    }
    break;
   };
   $0 = ($1_1 | 0) != ($2_1 | 0);
  }
  return $0 | 0;
 }
 
 function $918($0, $1_1, $2_1, $3) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $25($0);
  $921($0, $2_1, $3);
 }
 
 function $921($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $4_1 = $1478($1_1, $2_1);
  if ($4_1 >>> 0 <= 1073741807) {
   label$2 : {
    if ($4_1 >>> 0 <= 1) {
     $114($0, $4_1);
     $3 = $0;
     break label$2;
    }
    $6_1 = $1533($4_1) + 1 | 0;
    $3 = $1540($6_1);
    $120($0, $3);
    $121($0, $6_1);
    $122($0, $4_1);
   }
   while (1) {
    if (($1_1 | 0) != ($2_1 | 0)) {
     $436($3, $1_1);
     $3 = $3 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue;
    }
    break;
   };
   HEAP32[$5_1 + 12 >> 2] = 0;
   $436($3, $5_1 + 12 | 0);
   global$0 = $5_1 + 16 | 0;
   return;
  }
  $1591();
  abort();
 }
 
 function $922($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $0 = 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $0 = HEAP32[$1_1 >> 2] + ($0 << 4) | 0;
    $3 = $0 & -268435456;
    $0 = ($3 | $3 >>> 24) ^ $0;
    $1_1 = $1_1 + 4 | 0;
    continue;
   }
   break;
  };
  return $0 | 0;
 }
 
 function $923($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 24 >> 2] = $1_1;
  label$1 : {
   if (!(HEAP32[$3 + 4 >> 2] & 1)) {
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1_1, $2_1, $3, $4_1, $6_1) | 0;
    HEAP32[$6_1 + 24 >> 2] = $1_1;
    $0 = HEAP32[$6_1 >> 2];
    if ($0 >>> 0 <= 1) {
     if ($0 - 1) {
      HEAP8[$5_1 | 0] = 0;
      break label$1;
     }
     HEAP8[$5_1 | 0] = 1;
     break label$1;
    }
    HEAP8[$5_1 | 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break label$1;
   }
   $683($6_1, $3);
   $1_1 = $526($6_1);
   $924($6_1);
   $683($6_1, $3);
   $0 = $925($6_1);
   $924($6_1);
   $926($6_1, $0);
   $927($6_1 | 12, $0);
   $3 = $6_1 + 24 | 0;
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = ($928($6_1 + 24 | 0, $2_1, $6_1, $3, $1_1, $4_1, 1) | 0) == ($6_1 | 0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   $1_1 = HEAP32[$6_1 + 24 >> 2];
   while (1) {
    $3 = $1597($3 + -12 | 0);
    if (($6_1 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $924($0) {
  $1350(HEAP32[$0 >> 2]);
 }
 
 function $925($0) {
  return $929($0, 24340);
 }
 
 function $926($0, $1_1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 24 >> 2]]($0, $1_1);
 }
 
 function $927($0, $1_1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 28 >> 2]]($0, $1_1);
 }
 
 function $928($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18 = 0;
  $8_1 = global$0 - 128 | 0;
  global$0 = $8_1;
  HEAP32[$8_1 + 120 >> 2] = $1_1;
  $10_1 = $311($2_1, $3);
  HEAP32[$8_1 + 16 >> 2] = 169;
  $15_1 = $930($8_1 + 8 | 0, 0, $8_1 + 16 | 0);
  $9_1 = $8_1 + 16 | 0;
  label$1 : {
   if ($10_1 >>> 0 >= 101) {
    $9_1 = $1768($10_1);
    if (!$9_1) {
     break label$1
    }
    $931($15_1, $9_1);
   }
   $7_1 = $9_1;
   $1_1 = $2_1;
   while (1) if (($1_1 | 0) == ($3 | 0)) {
    label$5 : while (1) {
     label$6 : {
      if (!($684($0, $8_1 + 120 | 0) ? $10_1 : 0)) {
       if ($688($0, $8_1 + 120 | 0)) {
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 2
       }
       break label$6;
      }
      $12_1 = $685($0);
      if (!$6_1) {
       $12_1 = $932($4_1, $12_1)
      }
      $13_1 = $16_1 + 1 | 0;
      $17_1 = 0;
      $7_1 = $9_1;
      $1_1 = $2_1;
      while (1) if (($1_1 | 0) == ($3 | 0)) {
       $16_1 = $13_1;
       if (!$17_1) {
        continue label$5
       }
       $687($0);
       $7_1 = $9_1;
       $1_1 = $2_1;
       if ($10_1 + $11_1 >>> 0 < 2) {
        continue label$5
       }
       while (1) if (($1_1 | 0) == ($3 | 0)) {
        continue label$5
       } else {
        label$15 : {
         if (HEAPU8[$7_1 | 0] != 2) {
          break label$15
         }
         if (($19($1_1) | 0) == ($13_1 | 0)) {
          break label$15
         }
         HEAP8[$7_1 | 0] = 0;
         $11_1 = $11_1 + -1 | 0;
        }
        $7_1 = $7_1 + 1 | 0;
        $1_1 = $1_1 + 12 | 0;
        continue;
       };
      } else {
       label$17 : {
        if (HEAPU8[$7_1 | 0] != 1) {
         break label$17
        }
        $14_1 = HEAPU8[$933($1_1, $16_1) | 0];
        $18 = $12_1 & 255;
        if (!$6_1) {
         $14_1 = $932($4_1, $14_1 << 24 >> 24)
        }
        label$18 : {
         if (($14_1 & 255) == ($18 | 0)) {
          $17_1 = 1;
          if (($19($1_1) | 0) != ($13_1 | 0)) {
           break label$17
          }
          HEAP8[$7_1 | 0] = 2;
          $11_1 = $11_1 + 1 | 0;
          break label$18;
         }
         HEAP8[$7_1 | 0] = 0;
        }
        $10_1 = $10_1 + -1 | 0;
       }
       $7_1 = $7_1 + 1 | 0;
       $1_1 = $1_1 + 12 | 0;
       continue;
      };
     }
     break;
    };
    label$22 : {
     label$23 : {
      while (1) {
       if (($2_1 | 0) == ($3 | 0)) {
        break label$23
       }
       if (HEAPU8[$9_1 | 0] != 2) {
        $9_1 = $9_1 + 1 | 0;
        $2_1 = $2_1 + 12 | 0;
        continue;
       }
       break;
      };
      $3 = $2_1;
      break label$22;
     }
     HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
    }
    $934($15_1);
    global$0 = $8_1 + 128 | 0;
    return $3;
   } else {
    label$27 : {
     if (!$212($1_1)) {
      HEAP8[$7_1 | 0] = 1;
      break label$27;
     }
     HEAP8[$7_1 | 0] = 2;
     $11_1 = $11_1 + 1 | 0;
     $10_1 = $10_1 + -1 | 0;
    }
    $7_1 = $7_1 + 1 | 0;
    $1_1 = $1_1 + 12 | 0;
    continue;
   };
  }
  $1129();
  abort();
 }
 
 function $929($0, $1_1) {
  return HEAP32[$1341(HEAP32[$0 >> 2] + 16 | 0, $1311($1_1)) >> 2];
 }
 
 function $930($0, $1_1, $2_1) {
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = $1_1;
  $436($0, $3 + 12 | 0);
  $436($0 + 4 | 0, $2_1);
  global$0 = $3 + 16 | 0;
  return $0;
 }
 
 function $931($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = $1_1;
  if ($2_1) {
   FUNCTION_TABLE[HEAP32[$217($0) >> 2]]($2_1)
  }
 }
 
 function $932($0, $1_1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1_1) | 0;
 }
 
 function $933($0, $1_1) {
  return $93($0) + $1_1 | 0;
 }
 
 function $934($0) {
  $931($0, 0);
 }
 
 function $935($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $936($1_1, $2_1, $3, $4_1, $5_1) | 0;
 }
 
 function $936($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 256 >> 2] = $1_1;
  HEAP32[$5_1 + 264 >> 2] = $0;
  $6_1 = $937($2_1);
  $939($5_1 + 208 | 0, $2_1, $5_1 + 255 | 0);
  $0 = $10($5_1 + 192 | 0);
  $90($0, $89($0));
  $1_1 = $933($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$684($5_1 + 264 | 0, $5_1 + 256 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($19($0) + $1_1 | 0)) {
     $2_1 = $19($0);
     $90($0, $19($0) << 1);
     $90($0, $89($0));
     $1_1 = $933($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($941($685($5_1 + 264 | 0), $6_1, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP8[$5_1 + 255 | 0], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, 11296)) {
     break label$2
    }
    $687($5_1 + 264 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$19($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $942($1_1, HEAP32[$5_1 + 188 >> 2], $3, $6_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $943($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3);
  if ($688($5_1 + 264 | 0, $5_1 + 256 | 0)) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 264 >> 2];
  $1597($0);
  $1597($5_1 + 208 | 0);
  global$0 = $5_1 + 272 | 0;
  return $1_1;
 }
 
 function $937($0) {
  label$1 : {
   $0 = HEAP32[$0 + 4 >> 2] & 74;
   if ($0) {
    if (($0 | 0) == 64) {
     return 8
    }
    if (($0 | 0) != 8) {
     break label$1
    }
    return 16;
   }
   return 0;
  }
  return 10;
 }
 
 function $939($0, $1_1, $2_1) {
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $683($3 + 8 | 0, $1_1);
  $1_1 = $925($3 + 8 | 0);
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $1012($1_1)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  $1013($0, $1_1);
  $924($3 + 8 | 0);
  global$0 = $3 + 16 | 0;
 }
 
 function $941($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  var $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP8[$10_1 + 15 | 0] = $0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (HEAP32[$3 >> 2] != ($2_1 | 0)) {
       break label$4
      }
      $11_1 = $0 & 255;
      $12_1 = ($11_1 | 0) == HEAPU8[$9_1 + 24 | 0];
      if (HEAPU8[$9_1 + 25 | 0] != ($11_1 | 0) ? !$12_1 : 0) {
       break label$4
      }
      HEAP32[$3 >> 2] = $2_1 + 1;
      HEAP8[$2_1 | 0] = $12_1 ? 43 : 45;
      break label$3;
     }
     if (!$19($6_1) | ($0 | 0) != ($5_1 | 0)) {
      break label$2
     }
     $0 = 0;
     $1_1 = HEAP32[$8_1 >> 2];
     if (($1_1 - $7_1 | 0) > 159) {
      break label$1
     }
     $0 = HEAP32[$4_1 >> 2];
     HEAP32[$8_1 >> 2] = $1_1 + 4;
     HEAP32[$1_1 >> 2] = $0;
    }
    $0 = 0;
    HEAP32[$4_1 >> 2] = 0;
    break label$1;
   }
   $0 = -1;
   $5_1 = $976($9_1, $9_1 + 26 | 0, $10_1 + 15 | 0) - $9_1 | 0;
   if (($5_1 | 0) > 23) {
    break label$1
   }
   $6_1 = $1_1 + -8 | 0;
   label$6 : {
    if ($6_1 >>> 0 > 2) {
     if (($1_1 | 0) != 16 | ($5_1 | 0) < 22) {
      break label$6
     }
     $1_1 = HEAP32[$3 >> 2];
     if (($1_1 | 0) == ($2_1 | 0) | ($1_1 - $2_1 | 0) > 2) {
      break label$1
     }
     if (HEAPU8[$1_1 + -1 | 0] != 48) {
      break label$1
     }
     $0 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3 >> 2] = $1_1 + 1;
     HEAP8[$1_1 | 0] = HEAPU8[$5_1 + 11296 | 0];
     break label$1;
    }
    if (!($6_1 - 1)) {
     break label$6
    }
    if (($5_1 | 0) >= ($1_1 | 0)) {
     break label$1
    }
   }
   $0 = HEAP32[$3 >> 2];
   HEAP32[$3 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = HEAPU8[$5_1 + 11296 | 0];
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] + 1;
   $0 = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0;
 }
 
 function $942($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   if (($0 | 0) != ($1_1 | 0)) {
    label$2 : {
     $5_1 = HEAP32[5216];
     HEAP32[5216] = 0;
     $0 = $902($0, $4_1 + 12 | 0, $3, $973());
     $3 = HEAP32[5216];
     if (!$3) {
      HEAP32[5216] = $5_1
     }
     if (HEAP32[$4_1 + 12 >> 2] != ($1_1 | 0)) {
      break label$2
     }
     $1_1 = i64toi32_i32$HIGH_BITS;
     if (!((($1_1 | 0) < 0 ? 1 : ($1_1 | 0) <= 0 ? ($0 >>> 0 > 2147483647 ? 0 : 1) : 0) ? !(($3 | 0) == 68 | (($1_1 | 0) < -1 ? 1 : ($1_1 | 0) <= -1 ? ($0 >>> 0 >= 2147483648 ? 0 : 1) : 0)) : 0)) {
      HEAP32[$2_1 >> 2] = 4;
      if (($1_1 | 0) > 0 ? 1 : ($1_1 | 0) >= 0 ? ($0 >>> 0 < 1 ? 0 : 1) : 0) {
       $0 = 2147483647;
       break label$1;
      }
      $0 = -2147483648;
      break label$1;
     }
     break label$1;
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   $0 = 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $943($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   if (!$19($0)) {
    break label$1
   }
   $1049($1_1, $2_1);
   $4_1 = $2_1 + -4 | 0;
   $2_1 = $93($0);
   $5_1 = $2_1 + $19($0) | 0;
   while (1) {
    label$3 : {
     $0 = HEAP8[$2_1 | 0];
     if ($1_1 >>> 0 >= $4_1 >>> 0) {
      break label$3
     }
     if (HEAP32[$1_1 >> 2] == HEAP8[$2_1 | 0] | ($0 | 0) >= 127 | ($0 | 0) < 1) {
      $2_1 = ($5_1 - $2_1 | 0) > 1 ? $2_1 + 1 | 0 : $2_1;
      $1_1 = $1_1 + 4 | 0;
      continue;
     } else {
      HEAP32[$3 >> 2] = 4;
      return;
     }
    }
    break;
   };
   if (HEAP32[$4_1 >> 2] + -1 >>> 0 < HEAP8[$2_1 | 0] >>> 0 | ($0 | 0) >= 127 | ($0 | 0) < 1) {
    break label$1
   }
   HEAP32[$3 >> 2] = 4;
  }
 }
 
 function $944($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $945($1_1, $2_1, $3, $4_1, $5_1) | 0;
 }
 
 function $945($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 256 >> 2] = $1_1;
  HEAP32[$5_1 + 264 >> 2] = $0;
  $6_1 = $937($2_1);
  $939($5_1 + 208 | 0, $2_1, $5_1 + 255 | 0);
  $0 = $10($5_1 + 192 | 0);
  $90($0, $89($0));
  $1_1 = $933($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$684($5_1 + 264 | 0, $5_1 + 256 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($19($0) + $1_1 | 0)) {
     $2_1 = $19($0);
     $90($0, $19($0) << 1);
     $90($0, $89($0));
     $1_1 = $933($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($941($685($5_1 + 264 | 0), $6_1, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP8[$5_1 + 255 | 0], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, 11296)) {
     break label$2
    }
    $687($5_1 + 264 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$19($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $946($1_1, HEAP32[$5_1 + 188 >> 2], $3, $6_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$4_1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  $943($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3);
  if ($688($5_1 + 264 | 0, $5_1 + 256 | 0)) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 264 >> 2];
  $1597($0);
  $1597($5_1 + 208 | 0);
  global$0 = $5_1 + 272 | 0;
  return $1_1;
 }
 
 function $946($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  label$1 : {
   if (($0 | 0) != ($1_1 | 0)) {
    label$2 : {
     $4_1 = HEAP32[5216];
     HEAP32[5216] = 0;
     $3 = $902($0, $5_1 + 12 | 0, $3, $973());
     $0 = i64toi32_i32$HIGH_BITS;
     $6_1 = HEAP32[5216];
     if (!$6_1) {
      HEAP32[5216] = $4_1
     }
     if (HEAP32[$5_1 + 12 >> 2] != ($1_1 | 0)) {
      break label$2
     }
     label$6 : {
      if (($6_1 | 0) == 68) {
       break label$6
      }
      $4_1 = $3 >>> 0 >= $1546() >>> 0 ? 0 : 1;
      $1_1 = i64toi32_i32$HIGH_BITS;
      if (($0 | 0) < ($1_1 | 0) ? 1 : ($0 | 0) <= ($1_1 | 0) ? $4_1 : 0) {
       break label$6
      }
      $4_1 = $1547() >>> 0 < $3 >>> 0 ? 0 : 1;
      $1_1 = i64toi32_i32$HIGH_BITS;
      if (($1_1 | 0) > ($0 | 0) ? 1 : ($1_1 | 0) >= ($0 | 0) ? $4_1 : 0) {
       break label$1
      }
     }
     HEAP32[$2_1 >> 2] = 4;
     if (($0 | 0) > 0 ? 1 : ($0 | 0) >= 0 ? ($3 >>> 0 < 1 ? 0 : 1) : 0) {
      $3 = $1547();
      $0 = i64toi32_i32$HIGH_BITS;
      break label$1;
     }
     $3 = $1546();
     $0 = i64toi32_i32$HIGH_BITS;
     break label$1;
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   $3 = 0;
   $0 = 0;
  }
  global$0 = $5_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $0;
  return $3;
 }
 
 function $947($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $948($1_1, $2_1, $3, $4_1, $5_1) | 0;
 }
 
 function $948($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 256 >> 2] = $1_1;
  HEAP32[$5_1 + 264 >> 2] = $0;
  $6_1 = $937($2_1);
  $939($5_1 + 208 | 0, $2_1, $5_1 + 255 | 0);
  $0 = $10($5_1 + 192 | 0);
  $90($0, $89($0));
  $1_1 = $933($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$684($5_1 + 264 | 0, $5_1 + 256 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($19($0) + $1_1 | 0)) {
     $2_1 = $19($0);
     $90($0, $19($0) << 1);
     $90($0, $89($0));
     $1_1 = $933($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($941($685($5_1 + 264 | 0), $6_1, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP8[$5_1 + 255 | 0], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, 11296)) {
     break label$2
    }
    $687($5_1 + 264 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$19($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $949($1_1, HEAP32[$5_1 + 188 >> 2], $3, $6_1)), HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
  $943($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3);
  if ($688($5_1 + 264 | 0, $5_1 + 256 | 0)) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 264 >> 2];
  $1597($0);
  $1597($5_1 + 208 | 0);
  global$0 = $5_1 + 272 | 0;
  return $1_1;
 }
 
 function $949($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   if (($0 | 0) != ($1_1 | 0)) {
    label$2 : {
     label$4 : {
      $5_1 = HEAPU8[$0 | 0];
      if (($5_1 | 0) != 45) {
       break label$4
      }
      $0 = $0 + 1 | 0;
      if (($1_1 | 0) != ($0 | 0)) {
       break label$4
      }
      break label$2;
     }
     $6_1 = HEAP32[5216];
     HEAP32[5216] = 0;
     $0 = $901($0, $4_1 + 12 | 0, $3, $973());
     $3 = HEAP32[5216];
     if (!$3) {
      HEAP32[5216] = $6_1
     }
     if (HEAP32[$4_1 + 12 >> 2] != ($1_1 | 0)) {
      break label$2
     }
     $1_1 = i64toi32_i32$HIGH_BITS;
     if (!(!$1_1 & $0 >>> 0 <= 65535 | $1_1 >>> 0 < 0 ? ($3 | 0) != 68 : 0)) {
      HEAP32[$2_1 >> 2] = 4;
      $0 = 65535;
      break label$1;
     }
     $0 = ($5_1 | 0) == 45 ? 0 - $0 | 0 : $0;
     break label$1;
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   $0 = 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $0 & 65535;
 }
 
 function $950($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $951($1_1, $2_1, $3, $4_1, $5_1) | 0;
 }
 
 function $951($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 256 >> 2] = $1_1;
  HEAP32[$5_1 + 264 >> 2] = $0;
  $6_1 = $937($2_1);
  $939($5_1 + 208 | 0, $2_1, $5_1 + 255 | 0);
  $0 = $10($5_1 + 192 | 0);
  $90($0, $89($0));
  $1_1 = $933($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$684($5_1 + 264 | 0, $5_1 + 256 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($19($0) + $1_1 | 0)) {
     $2_1 = $19($0);
     $90($0, $19($0) << 1);
     $90($0, $89($0));
     $1_1 = $933($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($941($685($5_1 + 264 | 0), $6_1, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP8[$5_1 + 255 | 0], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, 11296)) {
     break label$2
    }
    $687($5_1 + 264 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$19($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $952($1_1, HEAP32[$5_1 + 188 >> 2], $3, $6_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $943($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3);
  if ($688($5_1 + 264 | 0, $5_1 + 256 | 0)) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 264 >> 2];
  $1597($0);
  $1597($5_1 + 208 | 0);
  global$0 = $5_1 + 272 | 0;
  return $1_1;
 }
 
 function $952($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   if (($0 | 0) != ($1_1 | 0)) {
    label$2 : {
     label$4 : {
      $5_1 = HEAPU8[$0 | 0];
      if (($5_1 | 0) != 45) {
       break label$4
      }
      $0 = $0 + 1 | 0;
      if (($1_1 | 0) != ($0 | 0)) {
       break label$4
      }
      break label$2;
     }
     $6_1 = HEAP32[5216];
     HEAP32[5216] = 0;
     $0 = $901($0, $4_1 + 12 | 0, $3, $973());
     $3 = HEAP32[5216];
     if (!$3) {
      HEAP32[5216] = $6_1
     }
     if (HEAP32[$4_1 + 12 >> 2] != ($1_1 | 0)) {
      break label$2
     }
     $1_1 = i64toi32_i32$HIGH_BITS;
     if (!(!$1_1 & $0 >>> 0 <= 4294967295 | $1_1 >>> 0 < 0 ? ($3 | 0) != 68 : 0)) {
      HEAP32[$2_1 >> 2] = 4;
      $0 = -1;
      break label$1;
     }
     $0 = ($5_1 | 0) == 45 ? 0 - $0 | 0 : $0;
     break label$1;
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   $0 = 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $956($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $957($1_1, $2_1, $3, $4_1, $5_1) | 0;
 }
 
 function $957($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 256 >> 2] = $1_1;
  HEAP32[$5_1 + 264 >> 2] = $0;
  $6_1 = $937($2_1);
  $939($5_1 + 208 | 0, $2_1, $5_1 + 255 | 0);
  $0 = $10($5_1 + 192 | 0);
  $90($0, $89($0));
  $1_1 = $933($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$684($5_1 + 264 | 0, $5_1 + 256 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($19($0) + $1_1 | 0)) {
     $2_1 = $19($0);
     $90($0, $19($0) << 1);
     $90($0, $89($0));
     $1_1 = $933($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($941($685($5_1 + 264 | 0), $6_1, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP8[$5_1 + 255 | 0], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, 11296)) {
     break label$2
    }
    $687($5_1 + 264 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$19($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $958($1_1, HEAP32[$5_1 + 188 >> 2], $3, $6_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$4_1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  $943($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3);
  if ($688($5_1 + 264 | 0, $5_1 + 256 | 0)) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 264 >> 2];
  $1597($0);
  $1597($5_1 + 208 | 0);
  global$0 = $5_1 + 272 | 0;
  return $1_1;
 }
 
 function $958($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   if (($0 | 0) != ($1_1 | 0)) {
    label$2 : {
     label$4 : {
      $6_1 = HEAPU8[$0 | 0];
      if (($6_1 | 0) != 45) {
       break label$4
      }
      $0 = $0 + 1 | 0;
      if (($1_1 | 0) != ($0 | 0)) {
       break label$4
      }
      break label$2;
     }
     $5_1 = HEAP32[5216];
     HEAP32[5216] = 0;
     $3 = $901($0, $4_1 + 12 | 0, $3, $973());
     $0 = HEAP32[5216];
     if (!$0) {
      HEAP32[5216] = $5_1
     }
     if (HEAP32[$4_1 + 12 >> 2] != ($1_1 | 0)) {
      break label$2
     }
     $1_1 = i64toi32_i32$HIGH_BITS;
     label$7 : {
      if (($0 | 0) != 68) {
       $0 = $1552();
       $5_1 = i64toi32_i32$HIGH_BITS;
       if (($1_1 | 0) == ($5_1 | 0) & $0 >>> 0 >= $3 >>> 0 | $5_1 >>> 0 > $1_1 >>> 0) {
        break label$7
       }
      }
      HEAP32[$2_1 >> 2] = 4;
      $0 = $1552();
      $1_1 = i64toi32_i32$HIGH_BITS;
      break label$1;
     }
     $2_1 = ($6_1 | 0) == 45;
     $0 = $2_1 ? 0 - $3 | 0 : $3;
     $1_1 = $2_1 ? 0 - ($1_1 + (0 < $3 >>> 0) | 0) | 0 : $1_1;
     break label$1;
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   $0 = 0;
   $1_1 = 0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $1_1;
  return $0;
 }
 
 function $959($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $960($1_1, $2_1, $3, $4_1, $5_1) | 0;
 }
 
 function $960($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 256 >> 2] = $1_1;
  HEAP32[$5_1 + 264 >> 2] = $0;
  $961($5_1 + 208 | 0, $2_1, $5_1 + 224 | 0, $5_1 + 223 | 0, $5_1 + 222 | 0);
  $1_1 = $10($5_1 + 192 | 0);
  $90($1_1, $89($1_1));
  $0 = $933($1_1, 0);
  HEAP32[$5_1 + 188 >> 2] = $0;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  HEAP8[$5_1 + 7 | 0] = 1;
  HEAP8[$5_1 + 6 | 0] = 69;
  while (1) {
   label$2 : {
    if (!$684($5_1 + 264 | 0, $5_1 + 256 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($19($1_1) + $0 | 0)) {
     $2_1 = $19($1_1);
     $90($1_1, $19($1_1) << 1);
     $90($1_1, $89($1_1));
     $0 = $933($1_1, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $0;
    }
    if ($962($685($5_1 + 264 | 0), $5_1 + 7 | 0, $5_1 + 6 | 0, $0, $5_1 + 188 | 0, HEAP8[$5_1 + 223 | 0], HEAP8[$5_1 + 222 | 0], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, $5_1 + 8 | 0, $5_1 + 224 | 0)) {
     break label$2
    }
    $687($5_1 + 264 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$19($5_1 + 208 | 0) | !HEAPU8[$5_1 + 7 | 0]) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_f32$0 = $963($0, HEAP32[$5_1 + 188 >> 2], $3)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
  $943($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3);
  if ($688($5_1 + 264 | 0, $5_1 + 256 | 0)) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
  }
  $0 = HEAP32[$5_1 + 264 >> 2];
  $1597($1_1);
  $1597($5_1 + 208 | 0);
  global$0 = $5_1 + 272 | 0;
  return $0;
 }
 
 function $961($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $683($5_1 + 8 | 0, $1_1);
  $971($526($5_1 + 8 | 0), 11296, 11328, $2_1);
  $1_1 = $925($5_1 + 8 | 0);
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = $1011($1_1)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1012($1_1)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  $1013($0, $1_1);
  $924($5_1 + 8 | 0);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $962($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP8[$12_1 + 15 | 0] = $0;
  label$1 : {
   label$2 : {
    if (($0 | 0) == ($5_1 | 0)) {
     if (!HEAPU8[$1_1 | 0]) {
      break label$2
     }
     $0 = 0;
     HEAP8[$1_1 | 0] = 0;
     $1_1 = HEAP32[$4_1 >> 2];
     HEAP32[$4_1 >> 2] = $1_1 + 1;
     HEAP8[$1_1 | 0] = 46;
     if (!$19($7_1)) {
      break label$1
     }
     $1_1 = HEAP32[$9_1 >> 2];
     if (($1_1 - $8_1 | 0) > 159) {
      break label$1
     }
     $2_1 = HEAP32[$10_1 >> 2];
     HEAP32[$9_1 >> 2] = $1_1 + 4;
     HEAP32[$1_1 >> 2] = $2_1;
     break label$1;
    }
    label$4 : {
     if (($0 | 0) != ($6_1 | 0)) {
      break label$4
     }
     if (!$19($7_1)) {
      break label$4
     }
     if (!HEAPU8[$1_1 | 0]) {
      break label$2
     }
     $0 = 0;
     $1_1 = HEAP32[$9_1 >> 2];
     if (($1_1 - $8_1 | 0) > 159) {
      break label$1
     }
     $0 = HEAP32[$10_1 >> 2];
     HEAP32[$9_1 >> 2] = $1_1 + 4;
     HEAP32[$1_1 >> 2] = $0;
     $0 = 0;
     HEAP32[$10_1 >> 2] = 0;
     break label$1;
    }
    $0 = -1;
    $5_1 = $976($11_1, $11_1 + 32 | 0, $12_1 + 15 | 0) - $11_1 | 0;
    if (($5_1 | 0) > 31) {
     break label$1
    }
    $6_1 = HEAPU8[$5_1 + 11296 | 0];
    $0 = $5_1 + -22 | 0;
    label$5 : {
     if ($0 >>> 0 <= 3) {
      label$7 : {
       switch ($0 - 2 | 0) {
       case 0:
       case 1:
        $1_1 = HEAP32[$4_1 >> 2];
        if (($1_1 | 0) != ($3 | 0)) {
         $0 = -1;
         if ((HEAPU8[$1_1 + -1 | 0] & 95) != (HEAPU8[$2_1 | 0] & 127)) {
          break label$1
         }
        }
        HEAP32[$4_1 >> 2] = $1_1 + 1;
        HEAP8[$1_1 | 0] = $6_1;
        $0 = 0;
        break label$1;
       default:
        break label$7;
       };
      }
      HEAP8[$2_1 | 0] = 80;
      break label$5;
     }
     $0 = HEAP8[$2_1 | 0];
     if (($0 | 0) != ($6_1 & 95)) {
      break label$5
     }
     HEAP8[$2_1 | 0] = $0 | 128;
     if (!HEAPU8[$1_1 | 0]) {
      break label$5
     }
     HEAP8[$1_1 | 0] = 0;
     if (!$19($7_1)) {
      break label$5
     }
     $0 = HEAP32[$9_1 >> 2];
     if (($0 - $8_1 | 0) > 159) {
      break label$5
     }
     $1_1 = HEAP32[$10_1 >> 2];
     HEAP32[$9_1 >> 2] = $0 + 4;
     HEAP32[$0 >> 2] = $1_1;
    }
    $0 = HEAP32[$4_1 >> 2];
    HEAP32[$4_1 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = $6_1;
    $0 = 0;
    if (($5_1 | 0) > 21) {
     break label$1
    }
    HEAP32[$10_1 >> 2] = HEAP32[$10_1 >> 2] + 1;
    break label$1;
   }
   $0 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0;
 }
 
 function $963($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0);
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  label$1 : {
   if (($0 | 0) != ($1_1 | 0)) {
    $5_1 = HEAP32[5216];
    HEAP32[5216] = 0;
    $973();
    $4_1 = $903($0, $3 + 12 | 0);
    $0 = HEAP32[5216];
    if (!$0) {
     HEAP32[5216] = $5_1
    }
    if (HEAP32[$3 + 12 >> 2] == ($1_1 | 0)) {
     $6_1 = $4_1;
     if (($0 | 0) != 68) {
      break label$1
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $4_1 = $6_1;
    break label$1;
   }
   HEAP32[$2_1 >> 2] = 4;
  }
  global$0 = $3 + 16 | 0;
  return $4_1;
 }
 
 function $964($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $965($1_1, $2_1, $3, $4_1, $5_1) | 0;
 }
 
 function $965($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 272 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 256 >> 2] = $1_1;
  HEAP32[$5_1 + 264 >> 2] = $0;
  $961($5_1 + 208 | 0, $2_1, $5_1 + 224 | 0, $5_1 + 223 | 0, $5_1 + 222 | 0);
  $1_1 = $10($5_1 + 192 | 0);
  $90($1_1, $89($1_1));
  $0 = $933($1_1, 0);
  HEAP32[$5_1 + 188 >> 2] = $0;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  HEAP8[$5_1 + 7 | 0] = 1;
  HEAP8[$5_1 + 6 | 0] = 69;
  while (1) {
   label$2 : {
    if (!$684($5_1 + 264 | 0, $5_1 + 256 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($19($1_1) + $0 | 0)) {
     $2_1 = $19($1_1);
     $90($1_1, $19($1_1) << 1);
     $90($1_1, $89($1_1));
     $0 = $933($1_1, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $0;
    }
    if ($962($685($5_1 + 264 | 0), $5_1 + 7 | 0, $5_1 + 6 | 0, $0, $5_1 + 188 | 0, HEAP8[$5_1 + 223 | 0], HEAP8[$5_1 + 222 | 0], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, $5_1 + 8 | 0, $5_1 + 224 | 0)) {
     break label$2
    }
    $687($5_1 + 264 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$19($5_1 + 208 | 0) | !HEAPU8[$5_1 + 7 | 0]) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = $966($0, HEAP32[$5_1 + 188 >> 2], $3)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
  $943($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3);
  if ($688($5_1 + 264 | 0, $5_1 + 256 | 0)) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
  }
  $0 = HEAP32[$5_1 + 264 >> 2];
  $1597($1_1);
  $1597($5_1 + 208 | 0);
  global$0 = $5_1 + 272 | 0;
  return $0;
 }
 
 function $966($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0.0, $5_1 = 0, $6_1 = 0.0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  label$1 : {
   if (($0 | 0) != ($1_1 | 0)) {
    $5_1 = HEAP32[5216];
    HEAP32[5216] = 0;
    $973();
    $4_1 = $905($0, $3 + 12 | 0);
    $0 = HEAP32[5216];
    if (!$0) {
     HEAP32[5216] = $5_1
    }
    if (HEAP32[$3 + 12 >> 2] == ($1_1 | 0)) {
     $6_1 = $4_1;
     if (($0 | 0) != 68) {
      break label$1
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $4_1 = $6_1;
    break label$1;
   }
   HEAP32[$2_1 >> 2] = 4;
  }
  global$0 = $3 + 16 | 0;
  return $4_1;
 }
 
 function $967($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $968($1_1, $2_1, $3, $4_1, $5_1) | 0;
 }
 
 function $968($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 288 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 272 >> 2] = $1_1;
  HEAP32[$5_1 + 280 >> 2] = $0;
  $961($5_1 + 224 | 0, $2_1, $5_1 + 240 | 0, $5_1 + 239 | 0, $5_1 + 238 | 0);
  $1_1 = $10($5_1 + 208 | 0);
  $90($1_1, $89($1_1));
  $0 = $933($1_1, 0);
  HEAP32[$5_1 + 204 >> 2] = $0;
  HEAP32[$5_1 + 28 >> 2] = $5_1 + 32;
  HEAP32[$5_1 + 24 >> 2] = 0;
  HEAP8[$5_1 + 23 | 0] = 1;
  HEAP8[$5_1 + 22 | 0] = 69;
  while (1) {
   label$2 : {
    if (!$684($5_1 + 280 | 0, $5_1 + 272 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 204 >> 2] == ($19($1_1) + $0 | 0)) {
     $2_1 = $19($1_1);
     $90($1_1, $19($1_1) << 1);
     $90($1_1, $89($1_1));
     $0 = $933($1_1, 0);
     HEAP32[$5_1 + 204 >> 2] = $2_1 + $0;
    }
    if ($962($685($5_1 + 280 | 0), $5_1 + 23 | 0, $5_1 + 22 | 0, $0, $5_1 + 204 | 0, HEAP8[$5_1 + 239 | 0], HEAP8[$5_1 + 238 | 0], $5_1 + 224 | 0, $5_1 + 32 | 0, $5_1 + 28 | 0, $5_1 + 24 | 0, $5_1 + 240 | 0)) {
     break label$2
    }
    $687($5_1 + 280 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$19($5_1 + 224 | 0) | !HEAPU8[$5_1 + 23 | 0]) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 28 >> 2];
   if (($2_1 - ($5_1 + 32 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 28 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 24 >> 2];
  }
  $969($5_1, $0, HEAP32[$5_1 + 204 >> 2], $3);
  $0 = HEAP32[$5_1 >> 2];
  $2_1 = HEAP32[$5_1 + 4 >> 2];
  $6_1 = HEAP32[$5_1 + 12 >> 2];
  HEAP32[$4_1 + 8 >> 2] = HEAP32[$5_1 + 8 >> 2];
  HEAP32[$4_1 + 12 >> 2] = $6_1;
  HEAP32[$4_1 >> 2] = $0;
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  $943($5_1 + 224 | 0, $5_1 + 32 | 0, HEAP32[$5_1 + 28 >> 2], $3);
  if ($688($5_1 + 280 | 0, $5_1 + 272 | 0)) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
  }
  $0 = HEAP32[$5_1 + 280 >> 2];
  $1597($1_1);
  $1597($5_1 + 224 | 0);
  global$0 = $5_1 + 288 | 0;
  return $0;
 }
 
 function $969($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  label$1 : {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $5_1 = HEAP32[5216];
    HEAP32[5216] = 0;
    $1556($4_1, $1_1, $4_1 + 28 | 0);
    $1_1 = HEAP32[$4_1 + 8 >> 2];
    $6_1 = HEAP32[$4_1 + 12 >> 2];
    $7_1 = HEAP32[$4_1 >> 2];
    $8_1 = HEAP32[$4_1 + 4 >> 2];
    $9_1 = HEAP32[5216];
    if (!$9_1) {
     HEAP32[5216] = $5_1
    }
    $5_1 = 0;
    if (HEAP32[$4_1 + 28 >> 2] == ($2_1 | 0)) {
     $5_1 = $7_1;
     $10_1 = $8_1;
     $11_1 = $1_1;
     $12_1 = $6_1;
     if (($9_1 | 0) != 68) {
      break label$1
     }
    }
    HEAP32[$3 >> 2] = 4;
    $7_1 = $5_1;
    $8_1 = $10_1;
    $1_1 = $11_1;
    $6_1 = $12_1;
    break label$1;
   }
   HEAP32[$3 >> 2] = 4;
   $1_1 = 0;
  }
  HEAP32[$0 >> 2] = $7_1;
  HEAP32[$0 + 4 >> 2] = $8_1;
  HEAP32[$0 + 8 >> 2] = $1_1;
  HEAP32[$0 + 12 >> 2] = $6_1;
  global$0 = $4_1 + 32 | 0;
 }
 
 function $970($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $0 = global$0 - 272 | 0;
  global$0 = $0;
  HEAP32[$0 + 256 >> 2] = $2_1;
  HEAP32[$0 + 264 >> 2] = $1_1;
  $6_1 = $10($0 + 208 | 0);
  $683($0 + 16 | 0, $3);
  $971($526($0 + 16 | 0), 11296, 11322, $0 + 224 | 0);
  $924($0 + 16 | 0);
  $2_1 = $10($0 + 192 | 0);
  $90($2_1, $89($2_1));
  $1_1 = $933($2_1, 0);
  HEAP32[$0 + 188 >> 2] = $1_1;
  HEAP32[$0 + 12 >> 2] = $0 + 16;
  HEAP32[$0 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$684($0 + 264 | 0, $0 + 256 | 0)) {
     break label$2
    }
    if (HEAP32[$0 + 188 >> 2] == ($19($2_1) + $1_1 | 0)) {
     $3 = $19($2_1);
     $90($2_1, $19($2_1) << 1);
     $90($2_1, $89($2_1));
     $1_1 = $933($2_1, 0);
     HEAP32[$0 + 188 >> 2] = $3 + $1_1;
    }
    if ($941($685($0 + 264 | 0), 16, $1_1, $0 + 188 | 0, $0 + 8 | 0, 0, $6_1, $0 + 16 | 0, $0 + 12 | 0, $0 + 224 | 0)) {
     break label$2
    }
    $687($0 + 264 | 0);
    continue;
   }
   break;
  };
  $90($2_1, HEAP32[$0 + 188 >> 2] - $1_1 | 0);
  $1_1 = $93($2_1);
  $3 = $973();
  HEAP32[$0 >> 2] = $5_1;
  if (($974($1_1, $3, $0) | 0) != 1) {
   HEAP32[$4_1 >> 2] = 4
  }
  if ($688($0 + 264 | 0, $0 + 256 | 0)) {
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 2
  }
  $1_1 = HEAP32[$0 + 264 >> 2];
  $1597($2_1);
  $1597($6_1);
  global$0 = $0 + 272 | 0;
  return $1_1 | 0;
 }
 
 function $971($0, $1_1, $2_1, $3) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1_1, $2_1, $3) | 0;
 }
 
 function $973() {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (HEAP8[24260] & 1) {
    break label$1
   }
   if (!$1630(24260)) {
    break label$1
   }
   (wasm2js_i32$0 = 24256, wasm2js_i32$1 = $859()), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $1632(24260);
  }
  return HEAP32[6064];
 }
 
 function $974($0, $1_1, $2_1) {
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = $1_1;
  HEAP32[$3 + 8 >> 2] = $2_1;
  $1_1 = $977($3, $3 + 12 | 0);
  $0 = $847($0, 11329, HEAP32[$3 + 8 >> 2]);
  $978($1_1);
  global$0 = $3 + 16 | 0;
  return $0;
 }
 
 function $976($0, $1_1, $2_1) {
  $2_1 = HEAPU8[$2_1 | 0];
  while (1) {
   label$2 : {
    if (($0 | 0) != ($1_1 | 0)) {
     if (($2_1 | 0) != HEAPU8[$0 | 0]) {
      break label$2
     }
    } else {
     $0 = $1_1
    }
    return $0;
   }
   $0 = $0 + 1 | 0;
   continue;
  };
 }
 
 function $977($0, $1_1) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $897(HEAP32[$1_1 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return $0;
 }
 
 function $978($0) {
  $0 = HEAP32[$0 >> 2];
  if ($0) {
   $897($0)
  }
 }
 
 function $979($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 24 >> 2] = $1_1;
  label$1 : {
   if (!(HEAP32[$3 + 4 >> 2] & 1)) {
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1_1, $2_1, $3, $4_1, $6_1) | 0;
    HEAP32[$6_1 + 24 >> 2] = $1_1;
    $0 = HEAP32[$6_1 >> 2];
    if ($0 >>> 0 <= 1) {
     if ($0 - 1) {
      HEAP8[$5_1 | 0] = 0;
      break label$1;
     }
     HEAP8[$5_1 | 0] = 1;
     break label$1;
    }
    HEAP8[$5_1 | 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break label$1;
   }
   $683($6_1, $3);
   $1_1 = $704($6_1);
   $924($6_1);
   $683($6_1, $3);
   $0 = $980($6_1);
   $924($6_1);
   $926($6_1, $0);
   $927($6_1 | 12, $0);
   $3 = $6_1 + 24 | 0;
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = ($981($6_1 + 24 | 0, $2_1, $6_1, $3, $1_1, $4_1, 1) | 0) == ($6_1 | 0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   $1_1 = HEAP32[$6_1 + 24 >> 2];
   while (1) {
    $3 = $1597($3 + -12 | 0);
    if (($6_1 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $980($0) {
  return $929($0, 24348);
 }
 
 function $981($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0;
  $8_1 = global$0 - 128 | 0;
  global$0 = $8_1;
  HEAP32[$8_1 + 120 >> 2] = $1_1;
  $10_1 = $311($2_1, $3);
  HEAP32[$8_1 + 16 >> 2] = 169;
  $15_1 = $930($8_1 + 8 | 0, 0, $8_1 + 16 | 0);
  $9_1 = $8_1 + 16 | 0;
  label$1 : {
   if ($10_1 >>> 0 >= 101) {
    $9_1 = $1768($10_1);
    if (!$9_1) {
     break label$1
    }
    $931($15_1, $9_1);
   }
   $7_1 = $9_1;
   $1_1 = $2_1;
   while (1) if (($1_1 | 0) == ($3 | 0)) {
    label$5 : while (1) {
     label$6 : {
      if (!($705($0, $8_1 + 120 | 0) ? $10_1 : 0)) {
       if ($709($0, $8_1 + 120 | 0)) {
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 2
       }
       break label$6;
      }
      $12_1 = $706($0);
      if (!$6_1) {
       $12_1 = $527($4_1, $12_1)
      }
      $13_1 = $16_1 + 1 | 0;
      $17_1 = 0;
      $7_1 = $9_1;
      $1_1 = $2_1;
      while (1) if (($1_1 | 0) == ($3 | 0)) {
       $16_1 = $13_1;
       if (!$17_1) {
        continue label$5
       }
       $708($0);
       $7_1 = $9_1;
       $1_1 = $2_1;
       if ($10_1 + $11_1 >>> 0 < 2) {
        continue label$5
       }
       while (1) if (($1_1 | 0) == ($3 | 0)) {
        continue label$5
       } else {
        label$15 : {
         if (HEAPU8[$7_1 | 0] != 2) {
          break label$15
         }
         if (($19($1_1) | 0) == ($13_1 | 0)) {
          break label$15
         }
         HEAP8[$7_1 | 0] = 0;
         $11_1 = $11_1 + -1 | 0;
        }
        $7_1 = $7_1 + 1 | 0;
        $1_1 = $1_1 + 12 | 0;
        continue;
       };
      } else {
       label$17 : {
        if (HEAPU8[$7_1 | 0] != 1) {
         break label$17
        }
        $14_1 = HEAP32[$983($1_1, $16_1) >> 2];
        if (!$6_1) {
         $14_1 = $527($4_1, $14_1)
        }
        label$18 : {
         if (($12_1 | 0) == ($14_1 | 0)) {
          $17_1 = 1;
          if (($19($1_1) | 0) != ($13_1 | 0)) {
           break label$17
          }
          HEAP8[$7_1 | 0] = 2;
          $11_1 = $11_1 + 1 | 0;
          break label$18;
         }
         HEAP8[$7_1 | 0] = 0;
        }
        $10_1 = $10_1 + -1 | 0;
       }
       $7_1 = $7_1 + 1 | 0;
       $1_1 = $1_1 + 12 | 0;
       continue;
      };
     }
     break;
    };
    label$22 : {
     label$23 : {
      while (1) {
       if (($2_1 | 0) == ($3 | 0)) {
        break label$23
       }
       if (HEAPU8[$9_1 | 0] != 2) {
        $9_1 = $9_1 + 1 | 0;
        $2_1 = $2_1 + 12 | 0;
        continue;
       }
       break;
      };
      $3 = $2_1;
      break label$22;
     }
     HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
    }
    $934($15_1);
    global$0 = $8_1 + 128 | 0;
    return $3;
   } else {
    label$27 : {
     if (!$212($1_1)) {
      HEAP8[$7_1 | 0] = 1;
      break label$27;
     }
     HEAP8[$7_1 | 0] = 2;
     $11_1 = $11_1 + 1 | 0;
     $10_1 = $10_1 + -1 | 0;
    }
    $7_1 = $7_1 + 1 | 0;
    $1_1 = $1_1 + 12 | 0;
    continue;
   };
  }
  $1129();
  abort();
 }
 
 function $983($0, $1_1) {
  return $93($0) + ($1_1 << 2) | 0;
 }
 
 function $985($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $986($1_1, $2_1, $3, $4_1, $5_1) | 0;
 }
 
 function $986($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 352 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 336 >> 2] = $1_1;
  HEAP32[$5_1 + 344 >> 2] = $0;
  $6_1 = $937($2_1);
  $7_1 = $987($2_1, $5_1 + 224 | 0);
  $988($5_1 + 208 | 0, $2_1, $5_1 + 332 | 0);
  $0 = $10($5_1 + 192 | 0);
  $90($0, $89($0));
  $1_1 = $933($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$705($5_1 + 344 | 0, $5_1 + 336 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($19($0) + $1_1 | 0)) {
     $2_1 = $19($0);
     $90($0, $19($0) << 1);
     $90($0, $89($0));
     $1_1 = $933($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($989($706($5_1 + 344 | 0), $6_1, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP32[$5_1 + 332 >> 2], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, $7_1)) {
     break label$2
    }
    $708($5_1 + 344 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$19($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $942($1_1, HEAP32[$5_1 + 188 >> 2], $3, $6_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $943($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3);
  if ($709($5_1 + 344 | 0, $5_1 + 336 | 0)) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 344 >> 2];
  $1597($0);
  $1597($5_1 + 208 | 0);
  global$0 = $5_1 + 352 | 0;
  return $1_1;
 }
 
 function $987($0, $1_1) {
  return $1015($0, $1_1);
 }
 
 function $988($0, $1_1, $2_1) {
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $683($3 + 8 | 0, $1_1);
  $1_1 = $980($3 + 8 | 0);
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $1012($1_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $1013($0, $1_1);
  $924($3 + 8 | 0);
  global$0 = $3 + 16 | 0;
 }
 
 function $989($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  var $10_1 = 0, $11_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP32[$10_1 + 12 >> 2] = $0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (HEAP32[$3 >> 2] != ($2_1 | 0)) {
       break label$4
      }
      $11_1 = HEAP32[$9_1 + 96 >> 2] == ($0 | 0);
      if (HEAP32[$9_1 + 100 >> 2] != ($0 | 0) ? !$11_1 : 0) {
       break label$4
      }
      HEAP32[$3 >> 2] = $2_1 + 1;
      HEAP8[$2_1 | 0] = $11_1 ? 43 : 45;
      break label$3;
     }
     if (!$19($6_1) | ($0 | 0) != ($5_1 | 0)) {
      break label$2
     }
     $0 = 0;
     $1_1 = HEAP32[$8_1 >> 2];
     if (($1_1 - $7_1 | 0) > 159) {
      break label$1
     }
     $0 = HEAP32[$4_1 >> 2];
     HEAP32[$8_1 >> 2] = $1_1 + 4;
     HEAP32[$1_1 >> 2] = $0;
    }
    $0 = 0;
    HEAP32[$4_1 >> 2] = 0;
    break label$1;
   }
   $0 = -1;
   $6_1 = $1010($9_1, $9_1 + 104 | 0, $10_1 + 12 | 0) - $9_1 | 0;
   if (($6_1 | 0) > 92) {
    break label$1
   }
   $5_1 = $6_1 >> 2;
   $7_1 = $1_1 + -8 | 0;
   label$6 : {
    if ($7_1 >>> 0 > 2) {
     if (($1_1 | 0) != 16 | ($6_1 | 0) < 88) {
      break label$6
     }
     $1_1 = HEAP32[$3 >> 2];
     if (($1_1 | 0) == ($2_1 | 0) | ($1_1 - $2_1 | 0) > 2) {
      break label$1
     }
     if (HEAPU8[$1_1 + -1 | 0] != 48) {
      break label$1
     }
     $0 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3 >> 2] = $1_1 + 1;
     HEAP8[$1_1 | 0] = HEAPU8[$5_1 + 11296 | 0];
     break label$1;
    }
    if (!($7_1 - 1)) {
     break label$6
    }
    if (($5_1 | 0) >= ($1_1 | 0)) {
     break label$1
    }
   }
   $0 = HEAP32[$3 >> 2];
   HEAP32[$3 >> 2] = $0 + 1;
   HEAP8[$0 | 0] = HEAPU8[$5_1 + 11296 | 0];
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] + 1;
   $0 = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0;
 }
 
 function $990($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $991($1_1, $2_1, $3, $4_1, $5_1) | 0;
 }
 
 function $991($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 352 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 336 >> 2] = $1_1;
  HEAP32[$5_1 + 344 >> 2] = $0;
  $6_1 = $937($2_1);
  $7_1 = $987($2_1, $5_1 + 224 | 0);
  $988($5_1 + 208 | 0, $2_1, $5_1 + 332 | 0);
  $0 = $10($5_1 + 192 | 0);
  $90($0, $89($0));
  $1_1 = $933($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$705($5_1 + 344 | 0, $5_1 + 336 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($19($0) + $1_1 | 0)) {
     $2_1 = $19($0);
     $90($0, $19($0) << 1);
     $90($0, $89($0));
     $1_1 = $933($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($989($706($5_1 + 344 | 0), $6_1, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP32[$5_1 + 332 >> 2], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, $7_1)) {
     break label$2
    }
    $708($5_1 + 344 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$19($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $946($1_1, HEAP32[$5_1 + 188 >> 2], $3, $6_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$4_1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  $943($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3);
  if ($709($5_1 + 344 | 0, $5_1 + 336 | 0)) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 344 >> 2];
  $1597($0);
  $1597($5_1 + 208 | 0);
  global$0 = $5_1 + 352 | 0;
  return $1_1;
 }
 
 function $992($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $993($1_1, $2_1, $3, $4_1, $5_1) | 0;
 }
 
 function $993($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 352 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 336 >> 2] = $1_1;
  HEAP32[$5_1 + 344 >> 2] = $0;
  $6_1 = $937($2_1);
  $7_1 = $987($2_1, $5_1 + 224 | 0);
  $988($5_1 + 208 | 0, $2_1, $5_1 + 332 | 0);
  $0 = $10($5_1 + 192 | 0);
  $90($0, $89($0));
  $1_1 = $933($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$705($5_1 + 344 | 0, $5_1 + 336 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($19($0) + $1_1 | 0)) {
     $2_1 = $19($0);
     $90($0, $19($0) << 1);
     $90($0, $89($0));
     $1_1 = $933($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($989($706($5_1 + 344 | 0), $6_1, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP32[$5_1 + 332 >> 2], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, $7_1)) {
     break label$2
    }
    $708($5_1 + 344 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$19($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $949($1_1, HEAP32[$5_1 + 188 >> 2], $3, $6_1)), HEAP16[wasm2js_i32$0 >> 1] = wasm2js_i32$1;
  $943($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3);
  if ($709($5_1 + 344 | 0, $5_1 + 336 | 0)) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 344 >> 2];
  $1597($0);
  $1597($5_1 + 208 | 0);
  global$0 = $5_1 + 352 | 0;
  return $1_1;
 }
 
 function $994($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $995($1_1, $2_1, $3, $4_1, $5_1) | 0;
 }
 
 function $995($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 352 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 336 >> 2] = $1_1;
  HEAP32[$5_1 + 344 >> 2] = $0;
  $6_1 = $937($2_1);
  $7_1 = $987($2_1, $5_1 + 224 | 0);
  $988($5_1 + 208 | 0, $2_1, $5_1 + 332 | 0);
  $0 = $10($5_1 + 192 | 0);
  $90($0, $89($0));
  $1_1 = $933($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$705($5_1 + 344 | 0, $5_1 + 336 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($19($0) + $1_1 | 0)) {
     $2_1 = $19($0);
     $90($0, $19($0) << 1);
     $90($0, $89($0));
     $1_1 = $933($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($989($706($5_1 + 344 | 0), $6_1, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP32[$5_1 + 332 >> 2], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, $7_1)) {
     break label$2
    }
    $708($5_1 + 344 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$19($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $952($1_1, HEAP32[$5_1 + 188 >> 2], $3, $6_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $943($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3);
  if ($709($5_1 + 344 | 0, $5_1 + 336 | 0)) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 344 >> 2];
  $1597($0);
  $1597($5_1 + 208 | 0);
  global$0 = $5_1 + 352 | 0;
  return $1_1;
 }
 
 function $998($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $999($1_1, $2_1, $3, $4_1, $5_1) | 0;
 }
 
 function $999($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 352 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 336 >> 2] = $1_1;
  HEAP32[$5_1 + 344 >> 2] = $0;
  $6_1 = $937($2_1);
  $7_1 = $987($2_1, $5_1 + 224 | 0);
  $988($5_1 + 208 | 0, $2_1, $5_1 + 332 | 0);
  $0 = $10($5_1 + 192 | 0);
  $90($0, $89($0));
  $1_1 = $933($0, 0);
  HEAP32[$5_1 + 188 >> 2] = $1_1;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$705($5_1 + 344 | 0, $5_1 + 336 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 188 >> 2] == ($19($0) + $1_1 | 0)) {
     $2_1 = $19($0);
     $90($0, $19($0) << 1);
     $90($0, $89($0));
     $1_1 = $933($0, 0);
     HEAP32[$5_1 + 188 >> 2] = $2_1 + $1_1;
    }
    if ($989($706($5_1 + 344 | 0), $6_1, $1_1, $5_1 + 188 | 0, $5_1 + 8 | 0, HEAP32[$5_1 + 332 >> 2], $5_1 + 208 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, $7_1)) {
     break label$2
    }
    $708($5_1 + 344 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$19($5_1 + 208 | 0)) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $958($1_1, HEAP32[$5_1 + 188 >> 2], $3, $6_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  HEAP32[$4_1 + 4 >> 2] = i64toi32_i32$HIGH_BITS;
  $943($5_1 + 208 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3);
  if ($709($5_1 + 344 | 0, $5_1 + 336 | 0)) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
  }
  $1_1 = HEAP32[$5_1 + 344 >> 2];
  $1597($0);
  $1597($5_1 + 208 | 0);
  global$0 = $5_1 + 352 | 0;
  return $1_1;
 }
 
 function $1000($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1001($1_1, $2_1, $3, $4_1, $5_1) | 0;
 }
 
 function $1001($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $5_1 = global$0 - 368 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 352 >> 2] = $1_1;
  HEAP32[$5_1 + 360 >> 2] = $0;
  $1002($5_1 + 200 | 0, $2_1, $5_1 + 224 | 0, $5_1 + 220 | 0, $5_1 + 216 | 0);
  $1_1 = $10($5_1 + 184 | 0);
  $90($1_1, $89($1_1));
  $0 = $933($1_1, 0);
  HEAP32[$5_1 + 180 >> 2] = $0;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  HEAP8[$5_1 + 7 | 0] = 1;
  HEAP8[$5_1 + 6 | 0] = 69;
  while (1) {
   label$2 : {
    if (!$705($5_1 + 360 | 0, $5_1 + 352 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 180 >> 2] == ($19($1_1) + $0 | 0)) {
     $2_1 = $19($1_1);
     $90($1_1, $19($1_1) << 1);
     $90($1_1, $89($1_1));
     $0 = $933($1_1, 0);
     HEAP32[$5_1 + 180 >> 2] = $2_1 + $0;
    }
    if ($1003($706($5_1 + 360 | 0), $5_1 + 7 | 0, $5_1 + 6 | 0, $0, $5_1 + 180 | 0, HEAP32[$5_1 + 220 >> 2], HEAP32[$5_1 + 216 >> 2], $5_1 + 200 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, $5_1 + 8 | 0, $5_1 + 224 | 0)) {
     break label$2
    }
    $708($5_1 + 360 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$19($5_1 + 200 | 0) | !HEAPU8[$5_1 + 7 | 0]) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_f32$0 = $963($0, HEAP32[$5_1 + 180 >> 2], $3)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
  $943($5_1 + 200 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3);
  if ($709($5_1 + 360 | 0, $5_1 + 352 | 0)) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
  }
  $0 = HEAP32[$5_1 + 360 >> 2];
  $1597($1_1);
  $1597($5_1 + 200 | 0);
  global$0 = $5_1 + 368 | 0;
  return $0;
 }
 
 function $1002($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $683($5_1 + 8 | 0, $1_1);
  $1009($704($5_1 + 8 | 0), 11296, 11328, $2_1);
  $1_1 = $980($5_1 + 8 | 0);
  (wasm2js_i32$0 = $3, wasm2js_i32$1 = $1011($1_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1012($1_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $1013($0, $1_1);
  $924($5_1 + 8 | 0);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1003($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP32[$12_1 + 12 >> 2] = $0;
  label$1 : {
   label$2 : {
    if (($0 | 0) == ($5_1 | 0)) {
     if (!HEAPU8[$1_1 | 0]) {
      break label$2
     }
     $0 = 0;
     HEAP8[$1_1 | 0] = 0;
     $1_1 = HEAP32[$4_1 >> 2];
     HEAP32[$4_1 >> 2] = $1_1 + 1;
     HEAP8[$1_1 | 0] = 46;
     if (!$19($7_1)) {
      break label$1
     }
     $1_1 = HEAP32[$9_1 >> 2];
     if (($1_1 - $8_1 | 0) > 159) {
      break label$1
     }
     $2_1 = HEAP32[$10_1 >> 2];
     HEAP32[$9_1 >> 2] = $1_1 + 4;
     HEAP32[$1_1 >> 2] = $2_1;
     break label$1;
    }
    label$4 : {
     if (($0 | 0) != ($6_1 | 0)) {
      break label$4
     }
     if (!$19($7_1)) {
      break label$4
     }
     if (!HEAPU8[$1_1 | 0]) {
      break label$2
     }
     $0 = 0;
     $1_1 = HEAP32[$9_1 >> 2];
     if (($1_1 - $8_1 | 0) > 159) {
      break label$1
     }
     $0 = HEAP32[$10_1 >> 2];
     HEAP32[$9_1 >> 2] = $1_1 + 4;
     HEAP32[$1_1 >> 2] = $0;
     $0 = 0;
     HEAP32[$10_1 >> 2] = 0;
     break label$1;
    }
    $0 = -1;
    $5_1 = $1010($11_1, $11_1 + 128 | 0, $12_1 + 12 | 0) - $11_1 | 0;
    if (($5_1 | 0) > 124) {
     break label$1
    }
    $6_1 = HEAPU8[($5_1 >> 2) + 11296 | 0];
    $0 = __wasm_rotl_i32($5_1 + -88 | 0, 30);
    label$5 : {
     if ($0 >>> 0 <= 3) {
      label$7 : {
       switch ($0 - 2 | 0) {
       case 0:
       case 1:
        $1_1 = HEAP32[$4_1 >> 2];
        if (($1_1 | 0) != ($3 | 0)) {
         $0 = -1;
         if ((HEAPU8[$1_1 + -1 | 0] & 95) != (HEAPU8[$2_1 | 0] & 127)) {
          break label$1
         }
        }
        HEAP32[$4_1 >> 2] = $1_1 + 1;
        HEAP8[$1_1 | 0] = $6_1;
        $0 = 0;
        break label$1;
       default:
        break label$7;
       };
      }
      HEAP8[$2_1 | 0] = 80;
      break label$5;
     }
     $0 = HEAP8[$2_1 | 0];
     if (($0 | 0) != ($6_1 & 95)) {
      break label$5
     }
     HEAP8[$2_1 | 0] = $0 | 128;
     if (!HEAPU8[$1_1 | 0]) {
      break label$5
     }
     HEAP8[$1_1 | 0] = 0;
     if (!$19($7_1)) {
      break label$5
     }
     $0 = HEAP32[$9_1 >> 2];
     if (($0 - $8_1 | 0) > 159) {
      break label$5
     }
     $1_1 = HEAP32[$10_1 >> 2];
     HEAP32[$9_1 >> 2] = $0 + 4;
     HEAP32[$0 >> 2] = $1_1;
    }
    $0 = HEAP32[$4_1 >> 2];
    HEAP32[$4_1 >> 2] = $0 + 1;
    HEAP8[$0 | 0] = $6_1;
    $0 = 0;
    if (($5_1 | 0) > 84) {
     break label$1
    }
    HEAP32[$10_1 >> 2] = HEAP32[$10_1 >> 2] + 1;
    break label$1;
   }
   $0 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0;
 }
 
 function $1004($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1005($1_1, $2_1, $3, $4_1, $5_1) | 0;
 }
 
 function $1005($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $5_1 = global$0 - 368 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 352 >> 2] = $1_1;
  HEAP32[$5_1 + 360 >> 2] = $0;
  $1002($5_1 + 200 | 0, $2_1, $5_1 + 224 | 0, $5_1 + 220 | 0, $5_1 + 216 | 0);
  $1_1 = $10($5_1 + 184 | 0);
  $90($1_1, $89($1_1));
  $0 = $933($1_1, 0);
  HEAP32[$5_1 + 180 >> 2] = $0;
  HEAP32[$5_1 + 12 >> 2] = $5_1 + 16;
  HEAP32[$5_1 + 8 >> 2] = 0;
  HEAP8[$5_1 + 7 | 0] = 1;
  HEAP8[$5_1 + 6 | 0] = 69;
  while (1) {
   label$2 : {
    if (!$705($5_1 + 360 | 0, $5_1 + 352 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 180 >> 2] == ($19($1_1) + $0 | 0)) {
     $2_1 = $19($1_1);
     $90($1_1, $19($1_1) << 1);
     $90($1_1, $89($1_1));
     $0 = $933($1_1, 0);
     HEAP32[$5_1 + 180 >> 2] = $2_1 + $0;
    }
    if ($1003($706($5_1 + 360 | 0), $5_1 + 7 | 0, $5_1 + 6 | 0, $0, $5_1 + 180 | 0, HEAP32[$5_1 + 220 >> 2], HEAP32[$5_1 + 216 >> 2], $5_1 + 200 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, $5_1 + 8 | 0, $5_1 + 224 | 0)) {
     break label$2
    }
    $708($5_1 + 360 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$19($5_1 + 200 | 0) | !HEAPU8[$5_1 + 7 | 0]) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 12 >> 2];
   if (($2_1 - ($5_1 + 16 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 12 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
  }
  (wasm2js_i32$0 = $4_1, wasm2js_f64$0 = $966($0, HEAP32[$5_1 + 180 >> 2], $3)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
  $943($5_1 + 200 | 0, $5_1 + 16 | 0, HEAP32[$5_1 + 12 >> 2], $3);
  if ($709($5_1 + 360 | 0, $5_1 + 352 | 0)) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
  }
  $0 = HEAP32[$5_1 + 360 >> 2];
  $1597($1_1);
  $1597($5_1 + 200 | 0);
  global$0 = $5_1 + 368 | 0;
  return $0;
 }
 
 function $1006($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $1007($1_1, $2_1, $3, $4_1, $5_1) | 0;
 }
 
 function $1007($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 384 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 368 >> 2] = $1_1;
  HEAP32[$5_1 + 376 >> 2] = $0;
  $1002($5_1 + 216 | 0, $2_1, $5_1 + 240 | 0, $5_1 + 236 | 0, $5_1 + 232 | 0);
  $1_1 = $10($5_1 + 200 | 0);
  $90($1_1, $89($1_1));
  $0 = $933($1_1, 0);
  HEAP32[$5_1 + 196 >> 2] = $0;
  HEAP32[$5_1 + 28 >> 2] = $5_1 + 32;
  HEAP32[$5_1 + 24 >> 2] = 0;
  HEAP8[$5_1 + 23 | 0] = 1;
  HEAP8[$5_1 + 22 | 0] = 69;
  while (1) {
   label$2 : {
    if (!$705($5_1 + 376 | 0, $5_1 + 368 | 0)) {
     break label$2
    }
    if (HEAP32[$5_1 + 196 >> 2] == ($19($1_1) + $0 | 0)) {
     $2_1 = $19($1_1);
     $90($1_1, $19($1_1) << 1);
     $90($1_1, $89($1_1));
     $0 = $933($1_1, 0);
     HEAP32[$5_1 + 196 >> 2] = $2_1 + $0;
    }
    if ($1003($706($5_1 + 376 | 0), $5_1 + 23 | 0, $5_1 + 22 | 0, $0, $5_1 + 196 | 0, HEAP32[$5_1 + 236 >> 2], HEAP32[$5_1 + 232 >> 2], $5_1 + 216 | 0, $5_1 + 32 | 0, $5_1 + 28 | 0, $5_1 + 24 | 0, $5_1 + 240 | 0)) {
     break label$2
    }
    $708($5_1 + 376 | 0);
    continue;
   }
   break;
  };
  label$4 : {
   if (!$19($5_1 + 216 | 0) | !HEAPU8[$5_1 + 23 | 0]) {
    break label$4
   }
   $2_1 = HEAP32[$5_1 + 28 >> 2];
   if (($2_1 - ($5_1 + 32 | 0) | 0) > 159) {
    break label$4
   }
   HEAP32[$5_1 + 28 >> 2] = $2_1 + 4;
   HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 24 >> 2];
  }
  $969($5_1, $0, HEAP32[$5_1 + 196 >> 2], $3);
  $0 = HEAP32[$5_1 >> 2];
  $2_1 = HEAP32[$5_1 + 4 >> 2];
  $6_1 = HEAP32[$5_1 + 12 >> 2];
  HEAP32[$4_1 + 8 >> 2] = HEAP32[$5_1 + 8 >> 2];
  HEAP32[$4_1 + 12 >> 2] = $6_1;
  HEAP32[$4_1 >> 2] = $0;
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  $943($5_1 + 216 | 0, $5_1 + 32 | 0, HEAP32[$5_1 + 28 >> 2], $3);
  if ($709($5_1 + 376 | 0, $5_1 + 368 | 0)) {
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] | 2
  }
  $0 = HEAP32[$5_1 + 376 >> 2];
  $1597($1_1);
  $1597($5_1 + 216 | 0);
  global$0 = $5_1 + 384 | 0;
  return $0;
 }
 
 function $1008($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $0 = global$0 - 352 | 0;
  global$0 = $0;
  HEAP32[$0 + 336 >> 2] = $2_1;
  HEAP32[$0 + 344 >> 2] = $1_1;
  $6_1 = $10($0 + 208 | 0);
  $683($0 + 16 | 0, $3);
  $1009($704($0 + 16 | 0), 11296, 11322, $0 + 224 | 0);
  $924($0 + 16 | 0);
  $2_1 = $10($0 + 192 | 0);
  $90($2_1, $89($2_1));
  $1_1 = $933($2_1, 0);
  HEAP32[$0 + 188 >> 2] = $1_1;
  HEAP32[$0 + 12 >> 2] = $0 + 16;
  HEAP32[$0 + 8 >> 2] = 0;
  while (1) {
   label$2 : {
    if (!$705($0 + 344 | 0, $0 + 336 | 0)) {
     break label$2
    }
    if (HEAP32[$0 + 188 >> 2] == ($19($2_1) + $1_1 | 0)) {
     $3 = $19($2_1);
     $90($2_1, $19($2_1) << 1);
     $90($2_1, $89($2_1));
     $1_1 = $933($2_1, 0);
     HEAP32[$0 + 188 >> 2] = $3 + $1_1;
    }
    if ($989($706($0 + 344 | 0), 16, $1_1, $0 + 188 | 0, $0 + 8 | 0, 0, $6_1, $0 + 16 | 0, $0 + 12 | 0, $0 + 224 | 0)) {
     break label$2
    }
    $708($0 + 344 | 0);
    continue;
   }
   break;
  };
  $90($2_1, HEAP32[$0 + 188 >> 2] - $1_1 | 0);
  $1_1 = $93($2_1);
  $3 = $973();
  HEAP32[$0 >> 2] = $5_1;
  if (($974($1_1, $3, $0) | 0) != 1) {
   HEAP32[$4_1 >> 2] = 4
  }
  if ($709($0 + 344 | 0, $0 + 336 | 0)) {
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 2
  }
  $1_1 = HEAP32[$0 + 344 >> 2];
  $1597($2_1);
  $1597($6_1);
  global$0 = $0 + 352 | 0;
  return $1_1 | 0;
 }
 
 function $1009($0, $1_1, $2_1, $3) {
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1_1, $2_1, $3) | 0;
 }
 
 function $1010($0, $1_1, $2_1) {
  $2_1 = HEAP32[$2_1 >> 2];
  while (1) {
   label$2 : {
    if (($0 | 0) != ($1_1 | 0)) {
     if (($2_1 | 0) != HEAP32[$0 >> 2]) {
      break label$2
     }
    } else {
     $0 = $1_1
    }
    return $0;
   }
   $0 = $0 + 4 | 0;
   continue;
  };
 }
 
 function $1011($0) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0) | 0;
 }
 
 function $1012($0) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0) | 0;
 }
 
 function $1013($0, $1_1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2]]($0, $1_1);
 }
 
 function $1015($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $683($2_1 + 8 | 0, $0);
  $1009($704($2_1 + 8 | 0), 11296, 11322, $1_1);
  $924($2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
  return $1_1;
 }
 
 function $1016($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 40 >> 2] = $1_1;
  label$1 : {
   if (!(HEAP32[$2_1 + 4 >> 2] & 1)) {
    $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1_1, $2_1, $3, $4_1) | 0;
    break label$1;
   }
   $683($5_1 + 24 | 0, $2_1);
   $0 = $925($5_1 + 24 | 0);
   $924($5_1 + 24 | 0);
   label$3 : {
    if ($4_1) {
     $926($5_1 + 24 | 0, $0);
     break label$3;
    }
    $927($5_1 + 24 | 0, $0);
   }
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $1017($5_1 + 24 | 0)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
   while (1) {
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $1018($5_1 + 24 | 0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
    if ($241($5_1 + 16 | 0, $5_1 + 8 | 0)) {
     $724($5_1 + 40 | 0, HEAP8[HEAP32[$5_1 + 16 >> 2]]);
     $1020($5_1 + 16 | 0);
     continue;
    } else {
     $2_1 = HEAP32[$5_1 + 40 >> 2];
     $1597($5_1 + 24 | 0);
    }
    break;
   };
  }
  global$0 = $5_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1017($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0 = HEAP32[$180($1_1 + 8 | 0, $93($0)) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $1018($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0 = HEAP32[$180($1_1 + 8 | 0, $93($0) + $19($0) | 0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $1020($0) {
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
 }
 
 function $1021($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $0 = global$0 - 32 | 0;
  global$0 = $0;
  HEAP16[$0 + 28 >> 1] = HEAPU8[11344] | HEAPU8[11345] << 8;
  HEAP32[$0 + 24 >> 2] = HEAPU8[11340] | HEAPU8[11341] << 8 | (HEAPU8[11342] << 16 | HEAPU8[11343] << 24);
  $1022($0 + 24 | 1, 11332, 1, HEAP32[$2_1 + 4 >> 2]);
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  $5_1 = $0 + -16 | 0;
  global$0 = $5_1;
  $7_1 = $973();
  HEAP32[$0 >> 2] = $4_1;
  $6_1 = $1023($5_1, ($6_1 >>> 9 & 1) + 13 | 0, $7_1, $0 + 24 | 0, $0) + $5_1 | 0;
  $7_1 = $1024($5_1, $6_1, $2_1);
  $4_1 = $5_1 + -32 | 0;
  global$0 = $4_1;
  $683($0 + 8 | 0, $2_1);
  $1025($5_1, $7_1, $6_1, $4_1, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $924($0 + 8 | 0);
  $1_1 = $520($1_1, $4_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2_1, $3);
  global$0 = $0 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1022($0, $1_1, $2_1, $3) {
  var $4_1 = 0;
  if ($3 & 2048) {
   HEAP8[$0 | 0] = 43;
   $0 = $0 + 1 | 0;
  }
  if ($3 & 512) {
   HEAP8[$0 | 0] = 35;
   $0 = $0 + 1 | 0;
  }
  while (1) {
   $4_1 = HEAPU8[$1_1 | 0];
   if ($4_1) {
    HEAP8[$0 | 0] = $4_1;
    $0 = $0 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  $4_1 = $3 & 74;
  $1_1 = 111;
  label$5 : {
   if (($4_1 | 0) == 64) {
    break label$5
   }
   $1_1 = $3 & 16384 ? 88 : 120;
   if (($4_1 | 0) == 8) {
    break label$5
   }
   $1_1 = $2_1 ? 100 : 117;
  }
  HEAP8[$0 | 0] = $1_1;
 }
 
 function $1023($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 12 >> 2] = $2_1;
  HEAP32[$5_1 + 8 >> 2] = $4_1;
  $2_1 = $977($5_1, $5_1 + 12 | 0);
  $0 = $876($0, $1_1, $3, HEAP32[$5_1 + 8 >> 2]);
  $978($2_1);
  global$0 = $5_1 + 16 | 0;
  return $0;
 }
 
 function $1024($0, $1_1, $2_1) {
  var $3 = 0;
  $2_1 = HEAP32[$2_1 + 4 >> 2] & 176;
  if (($2_1 | 0) == 32) {
   return $1_1
  }
  label$2 : {
   if (($2_1 | 0) != 16) {
    break label$2
   }
   $2_1 = HEAPU8[$0 | 0];
   $3 = $2_1 + -43 | 0;
   if (!($3 >>> 0 > 2 | !($3 - 1))) {
    return $0 + 1 | 0
   }
   if (($2_1 | 0) != 48 | ($1_1 - $0 | 0) < 2 | (HEAPU8[$0 + 1 | 0] | 32) != 120) {
    break label$2
   }
   $0 = $0 + 2 | 0;
  }
  return $0;
 }
 
 function $1025($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  $11_1 = $526($6_1);
  $6_1 = $925($6_1);
  $1013($10_1, $6_1);
  label$1 : {
   if ($212($10_1)) {
    $971($11_1, $0, $2_1, $3);
    $6_1 = ($2_1 - $0 | 0) + $3 | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3;
   $9_1 = $0;
   $8_1 = HEAPU8[$9_1 | 0];
   $7_1 = $8_1 + -43 | 0;
   label$3 : {
    if ($7_1 >>> 0 > 2) {
     break label$3
    }
    if (!($7_1 - 1)) {
     break label$3
    }
    $9_1 = $527($11_1, $8_1 << 24 >> 24);
    $8_1 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $8_1 + 1;
    HEAP8[$8_1 | 0] = $9_1;
    $9_1 = $0 + 1 | 0;
   }
   if (!(HEAPU8[$9_1 | 0] != 48 | ($2_1 - $9_1 | 0) < 2 | (HEAPU8[$9_1 + 1 | 0] | 32) != 120)) {
    $8_1 = $527($11_1, 48);
    $7_1 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $7_1 + 1;
    HEAP8[$7_1 | 0] = $8_1;
    $8_1 = $527($11_1, HEAP8[$9_1 + 1 | 0]);
    $7_1 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $7_1 + 1;
    HEAP8[$7_1 | 0] = $8_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $1026($9_1, $2_1);
   $13_1 = $1012($6_1);
   $7_1 = 0;
   $8_1 = 0;
   $6_1 = $9_1;
   while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     $1026(($9_1 - $0 | 0) + $3 | 0, HEAP32[$5_1 >> 2]);
     $6_1 = HEAP32[$5_1 >> 2];
    } else {
     label$8 : {
      if (!HEAPU8[$933($10_1, $8_1) | 0]) {
       break label$8
      }
      if (HEAP8[$933($10_1, $8_1) | 0] != ($7_1 | 0)) {
       break label$8
      }
      $7_1 = HEAP32[$5_1 >> 2];
      HEAP32[$5_1 >> 2] = $7_1 + 1;
      HEAP8[$7_1 | 0] = $13_1;
      $8_1 = ($8_1 >>> 0 < $19($10_1) + -1 >>> 0) + $8_1 | 0;
      $7_1 = 0;
     }
     $14_1 = $527($11_1, HEAP8[$6_1 | 0]);
     $12_1 = HEAP32[$5_1 >> 2];
     HEAP32[$5_1 >> 2] = $12_1 + 1;
     HEAP8[$12_1 | 0] = $14_1;
     $6_1 = $6_1 + 1 | 0;
     $7_1 = $7_1 + 1 | 0;
     continue;
    }
    break;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : ($1_1 - $0 | 0) + $3 | 0;
  $1597($10_1);
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1026($0, $1_1) {
  $1063($0, $1_1);
 }
 
 function $1028($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $0 = global$0 - 32 | 0;
  global$0 = $0;
  HEAP32[$0 + 24 >> 2] = 37;
  HEAP32[$0 + 28 >> 2] = 0;
  $1022($0 + 24 | 1, 11334, 1, HEAP32[$2_1 + 4 >> 2]);
  $7_1 = HEAP32[$2_1 + 4 >> 2];
  $6_1 = $0 + -32 | 0;
  global$0 = $6_1;
  $8_1 = $973();
  HEAP32[$0 >> 2] = $4_1;
  HEAP32[$0 + 4 >> 2] = $5_1;
  $5_1 = $1023($6_1, ($7_1 >>> 9 & 1) + 23 | 0, $8_1, $0 + 24 | 0, $0) + $6_1 | 0;
  $7_1 = $1024($6_1, $5_1, $2_1);
  $4_1 = $6_1 + -48 | 0;
  global$0 = $4_1;
  $683($0 + 8 | 0, $2_1);
  $1025($6_1, $7_1, $5_1, $4_1, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $924($0 + 8 | 0);
  $1_1 = $520($1_1, $4_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2_1, $3);
  global$0 = $0 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1029($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $0 = global$0 - 32 | 0;
  global$0 = $0;
  HEAP16[$0 + 28 >> 1] = HEAPU8[11344] | HEAPU8[11345] << 8;
  HEAP32[$0 + 24 >> 2] = HEAPU8[11340] | HEAPU8[11341] << 8 | (HEAPU8[11342] << 16 | HEAPU8[11343] << 24);
  $1022($0 + 24 | 1, 11332, 0, HEAP32[$2_1 + 4 >> 2]);
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  $5_1 = $0 + -16 | 0;
  global$0 = $5_1;
  $7_1 = $973();
  HEAP32[$0 >> 2] = $4_1;
  $6_1 = $1023($5_1, $6_1 >>> 9 & 1 | 12, $7_1, $0 + 24 | 0, $0) + $5_1 | 0;
  $7_1 = $1024($5_1, $6_1, $2_1);
  $4_1 = $5_1 + -32 | 0;
  global$0 = $4_1;
  $683($0 + 8 | 0, $2_1);
  $1025($5_1, $7_1, $6_1, $4_1, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $924($0 + 8 | 0);
  $1_1 = $520($1_1, $4_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2_1, $3);
  global$0 = $0 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1030($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $0 = global$0 - 32 | 0;
  global$0 = $0;
  HEAP32[$0 + 24 >> 2] = 37;
  HEAP32[$0 + 28 >> 2] = 0;
  $1022($0 + 24 | 1, 11334, 0, HEAP32[$2_1 + 4 >> 2]);
  $7_1 = HEAP32[$2_1 + 4 >> 2];
  $6_1 = $0 + -32 | 0;
  global$0 = $6_1;
  $8_1 = $973();
  HEAP32[$0 >> 2] = $4_1;
  HEAP32[$0 + 4 >> 2] = $5_1;
  $5_1 = $1023($6_1, ($7_1 >>> 9 & 1 | 22) + 1 | 0, $8_1, $0 + 24 | 0, $0) + $6_1 | 0;
  $7_1 = $1024($6_1, $5_1, $2_1);
  $4_1 = $6_1 + -48 | 0;
  global$0 = $4_1;
  $683($0 + 8 | 0, $2_1);
  $1025($6_1, $7_1, $5_1, $4_1, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $924($0 + 8 | 0);
  $1_1 = $520($1_1, $4_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2_1, $3);
  global$0 = $0 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1031($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = +$4_1;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $0 = global$0 - 208 | 0;
  global$0 = $0;
  HEAP32[$0 + 200 >> 2] = 37;
  HEAP32[$0 + 204 >> 2] = 0;
  $6_1 = $1032($0 + 200 | 1, 11337, HEAP32[$2_1 + 4 >> 2]);
  HEAP32[$0 + 156 >> 2] = $0 + 160;
  $5_1 = $973();
  label$1 : {
   if ($6_1) {
    $8_1 = HEAP32[$2_1 + 8 >> 2];
    HEAPF64[$0 + 40 >> 3] = $4_1;
    HEAP32[$0 + 32 >> 2] = $8_1;
    $5_1 = $1023($0 + 160 | 0, 30, $5_1, $0 + 200 | 0, $0 + 32 | 0);
    break label$1;
   }
   HEAPF64[$0 + 48 >> 3] = $4_1;
   $5_1 = $1023($0 + 160 | 0, 30, $5_1, $0 + 200 | 0, $0 + 48 | 0);
  }
  HEAP32[$0 + 80 >> 2] = 169;
  $8_1 = $930($0 + 144 | 0, 0, $0 + 80 | 0);
  label$3 : {
   if (($5_1 | 0) >= 30) {
    $5_1 = $973();
    label$5 : {
     if ($6_1) {
      $6_1 = HEAP32[$2_1 + 8 >> 2];
      HEAPF64[$0 + 8 >> 3] = $4_1;
      HEAP32[$0 >> 2] = $6_1;
      $5_1 = $1034($0 + 156 | 0, $5_1, $0 + 200 | 0, $0);
      break label$5;
     }
     HEAPF64[$0 + 16 >> 3] = $4_1;
     $5_1 = $1034($0 + 156 | 0, $5_1, $0 + 200 | 0, $0 + 16 | 0);
    }
    $6_1 = HEAP32[$0 + 156 >> 2];
    if (!$6_1) {
     break label$3
    }
    $931($8_1, $6_1);
   }
   $7_1 = HEAP32[$0 + 156 >> 2];
   $6_1 = $7_1 + $5_1 | 0;
   $10_1 = $1024($7_1, $6_1, $2_1);
   HEAP32[$0 + 80 >> 2] = 169;
   $7_1 = $930($0 + 72 | 0, 0, $0 + 80 | 0);
   label$7 : {
    if (HEAP32[$0 + 156 >> 2] == ($0 + 160 | 0)) {
     $5_1 = $0 + 80 | 0;
     $9_1 = $0 + 160 | 0;
     break label$7;
    }
    $5_1 = $1768($5_1 << 1);
    if (!$5_1) {
     break label$3
    }
    $931($7_1, $5_1);
    $9_1 = HEAP32[$0 + 156 >> 2];
   }
   $683($0 + 56 | 0, $2_1);
   $1036($9_1, $10_1, $6_1, $5_1, $0 + 68 | 0, $0 - -64 | 0, $0 + 56 | 0);
   $924($0 + 56 | 0);
   $1_1 = $520($1_1, $5_1, HEAP32[$0 + 68 >> 2], HEAP32[$0 + 64 >> 2], $2_1, $3);
   $934($7_1);
   $934($8_1);
   global$0 = $0 + 208 | 0;
   return $1_1 | 0;
  }
  $1129();
  abort();
 }
 
 function $1032($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  if ($2_1 & 2048) {
   HEAP8[$0 | 0] = 43;
   $0 = $0 + 1 | 0;
  }
  if ($2_1 & 1024) {
   HEAP8[$0 | 0] = 35;
   $0 = $0 + 1 | 0;
  }
  $3 = $2_1 & 260;
  if (($3 | 0) != 260) {
   HEAP8[$0 | 0] = 10798;
   HEAP8[$0 + 1 | 0] = 42;
   $5_1 = 1;
   $0 = $0 + 2 | 0;
  }
  $2_1 = $2_1 & 16384;
  while (1) {
   $4_1 = HEAPU8[$1_1 | 0];
   if ($4_1) {
    HEAP8[$0 | 0] = $4_1;
    $0 = $0 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  label$6 : {
   label$7 : {
    if (($3 | 0) != 256) {
     if (($3 | 0) != 4) {
      break label$7
     }
     $1_1 = $2_1 ? 70 : 102;
     break label$6;
    }
    $1_1 = $2_1 ? 69 : 101;
    break label$6;
   }
   $1_1 = $2_1 ? 65 : 97;
   if (($3 | 0) == 260) {
    break label$6
   }
   $1_1 = $2_1 ? 71 : 103;
  }
  HEAP8[$0 | 0] = $1_1;
  return $5_1;
 }
 
 function $1034($0, $1_1, $2_1, $3) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $1_1;
  HEAP32[$4_1 + 8 >> 2] = $3;
  $1_1 = $977($4_1, $4_1 + 12 | 0);
  $0 = $878($0, $2_1, HEAP32[$4_1 + 8 >> 2]);
  $978($1_1);
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $1036($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0;
  $9_1 = global$0 - 16 | 0;
  global$0 = $9_1;
  $11_1 = $526($6_1);
  $13_1 = $925($6_1);
  $1013($9_1, $13_1);
  HEAP32[$5_1 >> 2] = $3;
  label$2 : {
   $7_1 = $0;
   $6_1 = HEAPU8[$7_1 | 0];
   $8_1 = $6_1 + -43 | 0;
   if (!($8_1 >>> 0 > 2 | !($8_1 - 1))) {
    $6_1 = $527($11_1, $6_1 << 24 >> 24);
    $7_1 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $7_1 + 1;
    HEAP8[$7_1 | 0] = $6_1;
    $7_1 = $0 + 1 | 0;
   }
   $6_1 = $7_1;
   if (!(HEAPU8[$6_1 | 0] != 48 | ($2_1 - $6_1 | 0) <= 1 | (HEAPU8[$6_1 + 1 | 0] | 32) != 120)) {
    $6_1 = $527($11_1, 48);
    $8_1 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $8_1 + 1;
    HEAP8[$8_1 | 0] = $6_1;
    $6_1 = $527($11_1, HEAP8[$7_1 + 1 | 0]);
    $8_1 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $8_1 + 1;
    HEAP8[$8_1 | 0] = $6_1;
    $7_1 = $7_1 + 2 | 0;
    $6_1 = $7_1;
    while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$2
     }
     if (!$880(HEAP8[$6_1 | 0], $973())) {
      break label$2
     }
     $6_1 = $6_1 + 1 | 0;
     continue;
    };
   }
   while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    $8_1 = HEAP8[$6_1 | 0];
    $973();
    if (!$813($8_1)) {
     break label$2
    }
    $6_1 = $6_1 + 1 | 0;
    continue;
   };
  }
  label$6 : {
   if ($212($9_1)) {
    $971($11_1, $7_1, $6_1, HEAP32[$5_1 >> 2]);
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + ($6_1 - $7_1 | 0);
    break label$6;
   }
   $1026($7_1, $6_1);
   $15_1 = $1012($13_1);
   $8_1 = $7_1;
   while (1) {
    if ($8_1 >>> 0 >= $6_1 >>> 0) {
     $1026(($7_1 - $0 | 0) + $3 | 0, HEAP32[$5_1 >> 2])
    } else {
     label$11 : {
      if (HEAP8[$933($9_1, $12_1) | 0] < 1) {
       break label$11
      }
      if (HEAP8[$933($9_1, $12_1) | 0] != ($10_1 | 0)) {
       break label$11
      }
      $10_1 = HEAP32[$5_1 >> 2];
      HEAP32[$5_1 >> 2] = $10_1 + 1;
      HEAP8[$10_1 | 0] = $15_1;
      $12_1 = ($12_1 >>> 0 < $19($9_1) + -1 >>> 0) + $12_1 | 0;
      $10_1 = 0;
     }
     $16_1 = $527($11_1, HEAP8[$8_1 | 0]);
     $14_1 = HEAP32[$5_1 >> 2];
     HEAP32[$5_1 >> 2] = $14_1 + 1;
     HEAP8[$14_1 | 0] = $16_1;
     $8_1 = $8_1 + 1 | 0;
     $10_1 = $10_1 + 1 | 0;
     continue;
    }
    break;
   };
  }
  while (1) {
   label$13 : {
    $10_1 = $11_1;
    if ($6_1 >>> 0 < $2_1 >>> 0) {
     $7_1 = HEAPU8[$6_1 | 0];
     if (($7_1 | 0) != 46) {
      break label$13
     }
     $7_1 = $1011($13_1);
     $8_1 = HEAP32[$5_1 >> 2];
     HEAP32[$5_1 >> 2] = $8_1 + 1;
     HEAP8[$8_1 | 0] = $7_1;
     $6_1 = $6_1 + 1 | 0;
    }
    $971($10_1, $6_1, $2_1, HEAP32[$5_1 >> 2]);
    $7_1 = $5_1;
    $5_1 = HEAP32[$5_1 >> 2] + ($2_1 - $6_1 | 0) | 0;
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $5_1 : ($1_1 - $0 | 0) + $3 | 0;
    $1597($9_1);
    global$0 = $9_1 + 16 | 0;
    return;
   }
   $7_1 = $527($11_1, $7_1 << 24 >> 24);
   $8_1 = HEAP32[$5_1 >> 2];
   HEAP32[$5_1 >> 2] = $8_1 + 1;
   HEAP8[$8_1 | 0] = $7_1;
   $6_1 = $6_1 + 1 | 0;
   continue;
  };
 }
 
 function $1039($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $0 = global$0 - 256 | 0;
  global$0 = $0;
  HEAP32[$0 + 248 >> 2] = 37;
  HEAP32[$0 + 252 >> 2] = 0;
  $9_1 = $1032($0 + 248 | 1, 11338, HEAP32[$2_1 + 4 >> 2]);
  HEAP32[$0 + 204 >> 2] = $0 + 208;
  $8_1 = $973();
  label$1 : {
   if ($9_1) {
    $10_1 = HEAP32[$2_1 + 8 >> 2];
    HEAP32[$0 + 72 >> 2] = $6_1;
    HEAP32[$0 + 76 >> 2] = $7_1;
    $11_1 = $0 - -64 | 0;
    HEAP32[$11_1 >> 2] = $4_1;
    HEAP32[$11_1 + 4 >> 2] = $5_1;
    HEAP32[$0 + 48 >> 2] = $10_1;
    $8_1 = $1023($0 + 208 | 0, 30, $8_1, $0 + 248 | 0, $0 + 48 | 0);
    break label$1;
   }
   HEAP32[$0 + 80 >> 2] = $4_1;
   HEAP32[$0 + 84 >> 2] = $5_1;
   HEAP32[$0 + 88 >> 2] = $6_1;
   HEAP32[$0 + 92 >> 2] = $7_1;
   $8_1 = $1023($0 + 208 | 0, 30, $8_1, $0 + 248 | 0, $0 + 80 | 0);
  }
  HEAP32[$0 + 128 >> 2] = 169;
  $10_1 = $930($0 + 192 | 0, 0, $0 + 128 | 0);
  label$3 : {
   if (($8_1 | 0) >= 30) {
    $8_1 = $973();
    label$5 : {
     if ($9_1) {
      $9_1 = HEAP32[$2_1 + 8 >> 2];
      HEAP32[$0 + 24 >> 2] = $6_1;
      HEAP32[$0 + 28 >> 2] = $7_1;
      HEAP32[$0 + 16 >> 2] = $4_1;
      HEAP32[$0 + 20 >> 2] = $5_1;
      HEAP32[$0 >> 2] = $9_1;
      $8_1 = $1034($0 + 204 | 0, $8_1, $0 + 248 | 0, $0);
      break label$5;
     }
     HEAP32[$0 + 32 >> 2] = $4_1;
     HEAP32[$0 + 36 >> 2] = $5_1;
     HEAP32[$0 + 40 >> 2] = $6_1;
     HEAP32[$0 + 44 >> 2] = $7_1;
     $8_1 = $1034($0 + 204 | 0, $8_1, $0 + 248 | 0, $0 + 32 | 0);
    }
    $4_1 = HEAP32[$0 + 204 >> 2];
    if (!$4_1) {
     break label$3
    }
    $931($10_1, $4_1);
   }
   $5_1 = HEAP32[$0 + 204 >> 2];
   $4_1 = $5_1 + $8_1 | 0;
   $6_1 = $1024($5_1, $4_1, $2_1);
   HEAP32[$0 + 128 >> 2] = 169;
   $5_1 = $930($0 + 120 | 0, 0, $0 + 128 | 0);
   label$7 : {
    if (HEAP32[$0 + 204 >> 2] == ($0 + 208 | 0)) {
     $8_1 = $0 + 128 | 0;
     $7_1 = $0 + 208 | 0;
     break label$7;
    }
    $8_1 = $1768($8_1 << 1);
    if (!$8_1) {
     break label$3
    }
    $931($5_1, $8_1);
    $7_1 = HEAP32[$0 + 204 >> 2];
   }
   $683($0 + 104 | 0, $2_1);
   $1036($7_1, $6_1, $4_1, $8_1, $0 + 116 | 0, $0 + 112 | 0, $0 + 104 | 0);
   $924($0 + 104 | 0);
   $1_1 = $520($1_1, $8_1, HEAP32[$0 + 116 >> 2], HEAP32[$0 + 112 >> 2], $2_1, $3);
   $934($5_1);
   $934($10_1);
   global$0 = $0 + 256 | 0;
   return $1_1 | 0;
  }
  $1129();
  abort();
 }
 
 function $1040($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $0 = global$0 - 96 | 0;
  global$0 = $0;
  HEAP16[$0 + 92 >> 1] = HEAPU8[11350] | HEAPU8[11351] << 8;
  HEAP32[$0 + 88 >> 2] = HEAPU8[11346] | HEAPU8[11347] << 8 | (HEAPU8[11348] << 16 | HEAPU8[11349] << 24);
  $5_1 = $973();
  HEAP32[$0 >> 2] = $4_1;
  $7_1 = $1023($0 - -64 | 0, 20, $5_1, $0 + 88 | 0, $0);
  $4_1 = $7_1 + ($0 - -64 | 0) | 0;
  $5_1 = $1024($0 - -64 | 0, $4_1, $2_1);
  $683($0 + 16 | 0, $2_1);
  $6_1 = $526($0 + 16 | 0);
  $924($0 + 16 | 0);
  $971($6_1, $0 - -64 | 0, $4_1, $0 + 16 | 0);
  $6_1 = $1_1;
  $1_1 = $7_1 + ($0 + 16 | 0) | 0;
  $1_1 = $520($6_1, $0 + 16 | 0, ($4_1 | 0) == ($5_1 | 0) ? $1_1 : (($5_1 - $0 | 0) + $0 | 0) + -48 | 0, $1_1, $2_1, $3);
  global$0 = $0 + 96 | 0;
  return $1_1 | 0;
 }
 
 function $1041($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 40 >> 2] = $1_1;
  label$1 : {
   if (!(HEAP32[$2_1 + 4 >> 2] & 1)) {
    $2_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1_1, $2_1, $3, $4_1) | 0;
    break label$1;
   }
   $683($5_1 + 24 | 0, $2_1);
   $0 = $980($5_1 + 24 | 0);
   $924($5_1 + 24 | 0);
   label$3 : {
    if ($4_1) {
     $926($5_1 + 24 | 0, $0);
     break label$3;
    }
    $927($5_1 + 24 | 0, $0);
   }
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $1017($5_1 + 24 | 0)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
   while (1) {
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $1043($5_1 + 24 | 0)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
    if ($241($5_1 + 16 | 0, $5_1 + 8 | 0)) {
     $730($5_1 + 40 | 0, HEAP32[HEAP32[$5_1 + 16 >> 2] >> 2]);
     $398($5_1 + 16 | 0);
     continue;
    } else {
     $2_1 = HEAP32[$5_1 + 40 >> 2];
     $1597($5_1 + 24 | 0);
    }
    break;
   };
  }
  global$0 = $5_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1043($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0 = HEAP32[$180($1_1 + 8 | 0, $93($0) + ($19($0) << 2) | 0) >> 2];
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $1046($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $0 = global$0 - 32 | 0;
  global$0 = $0;
  HEAP16[$0 + 28 >> 1] = HEAPU8[11344] | HEAPU8[11345] << 8;
  HEAP32[$0 + 24 >> 2] = HEAPU8[11340] | HEAPU8[11341] << 8 | (HEAPU8[11342] << 16 | HEAPU8[11343] << 24);
  $1022($0 + 24 | 1, 11332, 1, HEAP32[$2_1 + 4 >> 2]);
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  $5_1 = $0 + -16 | 0;
  global$0 = $5_1;
  $7_1 = $973();
  HEAP32[$0 >> 2] = $4_1;
  $4_1 = $6_1 >>> 9 & 1;
  $6_1 = $1023($5_1, $4_1 + 13 | 0, $7_1, $0 + 24 | 0, $0) + $5_1 | 0;
  $7_1 = $1024($5_1, $6_1, $2_1);
  $4_1 = $5_1 - (($4_1 << 3 | 96) + 11 & 112) | 0;
  global$0 = $4_1;
  $683($0 + 8 | 0, $2_1);
  $1047($5_1, $7_1, $6_1, $4_1, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $924($0 + 8 | 0);
  $1_1 = $1048($1_1, $4_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2_1, $3);
  global$0 = $0 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1047($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  $11_1 = $704($6_1);
  $6_1 = $980($6_1);
  $1013($10_1, $6_1);
  label$1 : {
   if ($212($10_1)) {
    $1009($11_1, $0, $2_1, $3);
    $6_1 = ($2_1 - $0 << 2) + $3 | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break label$1;
   }
   HEAP32[$5_1 >> 2] = $3;
   $9_1 = $0;
   $8_1 = HEAPU8[$9_1 | 0];
   $7_1 = $8_1 + -43 | 0;
   label$3 : {
    if ($7_1 >>> 0 > 2) {
     break label$3
    }
    if (!($7_1 - 1)) {
     break label$3
    }
    $9_1 = $746($11_1, $8_1 << 24 >> 24);
    $8_1 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $8_1 + 4;
    HEAP32[$8_1 >> 2] = $9_1;
    $9_1 = $0 + 1 | 0;
   }
   if (!(HEAPU8[$9_1 | 0] != 48 | ($2_1 - $9_1 | 0) < 2 | (HEAPU8[$9_1 + 1 | 0] | 32) != 120)) {
    $8_1 = $746($11_1, 48);
    $7_1 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $7_1 + 4;
    HEAP32[$7_1 >> 2] = $8_1;
    $8_1 = $746($11_1, HEAP8[$9_1 + 1 | 0]);
    $7_1 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $7_1 + 4;
    HEAP32[$7_1 >> 2] = $8_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $1026($9_1, $2_1);
   $13_1 = $1012($6_1);
   $7_1 = 0;
   $8_1 = 0;
   $6_1 = $9_1;
   while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     $1049(($9_1 - $0 << 2) + $3 | 0, HEAP32[$5_1 >> 2]);
     $6_1 = HEAP32[$5_1 >> 2];
    } else {
     label$8 : {
      if (!HEAPU8[$933($10_1, $8_1) | 0]) {
       break label$8
      }
      if (HEAP8[$933($10_1, $8_1) | 0] != ($7_1 | 0)) {
       break label$8
      }
      $7_1 = HEAP32[$5_1 >> 2];
      HEAP32[$5_1 >> 2] = $7_1 + 4;
      HEAP32[$7_1 >> 2] = $13_1;
      $8_1 = ($8_1 >>> 0 < $19($10_1) + -1 >>> 0) + $8_1 | 0;
      $7_1 = 0;
     }
     $14_1 = $746($11_1, HEAP8[$6_1 | 0]);
     $12_1 = HEAP32[$5_1 >> 2];
     HEAP32[$5_1 >> 2] = $12_1 + 4;
     HEAP32[$12_1 >> 2] = $14_1;
     $6_1 = $6_1 + 1 | 0;
     $7_1 = $7_1 + 1 | 0;
     continue;
    }
    break;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : ($1_1 - $0 << 2) + $3 | 0;
  $1597($10_1);
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1048($0, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $7_1 = HEAP32[$4_1 + 12 >> 2];
   $6_1 = $2_1 - $1_1 | 0;
   if (($6_1 | 0) >= 1) {
    $6_1 = $6_1 >> 2;
    if (($522($0, $1_1, $6_1) | 0) != ($6_1 | 0)) {
     break label$1
    }
   }
   $1_1 = $3 - $1_1 >> 2;
   $1_1 = ($7_1 | 0) > ($1_1 | 0) ? $7_1 - $1_1 | 0 : 0;
   if (($1_1 | 0) >= 1) {
    $5_1 = $1050($8_1, $1_1, $5_1);
    $7_1 = $522($0, $93($5_1), $1_1);
    $1597($5_1);
    if (($1_1 | 0) != ($7_1 | 0)) {
     break label$1
    }
   }
   $1_1 = $3 - $2_1 | 0;
   if (($1_1 | 0) >= 1) {
    $1_1 = $1_1 >> 2;
    if (($522($0, $2_1, $1_1) | 0) != ($1_1 | 0)) {
     break label$1
    }
   }
   $524($4_1);
   $9_1 = $0;
  }
  global$0 = $8_1 + 16 | 0;
  return $9_1;
 }
 
 function $1049($0, $1_1) {
  $1064($0, $1_1);
 }
 
 function $1050($0, $1_1, $2_1) {
  $25($0);
  $1623($0, $1_1, $2_1);
  return $0;
 }
 
 function $1052($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $0 = global$0 - 32 | 0;
  global$0 = $0;
  HEAP32[$0 + 24 >> 2] = 37;
  HEAP32[$0 + 28 >> 2] = 0;
  $1022($0 + 24 | 1, 11334, 1, HEAP32[$2_1 + 4 >> 2]);
  $7_1 = HEAP32[$2_1 + 4 >> 2];
  $6_1 = $0 + -32 | 0;
  global$0 = $6_1;
  $8_1 = $973();
  HEAP32[$0 >> 2] = $4_1;
  HEAP32[$0 + 4 >> 2] = $5_1;
  $4_1 = $7_1 >>> 9 & 1;
  $5_1 = $1023($6_1, $4_1 + 23 | 0, $8_1, $0 + 24 | 0, $0) + $6_1 | 0;
  $7_1 = $1024($6_1, $5_1, $2_1);
  $4_1 = $6_1 - (($4_1 << 3 | 176) + 11 & 240) | 0;
  global$0 = $4_1;
  $683($0 + 8 | 0, $2_1);
  $1047($6_1, $7_1, $5_1, $4_1, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $924($0 + 8 | 0);
  $1_1 = $1048($1_1, $4_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2_1, $3);
  global$0 = $0 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1053($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $0 = global$0 - 32 | 0;
  global$0 = $0;
  HEAP16[$0 + 28 >> 1] = HEAPU8[11344] | HEAPU8[11345] << 8;
  HEAP32[$0 + 24 >> 2] = HEAPU8[11340] | HEAPU8[11341] << 8 | (HEAPU8[11342] << 16 | HEAPU8[11343] << 24);
  $1022($0 + 24 | 1, 11332, 0, HEAP32[$2_1 + 4 >> 2]);
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  $5_1 = $0 + -16 | 0;
  global$0 = $5_1;
  $7_1 = $973();
  HEAP32[$0 >> 2] = $4_1;
  $6_1 = $1023($5_1, $6_1 >>> 9 & 1 | 12, $7_1, $0 + 24 | 0, $0) + $5_1 | 0;
  $7_1 = $1024($5_1, $6_1, $2_1);
  $4_1 = $5_1 + -96 | 0;
  global$0 = $4_1;
  $683($0 + 8 | 0, $2_1);
  $1047($5_1, $7_1, $6_1, $4_1, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $924($0 + 8 | 0);
  $1_1 = $1048($1_1, $4_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2_1, $3);
  global$0 = $0 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1054($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $0 = global$0 - 32 | 0;
  global$0 = $0;
  HEAP32[$0 + 24 >> 2] = 37;
  HEAP32[$0 + 28 >> 2] = 0;
  $1022($0 + 24 | 1, 11334, 0, HEAP32[$2_1 + 4 >> 2]);
  $7_1 = HEAP32[$2_1 + 4 >> 2];
  $6_1 = $0 + -32 | 0;
  global$0 = $6_1;
  $8_1 = $973();
  HEAP32[$0 >> 2] = $4_1;
  HEAP32[$0 + 4 >> 2] = $5_1;
  $4_1 = $7_1 >>> 9 & 1 | 22;
  $5_1 = $1023($6_1, $4_1 + 1 | 0, $8_1, $0 + 24 | 0, $0) + $6_1 | 0;
  $7_1 = $1024($6_1, $5_1, $2_1);
  $4_1 = $6_1 - (($4_1 << 3) + 11 & 240) | 0;
  global$0 = $4_1;
  $683($0 + 8 | 0, $2_1);
  $1047($6_1, $7_1, $5_1, $4_1, $0 + 20 | 0, $0 + 16 | 0, $0 + 8 | 0);
  $924($0 + 8 | 0);
  $1_1 = $1048($1_1, $4_1, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2], $2_1, $3);
  global$0 = $0 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1055($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = +$4_1;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $0 = global$0 - 384 | 0;
  global$0 = $0;
  HEAP32[$0 + 376 >> 2] = 37;
  HEAP32[$0 + 380 >> 2] = 0;
  $6_1 = $1032($0 + 376 | 1, 11337, HEAP32[$2_1 + 4 >> 2]);
  HEAP32[$0 + 332 >> 2] = $0 + 336;
  $5_1 = $973();
  label$1 : {
   if ($6_1) {
    $8_1 = HEAP32[$2_1 + 8 >> 2];
    HEAPF64[$0 + 40 >> 3] = $4_1;
    HEAP32[$0 + 32 >> 2] = $8_1;
    $5_1 = $1023($0 + 336 | 0, 30, $5_1, $0 + 376 | 0, $0 + 32 | 0);
    break label$1;
   }
   HEAPF64[$0 + 48 >> 3] = $4_1;
   $5_1 = $1023($0 + 336 | 0, 30, $5_1, $0 + 376 | 0, $0 + 48 | 0);
  }
  HEAP32[$0 + 80 >> 2] = 169;
  $8_1 = $930($0 + 320 | 0, 0, $0 + 80 | 0);
  label$3 : {
   if (($5_1 | 0) >= 30) {
    $5_1 = $973();
    label$5 : {
     if ($6_1) {
      $6_1 = HEAP32[$2_1 + 8 >> 2];
      HEAPF64[$0 + 8 >> 3] = $4_1;
      HEAP32[$0 >> 2] = $6_1;
      $5_1 = $1034($0 + 332 | 0, $5_1, $0 + 376 | 0, $0);
      break label$5;
     }
     HEAPF64[$0 + 16 >> 3] = $4_1;
     $5_1 = $1034($0 + 332 | 0, $5_1, $0 + 376 | 0, $0 + 16 | 0);
    }
    $6_1 = HEAP32[$0 + 332 >> 2];
    if (!$6_1) {
     break label$3
    }
    $931($8_1, $6_1);
   }
   $7_1 = HEAP32[$0 + 332 >> 2];
   $6_1 = $7_1 + $5_1 | 0;
   $10_1 = $1024($7_1, $6_1, $2_1);
   HEAP32[$0 + 80 >> 2] = 169;
   $7_1 = $930($0 + 72 | 0, 0, $0 + 80 | 0);
   label$7 : {
    if (HEAP32[$0 + 332 >> 2] == ($0 + 336 | 0)) {
     $5_1 = $0 + 80 | 0;
     $9_1 = $0 + 336 | 0;
     break label$7;
    }
    $5_1 = $1768($5_1 << 3);
    if (!$5_1) {
     break label$3
    }
    $931($7_1, $5_1);
    $9_1 = HEAP32[$0 + 332 >> 2];
   }
   $683($0 + 56 | 0, $2_1);
   $1058($9_1, $10_1, $6_1, $5_1, $0 + 68 | 0, $0 - -64 | 0, $0 + 56 | 0);
   $924($0 + 56 | 0);
   $1_1 = $1048($1_1, $5_1, HEAP32[$0 + 68 >> 2], HEAP32[$0 + 64 >> 2], $2_1, $3);
   $934($7_1);
   $934($8_1);
   global$0 = $0 + 384 | 0;
   return $1_1 | 0;
  }
  $1129();
  abort();
 }
 
 function $1058($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0;
  $9_1 = global$0 - 16 | 0;
  global$0 = $9_1;
  $10_1 = $704($6_1);
  $13_1 = $980($6_1);
  $1013($9_1, $13_1);
  HEAP32[$5_1 >> 2] = $3;
  label$2 : {
   $7_1 = $0;
   $6_1 = HEAPU8[$7_1 | 0];
   $8_1 = $6_1 + -43 | 0;
   if (!($8_1 >>> 0 > 2 | !($8_1 - 1))) {
    $6_1 = $746($10_1, $6_1 << 24 >> 24);
    $7_1 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $7_1 + 4;
    HEAP32[$7_1 >> 2] = $6_1;
    $7_1 = $0 + 1 | 0;
   }
   $6_1 = $7_1;
   if (!(HEAPU8[$6_1 | 0] != 48 | ($2_1 - $6_1 | 0) <= 1 | (HEAPU8[$6_1 + 1 | 0] | 32) != 120)) {
    $6_1 = $746($10_1, 48);
    $8_1 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $8_1 + 4;
    HEAP32[$8_1 >> 2] = $6_1;
    $6_1 = $746($10_1, HEAP8[$7_1 + 1 | 0]);
    $8_1 = HEAP32[$5_1 >> 2];
    HEAP32[$5_1 >> 2] = $8_1 + 4;
    HEAP32[$8_1 >> 2] = $6_1;
    $7_1 = $7_1 + 2 | 0;
    $6_1 = $7_1;
    while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$2
     }
     if (!$880(HEAP8[$6_1 | 0], $973())) {
      break label$2
     }
     $6_1 = $6_1 + 1 | 0;
     continue;
    };
   }
   while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break label$2
    }
    $8_1 = HEAP8[$6_1 | 0];
    $973();
    if (!$813($8_1)) {
     break label$2
    }
    $6_1 = $6_1 + 1 | 0;
    continue;
   };
  }
  label$6 : {
   if ($212($9_1)) {
    $1009($10_1, $7_1, $6_1, HEAP32[$5_1 >> 2]);
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + ($6_1 - $7_1 << 2);
    break label$6;
   }
   $1026($7_1, $6_1);
   $15_1 = $1012($13_1);
   $8_1 = $7_1;
   while (1) {
    if ($8_1 >>> 0 >= $6_1 >>> 0) {
     $1049(($7_1 - $0 << 2) + $3 | 0, HEAP32[$5_1 >> 2])
    } else {
     label$11 : {
      if (HEAP8[$933($9_1, $11_1) | 0] < 1) {
       break label$11
      }
      if (HEAP8[$933($9_1, $11_1) | 0] != ($12_1 | 0)) {
       break label$11
      }
      $12_1 = HEAP32[$5_1 >> 2];
      HEAP32[$5_1 >> 2] = $12_1 + 4;
      HEAP32[$12_1 >> 2] = $15_1;
      $11_1 = ($11_1 >>> 0 < $19($9_1) + -1 >>> 0) + $11_1 | 0;
      $12_1 = 0;
     }
     $16_1 = $746($10_1, HEAP8[$8_1 | 0]);
     $14_1 = HEAP32[$5_1 >> 2];
     HEAP32[$5_1 >> 2] = $14_1 + 4;
     HEAP32[$14_1 >> 2] = $16_1;
     $8_1 = $8_1 + 1 | 0;
     $12_1 = $12_1 + 1 | 0;
     continue;
    }
    break;
   };
  }
  label$12 : {
   label$13 : {
    while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break label$13
     }
     $7_1 = HEAPU8[$6_1 | 0];
     if (($7_1 | 0) != 46) {
      $7_1 = $746($10_1, $7_1 << 24 >> 24);
      $8_1 = HEAP32[$5_1 >> 2];
      HEAP32[$5_1 >> 2] = $8_1 + 4;
      HEAP32[$8_1 >> 2] = $7_1;
      $6_1 = $6_1 + 1 | 0;
      continue;
     }
     break;
    };
    $7_1 = $1011($13_1);
    $11_1 = HEAP32[$5_1 >> 2];
    $8_1 = $11_1 + 4 | 0;
    HEAP32[$5_1 >> 2] = $8_1;
    HEAP32[$11_1 >> 2] = $7_1;
    $6_1 = $6_1 + 1 | 0;
    break label$12;
   }
   $8_1 = HEAP32[$5_1 >> 2];
  }
  $1009($10_1, $6_1, $2_1, $8_1);
  $7_1 = $5_1;
  $5_1 = HEAP32[$5_1 >> 2] + ($2_1 - $6_1 << 2) | 0;
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $5_1 : ($1_1 - $0 << 2) + $3 | 0;
  $1597($9_1);
  global$0 = $9_1 + 16 | 0;
 }
 
 function $1061($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $0 = global$0 - 432 | 0;
  global$0 = $0;
  HEAP32[$0 + 424 >> 2] = 37;
  HEAP32[$0 + 428 >> 2] = 0;
  $9_1 = $1032($0 + 424 | 1, 11338, HEAP32[$2_1 + 4 >> 2]);
  HEAP32[$0 + 380 >> 2] = $0 + 384;
  $8_1 = $973();
  label$1 : {
   if ($9_1) {
    $10_1 = HEAP32[$2_1 + 8 >> 2];
    HEAP32[$0 + 72 >> 2] = $6_1;
    HEAP32[$0 + 76 >> 2] = $7_1;
    $11_1 = $0 - -64 | 0;
    HEAP32[$11_1 >> 2] = $4_1;
    HEAP32[$11_1 + 4 >> 2] = $5_1;
    HEAP32[$0 + 48 >> 2] = $10_1;
    $8_1 = $1023($0 + 384 | 0, 30, $8_1, $0 + 424 | 0, $0 + 48 | 0);
    break label$1;
   }
   HEAP32[$0 + 80 >> 2] = $4_1;
   HEAP32[$0 + 84 >> 2] = $5_1;
   HEAP32[$0 + 88 >> 2] = $6_1;
   HEAP32[$0 + 92 >> 2] = $7_1;
   $8_1 = $1023($0 + 384 | 0, 30, $8_1, $0 + 424 | 0, $0 + 80 | 0);
  }
  HEAP32[$0 + 128 >> 2] = 169;
  $10_1 = $930($0 + 368 | 0, 0, $0 + 128 | 0);
  label$3 : {
   if (($8_1 | 0) >= 30) {
    $8_1 = $973();
    label$5 : {
     if ($9_1) {
      $9_1 = HEAP32[$2_1 + 8 >> 2];
      HEAP32[$0 + 24 >> 2] = $6_1;
      HEAP32[$0 + 28 >> 2] = $7_1;
      HEAP32[$0 + 16 >> 2] = $4_1;
      HEAP32[$0 + 20 >> 2] = $5_1;
      HEAP32[$0 >> 2] = $9_1;
      $8_1 = $1034($0 + 380 | 0, $8_1, $0 + 424 | 0, $0);
      break label$5;
     }
     HEAP32[$0 + 32 >> 2] = $4_1;
     HEAP32[$0 + 36 >> 2] = $5_1;
     HEAP32[$0 + 40 >> 2] = $6_1;
     HEAP32[$0 + 44 >> 2] = $7_1;
     $8_1 = $1034($0 + 380 | 0, $8_1, $0 + 424 | 0, $0 + 32 | 0);
    }
    $4_1 = HEAP32[$0 + 380 >> 2];
    if (!$4_1) {
     break label$3
    }
    $931($10_1, $4_1);
   }
   $5_1 = HEAP32[$0 + 380 >> 2];
   $4_1 = $5_1 + $8_1 | 0;
   $6_1 = $1024($5_1, $4_1, $2_1);
   HEAP32[$0 + 128 >> 2] = 169;
   $5_1 = $930($0 + 120 | 0, 0, $0 + 128 | 0);
   label$7 : {
    if (HEAP32[$0 + 380 >> 2] == ($0 + 384 | 0)) {
     $8_1 = $0 + 128 | 0;
     $7_1 = $0 + 384 | 0;
     break label$7;
    }
    $8_1 = $1768($8_1 << 3);
    if (!$8_1) {
     break label$3
    }
    $931($5_1, $8_1);
    $7_1 = HEAP32[$0 + 380 >> 2];
   }
   $683($0 + 104 | 0, $2_1);
   $1058($7_1, $6_1, $4_1, $8_1, $0 + 116 | 0, $0 + 112 | 0, $0 + 104 | 0);
   $924($0 + 104 | 0);
   $1_1 = $1048($1_1, $8_1, HEAP32[$0 + 116 >> 2], HEAP32[$0 + 112 >> 2], $2_1, $3);
   $934($5_1);
   $934($10_1);
   global$0 = $0 + 432 | 0;
   return $1_1 | 0;
  }
  $1129();
  abort();
 }
 
 function $1062($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $0 = global$0 - 208 | 0;
  global$0 = $0;
  HEAP16[$0 + 204 >> 1] = HEAPU8[11350] | HEAPU8[11351] << 8;
  HEAP32[$0 + 200 >> 2] = HEAPU8[11346] | HEAPU8[11347] << 8 | (HEAPU8[11348] << 16 | HEAPU8[11349] << 24);
  $5_1 = $973();
  HEAP32[$0 >> 2] = $4_1;
  $7_1 = $1023($0 + 176 | 0, 20, $5_1, $0 + 200 | 0, $0);
  $4_1 = $7_1 + ($0 + 176 | 0) | 0;
  $5_1 = $1024($0 + 176 | 0, $4_1, $2_1);
  $683($0 + 16 | 0, $2_1);
  $6_1 = $704($0 + 16 | 0);
  $924($0 + 16 | 0);
  $1009($6_1, $0 + 176 | 0, $4_1, $0 + 16 | 0);
  $6_1 = $1_1;
  $1_1 = ($0 + 16 | 0) + ($7_1 << 2) | 0;
  $1_1 = $1048($6_1, $0 + 16 | 0, ($4_1 | 0) == ($5_1 | 0) ? $1_1 : (($5_1 - $0 << 2) + $0 | 0) + -688 | 0, $1_1, $2_1, $3);
  global$0 = $0 + 208 | 0;
  return $1_1 | 0;
 }
 
 function $1063($0, $1_1) {
  label$1 : {
   if (($0 | 0) == ($1_1 | 0)) {
    break label$1
   }
   while (1) {
    $1_1 = $1_1 + -1 | 0;
    if ($0 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $1122($0, $1_1);
    $0 = $0 + 1 | 0;
    continue;
   };
  }
 }
 
 function $1064($0, $1_1) {
  label$1 : {
   if (($0 | 0) == ($1_1 | 0)) {
    break label$1
   }
   while (1) {
    $1_1 = $1_1 + -4 | 0;
    if ($0 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
    $168($0, $1_1);
    $0 = $0 + 4 | 0;
    continue;
   };
  }
 }
 
 function $1065($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[$8_1 + 16 >> 2] = $2_1;
  HEAP32[$8_1 + 24 >> 2] = $1_1;
  $683($8_1 + 8 | 0, $3);
  $9_1 = $526($8_1 + 8 | 0);
  $924($8_1 + 8 | 0);
  HEAP32[$4_1 >> 2] = 0;
  $2_1 = 0;
  label$1 : {
   while (1) {
    if ($2_1 | ($6_1 | 0) == ($7_1 | 0)) {
     break label$1
    }
    label$3 : {
     if ($688($8_1 + 24 | 0, $8_1 + 16 | 0)) {
      break label$3
     }
     label$4 : {
      if (($1066($9_1, HEAP8[$6_1 | 0]) | 0) == 37) {
       $2_1 = $6_1 + 1 | 0;
       if (($7_1 | 0) == ($2_1 | 0)) {
        break label$3
       }
       $10_1 = 0;
       $1_1 = $1066($9_1, HEAP8[$2_1 | 0]);
       label$6 : {
        if (!(($1_1 | 0) == 69 | ($1_1 & 255) == 48)) {
         $2_1 = $6_1;
         break label$6;
        }
        $6_1 = $6_1 + 2 | 0;
        if (($6_1 | 0) == ($7_1 | 0)) {
         break label$3
        }
        $10_1 = $1_1;
        $1_1 = $1066($9_1, HEAP8[$6_1 | 0]);
       }
       (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$8_1 + 24 >> 2], HEAP32[$8_1 + 16 >> 2], $3, $4_1, $5_1, $1_1, $10_1) | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       $6_1 = $2_1 + 2 | 0;
       break label$4;
      }
      if ($686($9_1, 8192, HEAP8[$6_1 | 0])) {
       while (1) {
        label$10 : {
         $6_1 = $6_1 + 1 | 0;
         if (($7_1 | 0) == ($6_1 | 0)) {
          $6_1 = $7_1;
          break label$10;
         }
         if ($686($9_1, 8192, HEAP8[$6_1 | 0])) {
          continue
         }
        }
        break;
       };
       while (1) {
        if (!$684($8_1 + 24 | 0, $8_1 + 16 | 0)) {
         break label$4
        }
        if (!$686($9_1, 8192, $685($8_1 + 24 | 0))) {
         break label$4
        }
        $687($8_1 + 24 | 0);
        continue;
       };
      }
      if (($932($9_1, $685($8_1 + 24 | 0)) | 0) == ($932($9_1, HEAP8[$6_1 | 0]) | 0)) {
       $6_1 = $6_1 + 1 | 0;
       $687($8_1 + 24 | 0);
       break label$4;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $2_1 = HEAP32[$4_1 >> 2];
     continue;
    }
    break;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  if ($688($8_1 + 24 | 0, $8_1 + 16 | 0)) {
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 2
  }
  global$0 = $8_1 + 32 | 0;
  return HEAP32[$8_1 + 24 >> 2];
 }
 
 function $1066($0, $1_1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1_1, 0) | 0;
 }
 
 function $1067($0) {
  $0 = $0 | 0;
  return 2;
 }
 
 function $1068($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 8 >> 2] = 624576549;
  HEAP32[$6_1 + 12 >> 2] = 1394948685;
  $0 = $1065($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1 + 8 | 0, $6_1 + 16 | 0);
  global$0 = $6_1 + 16 | 0;
  return $0 | 0;
 }
 
 function $1069($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = $0;
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 20 >> 2]]($0 + 8 | 0) | 0;
  return $1065($6_1, $1_1, $2_1, $3, $4_1, $5_1, $93($0), $93($0) + $19($0) | 0) | 0;
 }
 
 function $1070($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 8 >> 2] = $1_1;
  $683($6_1, $3);
  $1_1 = $526($6_1);
  $924($6_1);
  $1071($0, $5_1 + 24 | 0, $6_1 + 8 | 0, $2_1, $4_1, $1_1);
  global$0 = $6_1 + 16 | 0;
  return HEAP32[$6_1 + 8 >> 2];
 }
 
 function $1071($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] >> 2]]($0 + 8 | 0) | 0;
  $0 = $928($2_1, $3, $0, $0 + 168 | 0, $5_1, $4_1, 0) - $0 | 0;
  if (($0 | 0) <= 167) {
   HEAP32[$1_1 >> 2] = (($0 | 0) / 12 | 0) % 7
  }
 }
 
 function $1072($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 8 >> 2] = $1_1;
  $683($6_1, $3);
  $1_1 = $526($6_1);
  $924($6_1);
  $1073($0, $5_1 + 16 | 0, $6_1 + 8 | 0, $2_1, $4_1, $1_1);
  global$0 = $6_1 + 16 | 0;
  return HEAP32[$6_1 + 8 >> 2];
 }
 
 function $1073($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 4 >> 2]]($0 + 8 | 0) | 0;
  $0 = $928($2_1, $3, $0, $0 + 288 | 0, $5_1, $4_1, 0) - $0 | 0;
  if (($0 | 0) <= 287) {
   HEAP32[$1_1 >> 2] = (($0 | 0) / 12 | 0) % 12
  }
 }
 
 function $1074($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 8 >> 2] = $1_1;
  $683($0, $3);
  $1_1 = $526($0);
  $924($0);
  $1075($5_1 + 20 | 0, $0 + 8 | 0, $2_1, $4_1, $1_1);
  global$0 = $0 + 16 | 0;
  return HEAP32[$0 + 8 >> 2];
 }
 
 function $1075($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1076($1_1, $2_1, $3, $4_1, 4);
  if (!(HEAPU8[$3 | 0] & 4)) {
   HEAP32[$0 >> 2] = (($1_1 | 0) < 69 ? $1_1 + 2e3 | 0 : ($1_1 | 0) < 100 ? $1_1 + 1900 | 0 : $1_1) + -1900
  }
 }
 
 function $1076($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 8 >> 2] = $1_1;
  label$1 : {
   if ($688($0, $5_1 + 8 | 0)) {
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 6;
    $1_1 = 0;
    break label$1;
   }
   $1_1 = $685($0);
   if (!$686($3, 2048, $1_1)) {
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 4;
    $1_1 = 0;
    break label$1;
   }
   $1_1 = $1066($3, $1_1);
   while (1) {
    label$5 : {
     $1_1 = $1_1 + -48 | 0;
     $687($0);
     if (!$684($0, $5_1 + 8 | 0) | ($4_1 | 0) < 2) {
      break label$5
     }
     $6_1 = $685($0);
     if (!$686($3, 2048, $6_1)) {
      break label$1
     }
     $4_1 = $4_1 + -1 | 0;
     $1_1 = $1066($3, $6_1) + Math_imul($1_1, 10) | 0;
     continue;
    }
    break;
   };
   if (!$688($0, $5_1 + 8 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 2;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1;
 }
 
 function $1077($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[$7_1 + 24 >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $683($7_1 + 8 | 0, $3);
  $8_1 = $526($7_1 + 8 | 0);
  $924($7_1 + 8 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     $9_1 = $6_1 + -65 | 0;
     if ($9_1 >>> 0 > 56) {
      if (($6_1 | 0) != 37) {
       break label$3
      }
      $1078($7_1 + 24 | 0, $2_1, $4_1, $8_1);
      break label$2;
     }
     label$5 : {
      switch ($9_1 - 1 | 0) {
      default:
       $1071($0, $5_1 + 24 | 0, $7_1 + 24 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 0:
      case 32:
      case 38:
       $1073($0, $5_1 + 16 | 0, $7_1 + 24 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 33:
       $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 12 >> 2]]($0 + 8 | 0) | 0;
       (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1065($0, HEAP32[$7_1 + 24 >> 2], $2_1, $3, $4_1, $5_1, $93($1_1), $93($1_1) + $19($1_1) | 0)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       break label$2;
      case 34:
      case 35:
       $1079($5_1 + 12 | 0, $7_1 + 24 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 2:
       HEAP32[$7_1 + 8 >> 2] = 623865125;
       HEAP32[$7_1 + 12 >> 2] = 2032480100;
       (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1065($0, $1_1, $2_1, $3, $4_1, $5_1, $7_1 + 8 | 0, $7_1 + 16 | 0)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       break label$2;
      case 4:
       HEAP32[$7_1 + 8 >> 2] = 623728933;
       HEAP32[$7_1 + 12 >> 2] = 1680158061;
       (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1065($0, $1_1, $2_1, $3, $4_1, $5_1, $7_1 + 8 | 0, $7_1 + 16 | 0)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       break label$2;
      case 6:
       $1080($5_1 + 8 | 0, $7_1 + 24 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 7:
       $1081($5_1 + 8 | 0, $7_1 + 24 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 40:
       $1082($5_1 + 28 | 0, $7_1 + 24 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 43:
       $1083($5_1 + 16 | 0, $7_1 + 24 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 11:
       $1084($5_1 + 4 | 0, $7_1 + 24 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 44:
      case 50:
       $1085($7_1 + 24 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 46:
       $1086($0, $5_1 + 8 | 0, $7_1 + 24 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 48:
       $6_1 = HEAPU8[11359] | HEAPU8[11360] << 8 | (HEAPU8[11361] << 16 | HEAPU8[11362] << 24);
       HEAP8[$7_1 + 15 | 0] = $6_1;
       HEAP8[$7_1 + 16 | 0] = $6_1 >>> 8;
       HEAP8[$7_1 + 17 | 0] = $6_1 >>> 16;
       HEAP8[$7_1 + 18 | 0] = $6_1 >>> 24;
       $6_1 = HEAPU8[11356] | HEAPU8[11357] << 8 | (HEAPU8[11358] << 16 | HEAPU8[11359] << 24);
       HEAP32[$7_1 + 8 >> 2] = HEAPU8[11352] | HEAPU8[11353] << 8 | (HEAPU8[11354] << 16 | HEAPU8[11355] << 24);
       HEAP32[$7_1 + 12 >> 2] = $6_1;
       (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1065($0, $1_1, $2_1, $3, $4_1, $5_1, $7_1 + 8 | 0, $7_1 + 19 | 0)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       break label$2;
      case 16:
       HEAP8[$7_1 + 12 | 0] = HEAPU8[11367];
       HEAP32[$7_1 + 8 >> 2] = HEAPU8[11363] | HEAPU8[11364] << 8 | (HEAPU8[11365] << 16 | HEAPU8[11366] << 24);
       (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1065($0, $1_1, $2_1, $3, $4_1, $5_1, $7_1 + 8 | 0, $7_1 + 13 | 0)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       break label$2;
      case 17:
       $1087($5_1, $7_1 + 24 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 18:
       HEAP32[$7_1 + 8 >> 2] = 624576549;
       HEAP32[$7_1 + 12 >> 2] = 1394948685;
       (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1065($0, $1_1, $2_1, $3, $4_1, $5_1, $7_1 + 8 | 0, $7_1 + 16 | 0)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       break label$2;
      case 53:
       $1088($5_1 + 24 | 0, $7_1 + 24 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 54:
       $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1_1, $2_1, $3, $4_1, $5_1) | 0;
       break label$1;
      case 22:
       $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 24 >> 2]]($0 + 8 | 0) | 0;
       (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1065($0, HEAP32[$7_1 + 24 >> 2], $2_1, $3, $4_1, $5_1, $93($1_1), $93($1_1) + $19($1_1) | 0)), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       break label$2;
      case 55:
       $1075($5_1 + 20 | 0, $7_1 + 24 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 1:
      case 3:
      case 5:
      case 8:
      case 9:
      case 10:
      case 12:
      case 13:
      case 14:
      case 15:
      case 19:
      case 20:
      case 21:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 36:
      case 37:
      case 39:
      case 41:
      case 42:
      case 45:
      case 47:
      case 49:
      case 51:
      case 52:
       break label$3;
      case 23:
       break label$5;
      };
     }
     $1089($5_1 + 20 | 0, $7_1 + 24 | 0, $2_1, $4_1, $8_1);
     break label$2;
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 4;
   }
   $0 = HEAP32[$7_1 + 24 >> 2];
  }
  global$0 = $7_1 + 32 | 0;
  return $0 | 0;
 }
 
 function $1078($0, $1_1, $2_1, $3) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  $1_1 = 6;
  label$1 : {
   label$2 : {
    if ($688($0, $4_1 + 8 | 0)) {
     break label$2
    }
    $1_1 = 4;
    if (($1066($3, $685($0)) | 0) != 37) {
     break label$2
    }
    $1_1 = 2;
    if (!$688($687($0), $4_1 + 8 | 0)) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | $1_1;
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1079($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1076($1_1, $2_1, $3, $4_1, 2);
  $2_1 = HEAP32[$3 >> 2];
  if (!($1_1 + -1 >>> 0 > 30 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3 >> 2] = $2_1 | 4;
 }
 
 function $1080($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1076($1_1, $2_1, $3, $4_1, 2);
  $2_1 = HEAP32[$3 >> 2];
  if (!(($1_1 | 0) > 23 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3 >> 2] = $2_1 | 4;
 }
 
 function $1081($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1076($1_1, $2_1, $3, $4_1, 2);
  $2_1 = HEAP32[$3 >> 2];
  if (!($1_1 + -1 >>> 0 > 11 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3 >> 2] = $2_1 | 4;
 }
 
 function $1082($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1076($1_1, $2_1, $3, $4_1, 3);
  $2_1 = HEAP32[$3 >> 2];
  if (!(($1_1 | 0) > 365 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3 >> 2] = $2_1 | 4;
 }
 
 function $1083($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1076($1_1, $2_1, $3, $4_1, 2);
  $2_1 = HEAP32[$3 >> 2];
  if (!(($1_1 | 0) > 12 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1 + -1;
   return;
  }
  HEAP32[$3 >> 2] = $2_1 | 4;
 }
 
 function $1084($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1076($1_1, $2_1, $3, $4_1, 2);
  $2_1 = HEAP32[$3 >> 2];
  if (!(($1_1 | 0) > 59 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3 >> 2] = $2_1 | 4;
 }
 
 function $1085($0, $1_1, $2_1, $3) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  while (1) {
   label$2 : {
    if (!$684($0, $4_1 + 8 | 0)) {
     break label$2
    }
    if (!$686($3, 8192, $685($0))) {
     break label$2
    }
    $687($0);
    continue;
   }
   break;
  };
  if ($688($0, $4_1 + 8 | 0)) {
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 2
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1086($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2]]($0 + 8 | 0) | 0;
  if (($19($0) | 0) == (0 - $19($0 + 12 | 0) | 0)) {
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 4;
   return;
  }
  $0 = $928($2_1, $3, $0, $0 + 24 | 0, $5_1, $4_1, 0) - $0 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  if (!($0 | ($2_1 | 0) != 12)) {
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  if (!(($0 | 0) != 12 | ($2_1 | 0) > 11)) {
   HEAP32[$1_1 >> 2] = $2_1 + 12
  }
 }
 
 function $1087($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1076($1_1, $2_1, $3, $4_1, 2);
  $2_1 = HEAP32[$3 >> 2];
  if (!(($1_1 | 0) > 60 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3 >> 2] = $2_1 | 4;
 }
 
 function $1088($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1076($1_1, $2_1, $3, $4_1, 1);
  $2_1 = HEAP32[$3 >> 2];
  if (!(($1_1 | 0) > 6 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3 >> 2] = $2_1 | 4;
 }
 
 function $1089($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1076($1_1, $2_1, $3, $4_1, 4);
  if (!(HEAPU8[$3 | 0] & 4)) {
   HEAP32[$0 >> 2] = $1_1 + -1900
  }
 }
 
 function $1090($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[$8_1 + 16 >> 2] = $2_1;
  HEAP32[$8_1 + 24 >> 2] = $1_1;
  $683($8_1 + 8 | 0, $3);
  $9_1 = $704($8_1 + 8 | 0);
  $924($8_1 + 8 | 0);
  HEAP32[$4_1 >> 2] = 0;
  $2_1 = 0;
  label$1 : {
   while (1) {
    if ($2_1 | ($6_1 | 0) == ($7_1 | 0)) {
     break label$1
    }
    label$3 : {
     if ($709($8_1 + 24 | 0, $8_1 + 16 | 0)) {
      break label$3
     }
     label$4 : {
      if (($1091($9_1, HEAP32[$6_1 >> 2]) | 0) == 37) {
       $2_1 = $6_1 + 4 | 0;
       if (($7_1 | 0) == ($2_1 | 0)) {
        break label$3
       }
       $10_1 = 0;
       $1_1 = $1091($9_1, HEAP32[$2_1 >> 2]);
       label$6 : {
        if (!(($1_1 | 0) == 69 | ($1_1 & 255) == 48)) {
         $2_1 = $6_1;
         break label$6;
        }
        $6_1 = $6_1 + 8 | 0;
        if (($6_1 | 0) == ($7_1 | 0)) {
         break label$3
        }
        $10_1 = $1_1;
        $1_1 = $1091($9_1, HEAP32[$6_1 >> 2]);
       }
       (wasm2js_i32$0 = $8_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, HEAP32[$8_1 + 24 >> 2], HEAP32[$8_1 + 16 >> 2], $3, $4_1, $5_1, $1_1, $10_1) | 0), HEAP32[wasm2js_i32$0 + 24 >> 2] = wasm2js_i32$1;
       $6_1 = $2_1 + 8 | 0;
       break label$4;
      }
      if ($707($9_1, 8192, HEAP32[$6_1 >> 2])) {
       while (1) {
        label$10 : {
         $6_1 = $6_1 + 4 | 0;
         if (($7_1 | 0) == ($6_1 | 0)) {
          $6_1 = $7_1;
          break label$10;
         }
         if ($707($9_1, 8192, HEAP32[$6_1 >> 2])) {
          continue
         }
        }
        break;
       };
       while (1) {
        if (!$705($8_1 + 24 | 0, $8_1 + 16 | 0)) {
         break label$4
        }
        if (!$707($9_1, 8192, $706($8_1 + 24 | 0))) {
         break label$4
        }
        $708($8_1 + 24 | 0);
        continue;
       };
      }
      if (($527($9_1, $706($8_1 + 24 | 0)) | 0) == ($527($9_1, HEAP32[$6_1 >> 2]) | 0)) {
       $6_1 = $6_1 + 4 | 0;
       $708($8_1 + 24 | 0);
       break label$4;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $2_1 = HEAP32[$4_1 >> 2];
     continue;
    }
    break;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  if ($709($8_1 + 24 | 0, $8_1 + 16 | 0)) {
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 2
  }
  global$0 = $8_1 + 32 | 0;
  return HEAP32[$8_1 + 24 >> 2];
 }
 
 function $1091($0, $1_1) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, $1_1, 0) | 0;
 }
 
 function $1092($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $7_1 = HEAP32[2887];
  HEAP32[$6_1 + 24 >> 2] = HEAP32[2886];
  HEAP32[$6_1 + 28 >> 2] = $7_1;
  $7_1 = HEAP32[2885];
  HEAP32[$6_1 + 16 >> 2] = HEAP32[2884];
  HEAP32[$6_1 + 20 >> 2] = $7_1;
  $7_1 = HEAP32[2883];
  HEAP32[$6_1 + 8 >> 2] = HEAP32[2882];
  HEAP32[$6_1 + 12 >> 2] = $7_1;
  $7_1 = HEAP32[2881];
  HEAP32[$6_1 >> 2] = HEAP32[2880];
  HEAP32[$6_1 + 4 >> 2] = $7_1;
  $0 = $1090($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $6_1 + 32 | 0);
  global$0 = $6_1 + 32 | 0;
  return $0 | 0;
 }
 
 function $1093($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = $0;
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 20 >> 2]]($0 + 8 | 0) | 0;
  return $1090($6_1, $1_1, $2_1, $3, $4_1, $5_1, $93($0), $93($0) + ($19($0) << 2) | 0) | 0;
 }
 
 function $1099($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 8 >> 2] = $1_1;
  $683($6_1, $3);
  $1_1 = $704($6_1);
  $924($6_1);
  $1100($0, $5_1 + 24 | 0, $6_1 + 8 | 0, $2_1, $4_1, $1_1);
  global$0 = $6_1 + 16 | 0;
  return HEAP32[$6_1 + 8 >> 2];
 }
 
 function $1100($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] >> 2]]($0 + 8 | 0) | 0;
  $0 = $981($2_1, $3, $0, $0 + 168 | 0, $5_1, $4_1, 0) - $0 | 0;
  if (($0 | 0) <= 167) {
   HEAP32[$1_1 >> 2] = (($0 | 0) / 12 | 0) % 7
  }
 }
 
 function $1101($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 8 >> 2] = $1_1;
  $683($6_1, $3);
  $1_1 = $704($6_1);
  $924($6_1);
  $1102($0, $5_1 + 16 | 0, $6_1 + 8 | 0, $2_1, $4_1, $1_1);
  global$0 = $6_1 + 16 | 0;
  return HEAP32[$6_1 + 8 >> 2];
 }
 
 function $1102($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 4 >> 2]]($0 + 8 | 0) | 0;
  $0 = $981($2_1, $3, $0, $0 + 288 | 0, $5_1, $4_1, 0) - $0 | 0;
  if (($0 | 0) <= 287) {
   HEAP32[$1_1 >> 2] = (($0 | 0) / 12 | 0) % 12
  }
 }
 
 function $1103($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 8 >> 2] = $1_1;
  $683($0, $3);
  $1_1 = $704($0);
  $924($0);
  $1104($5_1 + 20 | 0, $0 + 8 | 0, $2_1, $4_1, $1_1);
  global$0 = $0 + 16 | 0;
  return HEAP32[$0 + 8 >> 2];
 }
 
 function $1104($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1105($1_1, $2_1, $3, $4_1, 4);
  if (!(HEAPU8[$3 | 0] & 4)) {
   HEAP32[$0 >> 2] = (($1_1 | 0) < 69 ? $1_1 + 2e3 | 0 : ($1_1 | 0) < 100 ? $1_1 + 1900 | 0 : $1_1) + -1900
  }
 }
 
 function $1105($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 8 >> 2] = $1_1;
  label$1 : {
   if ($709($0, $5_1 + 8 | 0)) {
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 6;
    $1_1 = 0;
    break label$1;
   }
   $1_1 = $706($0);
   if (!$707($3, 2048, $1_1)) {
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 4;
    $1_1 = 0;
    break label$1;
   }
   $1_1 = $1091($3, $1_1);
   while (1) {
    label$5 : {
     $1_1 = $1_1 + -48 | 0;
     $708($0);
     if (!$705($0, $5_1 + 8 | 0) | ($4_1 | 0) < 2) {
      break label$5
     }
     $6_1 = $706($0);
     if (!$707($3, 2048, $6_1)) {
      break label$1
     }
     $4_1 = $4_1 + -1 | 0;
     $1_1 = $1091($3, $6_1) + Math_imul($1_1, 10) | 0;
     continue;
    }
    break;
   };
   if (!$709($0, $5_1 + 8 | 0)) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 2;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1;
 }
 
 function $1106($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = global$0 + -64 | 0;
  global$0 = $7_1;
  HEAP32[$7_1 + 56 >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $683($7_1, $3);
  $8_1 = $704($7_1);
  $924($7_1);
  label$1 : {
   label$2 : {
    label$3 : {
     $9_1 = $6_1 + -65 | 0;
     if ($9_1 >>> 0 > 56) {
      if (($6_1 | 0) != 37) {
       break label$3
      }
      $1107($7_1 + 56 | 0, $2_1, $4_1, $8_1);
      break label$2;
     }
     label$5 : {
      switch ($9_1 - 1 | 0) {
      default:
       $1100($0, $5_1 + 24 | 0, $7_1 + 56 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 0:
      case 32:
      case 38:
       $1102($0, $5_1 + 16 | 0, $7_1 + 56 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 33:
       $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 12 >> 2]]($0 + 8 | 0) | 0;
       (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1090($0, HEAP32[$7_1 + 56 >> 2], $2_1, $3, $4_1, $5_1, $93($1_1), $93($1_1) + ($19($1_1) << 2) | 0)), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
       break label$2;
      case 34:
      case 35:
       $1108($5_1 + 12 | 0, $7_1 + 56 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 2:
       $6_1 = HEAP32[2851];
       HEAP32[$7_1 + 24 >> 2] = HEAP32[2850];
       HEAP32[$7_1 + 28 >> 2] = $6_1;
       $6_1 = HEAP32[2849];
       HEAP32[$7_1 + 16 >> 2] = HEAP32[2848];
       HEAP32[$7_1 + 20 >> 2] = $6_1;
       $6_1 = HEAP32[2847];
       HEAP32[$7_1 + 8 >> 2] = HEAP32[2846];
       HEAP32[$7_1 + 12 >> 2] = $6_1;
       $6_1 = HEAP32[2845];
       HEAP32[$7_1 >> 2] = HEAP32[2844];
       HEAP32[$7_1 + 4 >> 2] = $6_1;
       (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1090($0, $1_1, $2_1, $3, $4_1, $5_1, $7_1, $7_1 + 32 | 0)), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
       break label$2;
      case 4:
       $6_1 = HEAP32[2859];
       HEAP32[$7_1 + 24 >> 2] = HEAP32[2858];
       HEAP32[$7_1 + 28 >> 2] = $6_1;
       $6_1 = HEAP32[2857];
       HEAP32[$7_1 + 16 >> 2] = HEAP32[2856];
       HEAP32[$7_1 + 20 >> 2] = $6_1;
       $6_1 = HEAP32[2855];
       HEAP32[$7_1 + 8 >> 2] = HEAP32[2854];
       HEAP32[$7_1 + 12 >> 2] = $6_1;
       $6_1 = HEAP32[2853];
       HEAP32[$7_1 >> 2] = HEAP32[2852];
       HEAP32[$7_1 + 4 >> 2] = $6_1;
       (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1090($0, $1_1, $2_1, $3, $4_1, $5_1, $7_1, $7_1 + 32 | 0)), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
       break label$2;
      case 6:
       $1109($5_1 + 8 | 0, $7_1 + 56 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 7:
       $1110($5_1 + 8 | 0, $7_1 + 56 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 40:
       $1111($5_1 + 28 | 0, $7_1 + 56 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 43:
       $1112($5_1 + 16 | 0, $7_1 + 56 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 11:
       $1113($5_1 + 4 | 0, $7_1 + 56 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 44:
      case 50:
       $1114($7_1 + 56 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 46:
       $1115($0, $5_1 + 8 | 0, $7_1 + 56 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 48:
       $6_1 = $1778($7_1, 11440, 44);
       (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $1090($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $6_1 + 44 | 0)), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
       break label$2;
      case 16:
       HEAP32[$7_1 + 16 >> 2] = HEAP32[2876];
       $6_1 = HEAP32[2875];
       HEAP32[$7_1 + 8 >> 2] = HEAP32[2874];
       HEAP32[$7_1 + 12 >> 2] = $6_1;
       $6_1 = HEAP32[2873];
       HEAP32[$7_1 >> 2] = HEAP32[2872];
       HEAP32[$7_1 + 4 >> 2] = $6_1;
       (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1090($0, $1_1, $2_1, $3, $4_1, $5_1, $7_1, $7_1 + 20 | 0)), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
       break label$2;
      case 17:
       $1116($5_1, $7_1 + 56 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 18:
       $6_1 = HEAP32[2887];
       HEAP32[$7_1 + 24 >> 2] = HEAP32[2886];
       HEAP32[$7_1 + 28 >> 2] = $6_1;
       $6_1 = HEAP32[2885];
       HEAP32[$7_1 + 16 >> 2] = HEAP32[2884];
       HEAP32[$7_1 + 20 >> 2] = $6_1;
       $6_1 = HEAP32[2883];
       HEAP32[$7_1 + 8 >> 2] = HEAP32[2882];
       HEAP32[$7_1 + 12 >> 2] = $6_1;
       $6_1 = HEAP32[2881];
       HEAP32[$7_1 >> 2] = HEAP32[2880];
       HEAP32[$7_1 + 4 >> 2] = $6_1;
       (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1090($0, $1_1, $2_1, $3, $4_1, $5_1, $7_1, $7_1 + 32 | 0)), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
       break label$2;
      case 53:
       $1117($5_1 + 24 | 0, $7_1 + 56 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 54:
       $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1_1, $2_1, $3, $4_1, $5_1) | 0;
       break label$1;
      case 22:
       $1_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 24 >> 2]]($0 + 8 | 0) | 0;
       (wasm2js_i32$0 = $7_1, wasm2js_i32$1 = $1090($0, HEAP32[$7_1 + 56 >> 2], $2_1, $3, $4_1, $5_1, $93($1_1), $93($1_1) + ($19($1_1) << 2) | 0)), HEAP32[wasm2js_i32$0 + 56 >> 2] = wasm2js_i32$1;
       break label$2;
      case 55:
       $1104($5_1 + 20 | 0, $7_1 + 56 | 0, $2_1, $4_1, $8_1);
       break label$2;
      case 1:
      case 3:
      case 5:
      case 8:
      case 9:
      case 10:
      case 12:
      case 13:
      case 14:
      case 15:
      case 19:
      case 20:
      case 21:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 36:
      case 37:
      case 39:
      case 41:
      case 42:
      case 45:
      case 47:
      case 49:
      case 51:
      case 52:
       break label$3;
      case 23:
       break label$5;
      };
     }
     $1118($5_1 + 20 | 0, $7_1 + 56 | 0, $2_1, $4_1, $8_1);
     break label$2;
    }
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 4;
   }
   $0 = HEAP32[$7_1 + 56 >> 2];
  }
  global$0 = $7_1 - -64 | 0;
  return $0 | 0;
 }
 
 function $1107($0, $1_1, $2_1, $3) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  $1_1 = 6;
  label$1 : {
   label$2 : {
    if ($709($0, $4_1 + 8 | 0)) {
     break label$2
    }
    $1_1 = 4;
    if (($1091($3, $706($0)) | 0) != 37) {
     break label$2
    }
    $1_1 = 2;
    if (!$709($708($0), $4_1 + 8 | 0)) {
     break label$1
    }
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | $1_1;
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1108($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1105($1_1, $2_1, $3, $4_1, 2);
  $2_1 = HEAP32[$3 >> 2];
  if (!($1_1 + -1 >>> 0 > 30 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3 >> 2] = $2_1 | 4;
 }
 
 function $1109($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1105($1_1, $2_1, $3, $4_1, 2);
  $2_1 = HEAP32[$3 >> 2];
  if (!(($1_1 | 0) > 23 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3 >> 2] = $2_1 | 4;
 }
 
 function $1110($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1105($1_1, $2_1, $3, $4_1, 2);
  $2_1 = HEAP32[$3 >> 2];
  if (!($1_1 + -1 >>> 0 > 11 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3 >> 2] = $2_1 | 4;
 }
 
 function $1111($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1105($1_1, $2_1, $3, $4_1, 3);
  $2_1 = HEAP32[$3 >> 2];
  if (!(($1_1 | 0) > 365 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3 >> 2] = $2_1 | 4;
 }
 
 function $1112($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1105($1_1, $2_1, $3, $4_1, 2);
  $2_1 = HEAP32[$3 >> 2];
  if (!(($1_1 | 0) > 12 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1 + -1;
   return;
  }
  HEAP32[$3 >> 2] = $2_1 | 4;
 }
 
 function $1113($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1105($1_1, $2_1, $3, $4_1, 2);
  $2_1 = HEAP32[$3 >> 2];
  if (!(($1_1 | 0) > 59 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3 >> 2] = $2_1 | 4;
 }
 
 function $1114($0, $1_1, $2_1, $3) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  while (1) {
   label$2 : {
    if (!$705($0, $4_1 + 8 | 0)) {
     break label$2
    }
    if (!$707($3, 8192, $706($0))) {
     break label$2
    }
    $708($0);
    continue;
   }
   break;
  };
  if ($709($0, $4_1 + 8 | 0)) {
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 2
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1115($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2]]($0 + 8 | 0) | 0;
  if (($19($0) | 0) == (0 - $19($0 + 12 | 0) | 0)) {
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 4;
   return;
  }
  $0 = $981($2_1, $3, $0, $0 + 24 | 0, $5_1, $4_1, 0) - $0 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  if (!($0 | ($2_1 | 0) != 12)) {
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  if (!(($0 | 0) != 12 | ($2_1 | 0) > 11)) {
   HEAP32[$1_1 >> 2] = $2_1 + 12
  }
 }
 
 function $1116($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1105($1_1, $2_1, $3, $4_1, 2);
  $2_1 = HEAP32[$3 >> 2];
  if (!(($1_1 | 0) > 60 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3 >> 2] = $2_1 | 4;
 }
 
 function $1117($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1105($1_1, $2_1, $3, $4_1, 1);
  $2_1 = HEAP32[$3 >> 2];
  if (!(($1_1 | 0) > 6 | $2_1 & 4)) {
   HEAP32[$0 >> 2] = $1_1;
   return;
  }
  HEAP32[$3 >> 2] = $2_1 | 4;
 }
 
 function $1118($0, $1_1, $2_1, $3, $4_1) {
  $1_1 = $1105($1_1, $2_1, $3, $4_1, 4);
  if (!(HEAPU8[$3 | 0] & 4)) {
   HEAP32[$0 >> 2] = $1_1 + -1900
  }
 }
 
 function $1119($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $2_1 = global$0 - 128 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $2_1 + 116;
  $1120($0 + 8 | 0, $2_1 + 16 | 0, $2_1 + 12 | 0, $4_1, $5_1, $6_1);
  $0 = $1123($2_1 + 16 | 0, HEAP32[$2_1 + 12 >> 2], $1_1);
  global$0 = $2_1 + 128 | 0;
  return $0 | 0;
 }
 
 function $1120($0, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP8[$6_1 + 15 | 0] = 0;
  HEAP8[$6_1 + 14 | 0] = $5_1;
  HEAP8[$6_1 + 13 | 0] = $4_1;
  HEAP8[$6_1 + 12 | 0] = 37;
  if ($5_1) {
   $1122($6_1 + 13 | 0, $6_1 + 14 | 0)
  }
  (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = (fimport$15($1_1 | 0, $534($1_1, HEAP32[$2_1 >> 2]) | 0, $6_1 + 12 | 0, $3 | 0, HEAP32[$0 >> 2]) | 0) + $1_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $6_1 + 16 | 0;
 }
 
 function $1122($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[$2_1 + 15 | 0] = HEAPU8[$0 | 0];
  HEAP8[$0 | 0] = HEAPU8[$1_1 | 0];
  HEAP8[$1_1 | 0] = HEAPU8[$2_1 + 15 | 0];
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1123($0, $1_1, $2_1) {
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 8 >> 2] = $2_1;
  while (1) {
   if (($0 | 0) != ($1_1 | 0)) {
    $724($3 + 8 | 0, HEAP8[$0 | 0]);
    $0 = $0 + 1 | 0;
    continue;
   }
   break;
  };
  global$0 = $3 + 16 | 0;
  return HEAP32[$3 + 8 >> 2];
 }
 
 function $1124($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $2_1 = global$0 - 416 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $2_1 + 416;
  $1125($0 + 8 | 0, $2_1 + 16 | 0, $2_1 + 12 | 0, $4_1, $5_1, $6_1);
  $0 = $1130($2_1 + 16 | 0, HEAP32[$2_1 + 12 >> 2], $1_1);
  global$0 = $2_1 + 416 | 0;
  return $0 | 0;
 }
 
 function $1125($0, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0;
  $6_1 = global$0 - 144 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 28 >> 2] = $6_1 + 132;
  $1120($0, $6_1 + 32 | 0, $6_1 + 28 | 0, $3, $4_1, $5_1);
  HEAP32[$6_1 + 16 >> 2] = 0;
  HEAP32[$6_1 + 20 >> 2] = 0;
  HEAP32[$6_1 + 12 >> 2] = $6_1 + 32;
  $0 = $1128($1_1, $6_1 + 12 | 0, $1127($1_1, HEAP32[$2_1 >> 2]), $6_1 + 16 | 0, HEAP32[$0 >> 2]);
  if (($0 | 0) == -1) {
   $1129();
   abort();
  }
  HEAP32[$2_1 >> 2] = ($0 << 2) + $1_1;
  global$0 = $6_1 + 144 | 0;
 }
 
 function $1127($0, $1_1) {
  return $1_1 - $0 >> 2;
 }
 
 function $1128($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 12 >> 2] = $4_1;
  $4_1 = $977($5_1 + 8 | 0, $5_1 + 12 | 0);
  $0 = $892($0, $1_1, $2_1, $3);
  $978($4_1);
  global$0 = $5_1 + 16 | 0;
  return $0;
 }
 
 function $1129() {
  fimport$16();
  abort();
 }
 
 function $1130($0, $1_1, $2_1) {
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 8 >> 2] = $2_1;
  while (1) {
   if (($0 | 0) != ($1_1 | 0)) {
    $730($3 + 8 | 0, HEAP32[$0 >> 2]);
    $0 = $0 + 4 | 0;
    continue;
   }
   break;
  };
  global$0 = $3 + 16 | 0;
  return HEAP32[$3 + 8 >> 2];
 }
 
 function $1131($0) {
  $0 = $0 | 0;
  return 127;
 }
 
 function $1134($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $10($0);
 }
 
 function $1135($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $523($0, 1, 45);
 }
 
 function $1136($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0 | 0] = 67109634;
  HEAP8[$0 + 1 | 0] = 262147;
  HEAP8[$0 + 2 | 0] = 1024;
  HEAP8[$0 + 3 | 0] = 4;
 }
 
 function $1137($0) {
  $0 = $0 | 0;
  return 2147483647;
 }
 
 function $1138($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $1139($0);
 }
 
 function $1139($0) {
  $25($0);
  $1140($0);
  return $0;
 }
 
 function $1140($0) {
  var $1_1 = 0;
  $1_1 = $0;
  $0 = 0;
  while (1) {
   if (($0 | 0) != 3) {
    HEAP32[($0 << 2) + $1_1 >> 2] = 0;
    $0 = $0 + 1 | 0;
    continue;
   }
   break;
  };
 }
 
 function $1141($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $1050($0, 1, 45);
 }
 
 function $1142($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = global$0 - 288 | 0;
  global$0 = $0;
  HEAP32[$0 + 280 >> 2] = $1_1;
  HEAP32[$0 + 272 >> 2] = $2_1;
  HEAP32[$0 + 16 >> 2] = 170;
  $1_1 = $930($0 + 152 | 0, $0 + 160 | 0, $0 + 16 | 0);
  $683($0 + 144 | 0, $4_1);
  $7_1 = $526($0 + 144 | 0);
  HEAP8[$0 + 143 | 0] = 0;
  label$1 : {
   if (!$1143($0 + 280 | 0, $2_1, $3, $0 + 144 | 0, HEAP32[$4_1 + 4 >> 2], $5_1, $0 + 143 | 0, $7_1, $1_1, $0 + 148 | 0, $0 + 260 | 0)) {
    break label$1
   }
   $2_1 = HEAPU8[11563] | HEAPU8[11564] << 8 | (HEAPU8[11565] << 16 | HEAPU8[11566] << 24);
   HEAP8[$0 + 135 | 0] = $2_1;
   HEAP8[$0 + 136 | 0] = $2_1 >>> 8;
   HEAP8[$0 + 137 | 0] = $2_1 >>> 16;
   HEAP8[$0 + 138 | 0] = $2_1 >>> 24;
   $2_1 = HEAPU8[11560] | HEAPU8[11561] << 8 | (HEAPU8[11562] << 16 | HEAPU8[11563] << 24);
   HEAP32[$0 + 128 >> 2] = HEAPU8[11556] | HEAPU8[11557] << 8 | (HEAPU8[11558] << 16 | HEAPU8[11559] << 24);
   HEAP32[$0 + 132 >> 2] = $2_1;
   $971($7_1, $0 + 128 | 0, $0 + 138 | 0, $0 + 118 | 0);
   HEAP32[$0 + 16 >> 2] = 169;
   $3 = $930($0 + 8 | 0, 0, $0 + 16 | 0);
   $2_1 = $0 + 16 | 0;
   label$2 : {
    if ((HEAP32[$0 + 148 >> 2] - HEAP32[$1_1 >> 2] | 0) >= 99) {
     $931($3, $1768((HEAP32[$0 + 148 >> 2] - HEAP32[$1_1 >> 2] | 0) + 2 | 0));
     if (!HEAP32[$3 >> 2]) {
      break label$2
     }
     $2_1 = HEAP32[$3 >> 2];
    }
    if (HEAPU8[$0 + 143 | 0]) {
     HEAP8[$2_1 | 0] = 45;
     $2_1 = $2_1 + 1 | 0;
    }
    $4_1 = HEAP32[$1_1 >> 2];
    while (1) {
     if ($4_1 >>> 0 >= HEAPU32[$0 + 148 >> 2]) {
      label$7 : {
       HEAP8[$2_1 | 0] = 0;
       HEAP32[$0 >> 2] = $6_1;
       if (($881($0 + 16 | 0, $0) | 0) != 1) {
        break label$7
       }
       $934($3);
       break label$1;
      }
     } else {
      (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = HEAPU8[(($976($0 + 118 | 0, $0 + 128 | 0, $4_1) - $0 | 0) + $0 | 0) + 10 | 0]), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
      $2_1 = $2_1 + 1 | 0;
      $4_1 = $4_1 + 1 | 0;
      continue;
     }
     break;
    };
    $1129();
    abort();
   }
   $1129();
   abort();
  }
  if ($688($0 + 280 | 0, $0 + 272 | 0)) {
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 2
  }
  $2_1 = HEAP32[$0 + 280 >> 2];
  $924($0 + 144 | 0);
  $934($1_1);
  global$0 = $0 + 288 | 0;
  return $2_1 | 0;
 }
 
 function $1143($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  var $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11_1 = global$0 - 560 | 0;
  global$0 = $11_1;
  HEAP32[$11_1 + 548 >> 2] = $10_1;
  HEAP32[$11_1 + 552 >> 2] = $1_1;
  HEAP32[$11_1 + 104 >> 2] = 170;
  $15_1 = $930($11_1 + 136 | 0, $11_1 + 144 | 0, $11_1 + 104 | 0);
  $1_1 = HEAP32[$15_1 >> 2];
  HEAP32[$11_1 + 132 >> 2] = $1_1;
  HEAP32[$11_1 + 128 >> 2] = $1_1 + 400;
  $17_1 = $10($11_1 + 104 | 0);
  $14_1 = $10($11_1 + 88 | 0);
  $12_1 = $10($11_1 + 72 | 0);
  $13_1 = $10($11_1 + 56 | 0);
  $16_1 = $10($11_1 + 40 | 0);
  $1148($2_1, $3, $11_1 + 120 | 0, $11_1 + 119 | 0, $11_1 + 118 | 0, $17_1, $14_1, $12_1, $13_1, $11_1 + 36 | 0);
  HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
  $18 = $4_1 & 512;
  $1_1 = 0;
  $4_1 = 0;
  while (1) {
   $10_1 = $4_1;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($1_1 | 0) == 4) {
        break label$5
       }
       if (!$684($0, $11_1 + 552 | 0)) {
        break label$5
       }
       $2_1 = HEAP8[($11_1 + 120 | 0) + $1_1 | 0];
       if ($2_1 >>> 0 > 4) {
        break label$3
       }
       $4_1 = 0;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            switch ($2_1 - 1 | 0) {
            case 0:
             if (($1_1 | 0) == 3) {
              break label$3
             }
             if ($686($7_1, 8192, $685($0))) {
              $1149($11_1 + 24 | 0, $0);
              $1608($16_1, HEAP8[$11_1 + 24 | 0]);
              break label$9;
             }
             HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
             $0 = 0;
             break label$4;
            case 3:
             break label$6;
            case 1:
             break label$7;
            case 2:
             break label$8;
            default:
             break label$10;
            };
           }
           if (($1_1 | 0) == 3) {
            break label$3
           }
          }
          while (1) {
           if (!$684($0, $11_1 + 552 | 0)) {
            break label$3
           }
           if (!$686($7_1, 8192, $685($0))) {
            break label$3
           }
           $1149($11_1 + 24 | 0, $0);
           $1608($16_1, HEAP8[$11_1 + 24 | 0]);
           continue;
          };
         }
         if (($19($12_1) | 0) == (0 - $19($13_1) | 0)) {
          break label$3
         }
         label$14 : {
          if ($19($12_1)) {
           if ($19($13_1)) {
            break label$14
           }
          }
          $3 = $19($12_1);
          $2_1 = $685($0);
          if ($3) {
           if (HEAPU8[$933($12_1, 0) | 0] == ($2_1 & 255)) {
            $687($0);
            $4_1 = $19($12_1) >>> 0 > 1 ? $12_1 : $10_1;
            break label$2;
           }
           HEAP8[$6_1 | 0] = 1;
           break label$3;
          }
          if (HEAPU8[$933($13_1, 0) | 0] != ($2_1 & 255)) {
           break label$3
          }
          $687($0);
          HEAP8[$6_1 | 0] = 1;
          $4_1 = $19($13_1) >>> 0 > 1 ? $13_1 : $10_1;
          break label$2;
         }
         if (($685($0) & 255) == HEAPU8[$933($12_1, 0) | 0]) {
          $687($0);
          $4_1 = $19($12_1) >>> 0 > 1 ? $12_1 : $10_1;
          break label$2;
         }
         if (($685($0) & 255) == HEAPU8[$933($13_1, 0) | 0]) {
          $687($0);
          HEAP8[$6_1 | 0] = 1;
          $4_1 = $19($13_1) >>> 0 > 1 ? $13_1 : $10_1;
          break label$2;
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
         $0 = 0;
         break label$4;
        }
        if (!($18 | ($10_1 | $1_1 >>> 0 < 2))) {
         $4_1 = 0;
         if (!(($1_1 | 0) == 2 & HEAPU8[$11_1 + 123 | 0] != 0)) {
          break label$2
         }
        }
        (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1017($14_1)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
        $2_1 = $238($11_1 + 24 | 0, $11_1 + 16 | 0);
        label$21 : {
         if (!$1_1 | HEAPU8[($1_1 + $11_1 | 0) + 119 | 0] > 1) {
          break label$21
         }
         while (1) {
          label$23 : {
           (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1018($14_1)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
           if (!$241($2_1, $11_1 + 16 | 0)) {
            break label$23
           }
           if (!$686($7_1, 8192, HEAP8[HEAP32[$2_1 >> 2]])) {
            break label$23
           }
           $1020($2_1);
           continue;
          }
          break;
         };
         (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1017($14_1)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
         $2_1 = HEAP32[$2_1 >> 2] - HEAP32[$11_1 + 16 >> 2] | 0;
         if ($2_1 >>> 0 <= $19($16_1) >>> 0) {
          (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1018($16_1)), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
          if ($1168($1169($11_1 + 16 | 0, 0 - $2_1 | 0), $1018($16_1), $1017($14_1))) {
           break label$21
          }
         }
         (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1017($14_1)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
         $238($11_1 + 16 | 0, $11_1 + 8 | 0);
         HEAP32[$11_1 + 24 >> 2] = HEAP32[$11_1 + 16 >> 2];
        }
        HEAP32[$11_1 + 16 >> 2] = HEAP32[$11_1 + 24 >> 2];
        while (1) {
         label$26 : {
          (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1018($14_1)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
          if (!$241($11_1 + 16 | 0, $11_1 + 8 | 0)) {
           break label$26
          }
          if (!$684($0, $11_1 + 552 | 0)) {
           break label$26
          }
          if (($685($0) & 255) != HEAPU8[HEAP32[$11_1 + 16 >> 2]]) {
           break label$26
          }
          $687($0);
          $1020($11_1 + 16 | 0);
          continue;
         }
         break;
        };
        if (!$18) {
         break label$3
        }
        (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1018($14_1)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
        if (!$241($11_1 + 16 | 0, $11_1 + 8 | 0)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
        $0 = 0;
        break label$4;
       }
       while (1) {
        label$28 : {
         if (!$684($0, $11_1 + 552 | 0)) {
          break label$28
         }
         $2_1 = $685($0);
         label$29 : {
          if ($686($7_1, 2048, $2_1)) {
           $3 = HEAP32[$9_1 >> 2];
           if (($3 | 0) == HEAP32[$11_1 + 548 >> 2]) {
            $1155($8_1, $9_1, $11_1 + 548 | 0);
            $3 = HEAP32[$9_1 >> 2];
           }
           HEAP32[$9_1 >> 2] = $3 + 1;
           HEAP8[$3 | 0] = $2_1;
           $4_1 = $4_1 + 1 | 0;
           break label$29;
          }
          if (!$4_1 | !$19($17_1) | HEAPU8[$11_1 + 118 | 0] != ($2_1 & 255)) {
           break label$28
          }
          $2_1 = HEAP32[$11_1 + 132 >> 2];
          if (($2_1 | 0) == HEAP32[$11_1 + 128 >> 2]) {
           $1156($15_1, $11_1 + 132 | 0, $11_1 + 128 | 0);
           $2_1 = HEAP32[$11_1 + 132 >> 2];
          }
          HEAP32[$11_1 + 132 >> 2] = $2_1 + 4;
          HEAP32[$2_1 >> 2] = $4_1;
          $4_1 = 0;
         }
         $687($0);
         continue;
        }
        break;
       };
       $3 = HEAP32[$15_1 >> 2];
       label$33 : {
        if (!$4_1) {
         break label$33
        }
        $2_1 = HEAP32[$11_1 + 132 >> 2];
        if (($3 | 0) == ($2_1 | 0)) {
         break label$33
        }
        if (HEAP32[$11_1 + 128 >> 2] == ($2_1 | 0)) {
         $1156($15_1, $11_1 + 132 | 0, $11_1 + 128 | 0);
         $2_1 = HEAP32[$11_1 + 132 >> 2];
        }
        HEAP32[$11_1 + 132 >> 2] = $2_1 + 4;
        HEAP32[$2_1 >> 2] = $4_1;
       }
       label$35 : {
        if (HEAP32[$11_1 + 36 >> 2] < 1) {
         break label$35
        }
        label$36 : {
         if (!$688($0, $11_1 + 552 | 0)) {
          if (($685($0) & 255) == HEAPU8[$11_1 + 119 | 0]) {
           break label$36
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
         $0 = 0;
         break label$4;
        }
        while (1) {
         $687($0);
         if (HEAP32[$11_1 + 36 >> 2] < 1) {
          break label$35
         }
         label$39 : {
          if (!$688($0, $11_1 + 552 | 0)) {
           if ($686($7_1, 2048, $685($0))) {
            break label$39
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
          $0 = 0;
          break label$4;
         }
         if (HEAP32[$9_1 >> 2] == HEAP32[$11_1 + 548 >> 2]) {
          $1155($8_1, $9_1, $11_1 + 548 | 0)
         }
         $2_1 = $685($0);
         $3 = HEAP32[$9_1 >> 2];
         HEAP32[$9_1 >> 2] = $3 + 1;
         HEAP8[$3 | 0] = $2_1;
         HEAP32[$11_1 + 36 >> 2] = HEAP32[$11_1 + 36 >> 2] + -1;
         continue;
        };
       }
       $4_1 = $10_1;
       if (HEAP32[$8_1 >> 2] != HEAP32[$9_1 >> 2]) {
        break label$2
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
       $0 = 0;
       break label$4;
      }
      label$42 : {
       if (!$10_1) {
        break label$42
       }
       $4_1 = 1;
       while (1) {
        if ($4_1 >>> 0 >= $19($10_1) >>> 0) {
         break label$42
        }
        label$44 : {
         if (!$688($0, $11_1 + 552 | 0)) {
          if (($685($0) & 255) == HEAPU8[$933($10_1, $4_1) | 0]) {
           break label$44
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
         $0 = 0;
         break label$4;
        }
        $687($0);
        $4_1 = $4_1 + 1 | 0;
        continue;
       };
      }
      $0 = 1;
      if (HEAP32[$15_1 >> 2] == HEAP32[$11_1 + 132 >> 2]) {
       break label$4
      }
      $0 = 0;
      HEAP32[$11_1 + 24 >> 2] = 0;
      $943($17_1, HEAP32[$15_1 >> 2], HEAP32[$11_1 + 132 >> 2], $11_1 + 24 | 0);
      if (HEAP32[$11_1 + 24 >> 2]) {
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
       break label$4;
      }
      $0 = 1;
     }
     $1597($16_1);
     $1597($13_1);
     $1597($12_1);
     $1597($14_1);
     $1597($17_1);
     $934($15_1);
     global$0 = $11_1 + 560 | 0;
     return $0;
    }
    $4_1 = $10_1;
   }
   $1_1 = $1_1 + 1 | 0;
   continue;
  };
 }
 
 function $1148($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  var $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   if ($0) {
    $0 = $1162($1_1);
    $1163($10_1, $0);
    $1_1 = HEAP32[$10_1 >> 2];
    HEAP8[$2_1 | 0] = $1_1;
    HEAP8[$2_1 + 1 | 0] = $1_1 >>> 8;
    HEAP8[$2_1 + 2 | 0] = $1_1 >>> 16;
    HEAP8[$2_1 + 3 | 0] = $1_1 >>> 24;
    $1164($10_1, $0);
    $408($8_1, $10_1);
    $1597($10_1);
    $927($10_1, $0);
    $408($7_1, $10_1);
    $1597($10_1);
    (wasm2js_i32$0 = $3, wasm2js_i32$1 = $1011($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1012($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
    $1013($10_1, $0);
    $408($5_1, $10_1);
    $1597($10_1);
    $926($10_1, $0);
    $408($6_1, $10_1);
    $1597($10_1);
    $0 = $1165($0);
    break label$1;
   }
   $0 = $1166($1_1);
   $1163($10_1, $0);
   $1_1 = HEAP32[$10_1 >> 2];
   HEAP8[$2_1 | 0] = $1_1;
   HEAP8[$2_1 + 1 | 0] = $1_1 >>> 8;
   HEAP8[$2_1 + 2 | 0] = $1_1 >>> 16;
   HEAP8[$2_1 + 3 | 0] = $1_1 >>> 24;
   $1164($10_1, $0);
   $408($8_1, $10_1);
   $1597($10_1);
   $927($10_1, $0);
   $408($7_1, $10_1);
   $1597($10_1);
   (wasm2js_i32$0 = $3, wasm2js_i32$1 = $1011($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1012($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   $1013($10_1, $0);
   $408($5_1, $10_1);
   $1597($10_1);
   $926($10_1, $0);
   $408($6_1, $10_1);
   $1597($10_1);
   $0 = $1165($0);
  }
  HEAP32[$9_1 >> 2] = $0;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1149($0, $1_1) {
  var $2_1 = 0;
  $2_1 = $29(HEAP32[$1_1 >> 2]) << 24 >> 24;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1_1 >> 2];
  HEAP8[$0 | 0] = $2_1;
 }
 
 function $1155($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$217($0) >> 2];
  $7_1 = HEAP32[$1_1 >> 2];
  $8_1 = HEAP32[$0 >> 2];
  $6_1 = ($5_1 | 0) == 170 ? 0 : HEAP32[$0 >> 2];
  $3 = HEAP32[$2_1 >> 2] - HEAP32[$0 >> 2] | 0;
  label$1 : {
   if ($3 >>> 0 < 2147483647) {
    $3 = $3 << 1;
    break label$1;
   }
   $3 = -1;
  }
  $3 = $3 ? $3 : 1;
  $6_1 = $1770($6_1, $3);
  if ($6_1) {
   if (($5_1 | 0) != 170) {
    $490($0)
   }
   HEAP32[$4_1 + 4 >> 2] = 169;
   $5_1 = $930($4_1 + 8 | 0, $6_1, $4_1 + 4 | 0);
   $1172($0, $5_1);
   $934($5_1);
   HEAP32[$1_1 >> 2] = HEAP32[$0 >> 2] + ($7_1 - $8_1 | 0);
   HEAP32[$2_1 >> 2] = $3 + HEAP32[$0 >> 2];
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $1129();
  abort();
 }
 
 function $1156($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$217($0) >> 2];
  $7_1 = HEAP32[$1_1 >> 2];
  $8_1 = HEAP32[$0 >> 2];
  $6_1 = ($5_1 | 0) == 170 ? 0 : HEAP32[$0 >> 2];
  $3 = HEAP32[$2_1 >> 2] - HEAP32[$0 >> 2] | 0;
  label$1 : {
   if ($3 >>> 0 < 2147483647) {
    $3 = $3 << 1;
    break label$1;
   }
   $3 = -1;
  }
  $3 = $3 ? $3 : 4;
  $6_1 = $1770($6_1, $3);
  if ($6_1) {
   if (($5_1 | 0) != 170) {
    $490($0)
   }
   HEAP32[$4_1 + 4 >> 2] = 169;
   $5_1 = $930($4_1 + 8 | 0, $6_1, $4_1 + 4 | 0);
   $1172($0, $5_1);
   $934($5_1);
   HEAP32[$1_1 >> 2] = HEAP32[$0 >> 2] + ($7_1 - $8_1 >> 2 << 2);
   HEAP32[$2_1 >> 2] = HEAP32[$0 >> 2] + ($3 & -4);
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $1129();
  abort();
 }
 
 function $1158($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $0 = global$0 - 160 | 0;
  global$0 = $0;
  HEAP32[$0 + 152 >> 2] = $1_1;
  HEAP32[$0 + 144 >> 2] = $2_1;
  HEAP32[$0 + 20 >> 2] = 170;
  $1_1 = $930($0 + 24 | 0, $0 + 32 | 0, $0 + 20 | 0);
  $683($0 + 16 | 0, $4_1);
  $7_1 = $526($0 + 16 | 0);
  HEAP8[$0 + 15 | 0] = 0;
  if ($1143($0 + 152 | 0, $2_1, $3, $0 + 16 | 0, HEAP32[$4_1 + 4 >> 2], $5_1, $0 + 15 | 0, $7_1, $1_1, $0 + 20 | 0, $0 + 132 | 0)) {
   $27($6_1);
   if (HEAPU8[$0 + 15 | 0]) {
    $1608($6_1, $527($7_1, 45))
   }
   $2_1 = $527($7_1, 48);
   $4_1 = HEAP32[$1_1 >> 2];
   $3 = HEAP32[$0 + 20 >> 2];
   $7_1 = $3 + -1 | 0;
   $2_1 = $2_1 & 255;
   while (1) {
    if (!(($2_1 | 0) != HEAPU8[$4_1 | 0] | $4_1 >>> 0 >= $7_1 >>> 0)) {
     $4_1 = $4_1 + 1 | 0;
     continue;
    }
    break;
   };
   $1160($6_1, $4_1, $3);
  }
  if ($688($0 + 152 | 0, $0 + 144 | 0)) {
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 2
  }
  $2_1 = HEAP32[$0 + 152 >> 2];
  $924($0 + 16 | 0);
  $934($1_1);
  global$0 = $0 + 160 | 0;
  return $2_1 | 0;
 }
 
 function $1160($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $4_1 = $19($0);
  $3 = $89($0);
  $6_1 = $533($1_1, $2_1);
  label$1 : {
   if (!$6_1) {
    break label$1
   }
   if ($1561($1_1, $93($0), $93($0) + $19($0) | 0)) {
    $3 = $0;
    $0 = $531($5_1 + 16 | 0, $1_1, $2_1, $0);
    $1606($3, $93($0), $19($0));
    $1597($0);
    break label$1;
   }
   if ($3 - $4_1 >>> 0 < $6_1 >>> 0) {
    $1605($0, $3, ($4_1 + $6_1 | 0) - $3 | 0, $4_1, $4_1)
   }
   $3 = $93($0) + $4_1 | 0;
   while (1) {
    if (($1_1 | 0) != ($2_1 | 0)) {
     $124($3, $1_1);
     $1_1 = $1_1 + 1 | 0;
     $3 = $3 + 1 | 0;
     continue;
    }
    break;
   };
   HEAP8[$5_1 + 15 | 0] = 0;
   $124($3, $5_1 + 15 | 0);
   $1480($0, $4_1 + $6_1 | 0);
  }
  global$0 = $5_1 + 32 | 0;
 }
 
 function $1162($0) {
  return $929($0, 24184);
 }
 
 function $1163($0, $1_1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 44 >> 2]]($0, $1_1);
 }
 
 function $1164($0, $1_1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 32 >> 2]]($0, $1_1);
 }
 
 function $1165($0) {
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
 }
 
 function $1166($0) {
  return $929($0, 24176);
 }
 
 function $1168($0, $1_1, $2_1) {
  var $3 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  HEAP32[$3 + 16 >> 2] = $1_1;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $2_1;
  while (1) {
   label$2 : {
    $0 = 1;
    label$3 : {
     if (!$241($3 + 24 | 0, $3 + 16 | 0)) {
      break label$3
     }
     if (HEAPU8[HEAP32[$3 + 24 >> 2]] == HEAPU8[HEAP32[$3 + 8 >> 2]]) {
      break label$2
     }
     $0 = 0;
    }
    global$0 = $3 + 32 | 0;
    return $0;
   }
   $1020($3 + 24 | 0);
   $1020($3 + 8 | 0);
   continue;
  };
 }
 
 function $1169($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0 >> 2];
  $0 = $2_1 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + $1_1;
  global$0 = $2_1 + 16 | 0;
  return HEAP32[$2_1 + 8 >> 2];
 }
 
 function $1172($0, $1_1) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $931($0, $490($1_1));
  $1_1 = HEAP32[$217($1_1) >> 2];
  (wasm2js_i32$0 = $217($0), wasm2js_i32$1 = $1_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 
 function $1177($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $0 = global$0 - 624 | 0;
  global$0 = $0;
  HEAP32[$0 + 616 >> 2] = $1_1;
  HEAP32[$0 + 608 >> 2] = $2_1;
  HEAP32[$0 + 16 >> 2] = 170;
  $1_1 = $930($0 + 200 | 0, $0 + 208 | 0, $0 + 16 | 0);
  $683($0 + 192 | 0, $4_1);
  $7_1 = $704($0 + 192 | 0);
  HEAP8[$0 + 191 | 0] = 0;
  label$1 : {
   if (!$1178($0 + 616 | 0, $2_1, $3, $0 + 192 | 0, HEAP32[$4_1 + 4 >> 2], $5_1, $0 + 191 | 0, $7_1, $1_1, $0 + 196 | 0, $0 + 608 | 0)) {
    break label$1
   }
   $2_1 = HEAPU8[11563] | HEAPU8[11564] << 8 | (HEAPU8[11565] << 16 | HEAPU8[11566] << 24);
   HEAP8[$0 + 183 | 0] = $2_1;
   HEAP8[$0 + 184 | 0] = $2_1 >>> 8;
   HEAP8[$0 + 185 | 0] = $2_1 >>> 16;
   HEAP8[$0 + 186 | 0] = $2_1 >>> 24;
   $2_1 = HEAPU8[11560] | HEAPU8[11561] << 8 | (HEAPU8[11562] << 16 | HEAPU8[11563] << 24);
   HEAP32[$0 + 176 >> 2] = HEAPU8[11556] | HEAPU8[11557] << 8 | (HEAPU8[11558] << 16 | HEAPU8[11559] << 24);
   HEAP32[$0 + 180 >> 2] = $2_1;
   $1009($7_1, $0 + 176 | 0, $0 + 186 | 0, $0 + 128 | 0);
   HEAP32[$0 + 16 >> 2] = 169;
   $3 = $930($0 + 8 | 0, 0, $0 + 16 | 0);
   $2_1 = $0 + 16 | 0;
   label$2 : {
    if ((HEAP32[$0 + 196 >> 2] - HEAP32[$1_1 >> 2] | 0) >= 393) {
     $931($3, $1768((HEAP32[$0 + 196 >> 2] - HEAP32[$1_1 >> 2] >> 2) + 2 | 0));
     if (!HEAP32[$3 >> 2]) {
      break label$2
     }
     $2_1 = HEAP32[$3 >> 2];
    }
    if (HEAPU8[$0 + 191 | 0]) {
     HEAP8[$2_1 | 0] = 45;
     $2_1 = $2_1 + 1 | 0;
    }
    $4_1 = HEAP32[$1_1 >> 2];
    while (1) {
     if ($4_1 >>> 0 >= HEAPU32[$0 + 196 >> 2]) {
      label$7 : {
       HEAP8[$2_1 | 0] = 0;
       HEAP32[$0 >> 2] = $6_1;
       if (($881($0 + 16 | 0, $0) | 0) != 1) {
        break label$7
       }
       $934($3);
       break label$1;
      }
     } else {
      (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = HEAPU8[($0 + 176 | 0) + ($1010($0 + 128 | 0, $0 + 168 | 0, $4_1) - ($0 + 128 | 0) >> 2) | 0]), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
      $2_1 = $2_1 + 1 | 0;
      $4_1 = $4_1 + 4 | 0;
      continue;
     }
     break;
    };
    $1129();
    abort();
   }
   $1129();
   abort();
  }
  if ($709($0 + 616 | 0, $0 + 608 | 0)) {
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 2
  }
  $2_1 = HEAP32[$0 + 616 >> 2];
  $924($0 + 192 | 0);
  $934($1_1);
  global$0 = $0 + 624 | 0;
  return $2_1 | 0;
 }
 
 function $1178($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  var $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11_1 = global$0 - 560 | 0;
  global$0 = $11_1;
  HEAP32[$11_1 + 548 >> 2] = $10_1;
  HEAP32[$11_1 + 552 >> 2] = $1_1;
  HEAP32[$11_1 + 96 >> 2] = 170;
  $15_1 = $930($11_1 + 136 | 0, $11_1 + 144 | 0, $11_1 + 96 | 0);
  $1_1 = HEAP32[$15_1 >> 2];
  HEAP32[$11_1 + 132 >> 2] = $1_1;
  HEAP32[$11_1 + 128 >> 2] = $1_1 + 400;
  $17_1 = $10($11_1 + 96 | 0);
  $14_1 = $1139($11_1 + 80 | 0);
  $12_1 = $1139($11_1 - -64 | 0);
  $13_1 = $1139($11_1 + 48 | 0);
  $16_1 = $1139($11_1 + 32 | 0);
  $1181($2_1, $3, $11_1 + 120 | 0, $11_1 + 116 | 0, $11_1 + 112 | 0, $17_1, $14_1, $12_1, $13_1, $11_1 + 28 | 0);
  HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2];
  $18 = $4_1 & 512;
  $1_1 = 0;
  $4_1 = 0;
  while (1) {
   $10_1 = $4_1;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($1_1 | 0) == 4) {
        break label$5
       }
       if (!$705($0, $11_1 + 552 | 0)) {
        break label$5
       }
       $2_1 = HEAP8[($11_1 + 120 | 0) + $1_1 | 0];
       if ($2_1 >>> 0 > 4) {
        break label$3
       }
       $4_1 = 0;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            switch ($2_1 - 1 | 0) {
            case 0:
             if (($1_1 | 0) == 3) {
              break label$3
             }
             if ($707($7_1, 8192, $706($0))) {
              $1182($11_1 + 16 | 0, $0);
              $1621($16_1, HEAP32[$11_1 + 16 >> 2]);
              break label$9;
             }
             HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
             $0 = 0;
             break label$4;
            case 3:
             break label$6;
            case 1:
             break label$7;
            case 2:
             break label$8;
            default:
             break label$10;
            };
           }
           if (($1_1 | 0) == 3) {
            break label$3
           }
          }
          while (1) {
           if (!$705($0, $11_1 + 552 | 0)) {
            break label$3
           }
           if (!$707($7_1, 8192, $706($0))) {
            break label$3
           }
           $1182($11_1 + 16 | 0, $0);
           $1621($16_1, HEAP32[$11_1 + 16 >> 2]);
           continue;
          };
         }
         if (($19($12_1) | 0) == (0 - $19($13_1) | 0)) {
          break label$3
         }
         label$14 : {
          if ($19($12_1)) {
           if ($19($13_1)) {
            break label$14
           }
          }
          $3 = $19($12_1);
          $2_1 = $706($0);
          if ($3) {
           if (($2_1 | 0) == HEAP32[$93($12_1) >> 2]) {
            $708($0);
            $4_1 = $19($12_1) >>> 0 > 1 ? $12_1 : $10_1;
            break label$2;
           }
           HEAP8[$6_1 | 0] = 1;
           break label$3;
          }
          if (($2_1 | 0) != HEAP32[$93($13_1) >> 2]) {
           break label$3
          }
          $708($0);
          HEAP8[$6_1 | 0] = 1;
          $4_1 = $19($13_1) >>> 0 > 1 ? $13_1 : $10_1;
          break label$2;
         }
         if (($706($0) | 0) == HEAP32[$93($12_1) >> 2]) {
          $708($0);
          $4_1 = $19($12_1) >>> 0 > 1 ? $12_1 : $10_1;
          break label$2;
         }
         if (($706($0) | 0) == HEAP32[$93($13_1) >> 2]) {
          $708($0);
          HEAP8[$6_1 | 0] = 1;
          $4_1 = $19($13_1) >>> 0 > 1 ? $13_1 : $10_1;
          break label$2;
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
         $0 = 0;
         break label$4;
        }
        if (!($18 | ($10_1 | $1_1 >>> 0 < 2))) {
         $4_1 = 0;
         if (!(($1_1 | 0) == 2 & HEAPU8[$11_1 + 123 | 0] != 0)) {
          break label$2
         }
        }
        (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1017($14_1)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
        $2_1 = $238($11_1 + 16 | 0, $11_1 + 8 | 0);
        label$21 : {
         if (!$1_1 | HEAPU8[($1_1 + $11_1 | 0) + 119 | 0] > 1) {
          break label$21
         }
         while (1) {
          label$23 : {
           (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1043($14_1)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
           if (!$241($2_1, $11_1 + 8 | 0)) {
            break label$23
           }
           if (!$707($7_1, 8192, HEAP32[HEAP32[$2_1 >> 2] >> 2])) {
            break label$23
           }
           $398($2_1);
           continue;
          }
          break;
         };
         (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1017($14_1)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
         $2_1 = HEAP32[$2_1 >> 2] - HEAP32[$11_1 + 8 >> 2] >> 2;
         if ($2_1 >>> 0 <= $19($16_1) >>> 0) {
          (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1043($16_1)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
          if ($1201($1202($11_1 + 8 | 0, 0 - $2_1 | 0), $1043($16_1), $1017($14_1))) {
           break label$21
          }
         }
         (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1017($14_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         $238($11_1 + 8 | 0, $11_1);
         HEAP32[$11_1 + 16 >> 2] = HEAP32[$11_1 + 8 >> 2];
        }
        HEAP32[$11_1 + 8 >> 2] = HEAP32[$11_1 + 16 >> 2];
        while (1) {
         label$26 : {
          (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1043($14_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
          if (!$241($11_1 + 8 | 0, $11_1)) {
           break label$26
          }
          if (!$705($0, $11_1 + 552 | 0)) {
           break label$26
          }
          if (($706($0) | 0) != HEAP32[HEAP32[$11_1 + 8 >> 2] >> 2]) {
           break label$26
          }
          $708($0);
          $398($11_1 + 8 | 0);
          continue;
         }
         break;
        };
        if (!$18) {
         break label$3
        }
        (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = $1043($14_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        if (!$241($11_1 + 8 | 0, $11_1)) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
        $0 = 0;
        break label$4;
       }
       while (1) {
        label$28 : {
         if (!$705($0, $11_1 + 552 | 0)) {
          break label$28
         }
         $2_1 = $706($0);
         label$29 : {
          if ($707($7_1, 2048, $2_1)) {
           $3 = HEAP32[$9_1 >> 2];
           if (($3 | 0) == HEAP32[$11_1 + 548 >> 2]) {
            $1156($8_1, $9_1, $11_1 + 548 | 0);
            $3 = HEAP32[$9_1 >> 2];
           }
           HEAP32[$9_1 >> 2] = $3 + 4;
           HEAP32[$3 >> 2] = $2_1;
           $4_1 = $4_1 + 1 | 0;
           break label$29;
          }
          if (!$4_1 | !$19($17_1) | ($2_1 | 0) != HEAP32[$11_1 + 112 >> 2]) {
           break label$28
          }
          $2_1 = HEAP32[$11_1 + 132 >> 2];
          if (($2_1 | 0) == HEAP32[$11_1 + 128 >> 2]) {
           $1156($15_1, $11_1 + 132 | 0, $11_1 + 128 | 0);
           $2_1 = HEAP32[$11_1 + 132 >> 2];
          }
          HEAP32[$11_1 + 132 >> 2] = $2_1 + 4;
          HEAP32[$2_1 >> 2] = $4_1;
          $4_1 = 0;
         }
         $708($0);
         continue;
        }
        break;
       };
       $3 = HEAP32[$15_1 >> 2];
       label$33 : {
        if (!$4_1) {
         break label$33
        }
        $2_1 = HEAP32[$11_1 + 132 >> 2];
        if (($3 | 0) == ($2_1 | 0)) {
         break label$33
        }
        if (HEAP32[$11_1 + 128 >> 2] == ($2_1 | 0)) {
         $1156($15_1, $11_1 + 132 | 0, $11_1 + 128 | 0);
         $2_1 = HEAP32[$11_1 + 132 >> 2];
        }
        HEAP32[$11_1 + 132 >> 2] = $2_1 + 4;
        HEAP32[$2_1 >> 2] = $4_1;
       }
       label$35 : {
        if (HEAP32[$11_1 + 28 >> 2] < 1) {
         break label$35
        }
        label$36 : {
         if (!$709($0, $11_1 + 552 | 0)) {
          if (($706($0) | 0) == HEAP32[$11_1 + 116 >> 2]) {
           break label$36
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
         $0 = 0;
         break label$4;
        }
        while (1) {
         $708($0);
         if (HEAP32[$11_1 + 28 >> 2] < 1) {
          break label$35
         }
         label$39 : {
          if (!$709($0, $11_1 + 552 | 0)) {
           if ($707($7_1, 2048, $706($0))) {
            break label$39
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
          $0 = 0;
          break label$4;
         }
         if (HEAP32[$9_1 >> 2] == HEAP32[$11_1 + 548 >> 2]) {
          $1156($8_1, $9_1, $11_1 + 548 | 0)
         }
         $2_1 = $706($0);
         $3 = HEAP32[$9_1 >> 2];
         HEAP32[$9_1 >> 2] = $3 + 4;
         HEAP32[$3 >> 2] = $2_1;
         HEAP32[$11_1 + 28 >> 2] = HEAP32[$11_1 + 28 >> 2] + -1;
         continue;
        };
       }
       $4_1 = $10_1;
       if (HEAP32[$8_1 >> 2] != HEAP32[$9_1 >> 2]) {
        break label$2
       }
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
       $0 = 0;
       break label$4;
      }
      label$42 : {
       if (!$10_1) {
        break label$42
       }
       $4_1 = 1;
       while (1) {
        if ($4_1 >>> 0 >= $19($10_1) >>> 0) {
         break label$42
        }
        label$44 : {
         if (!$709($0, $11_1 + 552 | 0)) {
          if (($706($0) | 0) == HEAP32[$983($10_1, $4_1) >> 2]) {
           break label$44
          }
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
         $0 = 0;
         break label$4;
        }
        $708($0);
        $4_1 = $4_1 + 1 | 0;
        continue;
       };
      }
      $0 = 1;
      if (HEAP32[$15_1 >> 2] == HEAP32[$11_1 + 132 >> 2]) {
       break label$4
      }
      $0 = 0;
      HEAP32[$11_1 + 16 >> 2] = 0;
      $943($17_1, HEAP32[$15_1 >> 2], HEAP32[$11_1 + 132 >> 2], $11_1 + 16 | 0);
      if (HEAP32[$11_1 + 16 >> 2]) {
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 4;
       break label$4;
      }
      $0 = 1;
     }
     $1597($16_1);
     $1597($13_1);
     $1597($12_1);
     $1597($14_1);
     $1597($17_1);
     $934($15_1);
     global$0 = $11_1 + 560 | 0;
     return $0;
    }
    $4_1 = $10_1;
   }
   $1_1 = $1_1 + 1 | 0;
   continue;
  };
 }
 
 function $1181($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  var $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   if ($0) {
    $0 = $1198($1_1);
    $1163($10_1, $0);
    $1_1 = HEAP32[$10_1 >> 2];
    HEAP8[$2_1 | 0] = $1_1;
    HEAP8[$2_1 + 1 | 0] = $1_1 >>> 8;
    HEAP8[$2_1 + 2 | 0] = $1_1 >>> 16;
    HEAP8[$2_1 + 3 | 0] = $1_1 >>> 24;
    $1164($10_1, $0);
    $1199($8_1, $10_1);
    $1597($10_1);
    $927($10_1, $0);
    $1199($7_1, $10_1);
    $1597($10_1);
    (wasm2js_i32$0 = $3, wasm2js_i32$1 = $1011($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1012($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $1013($10_1, $0);
    $408($5_1, $10_1);
    $1597($10_1);
    $926($10_1, $0);
    $1199($6_1, $10_1);
    $1597($10_1);
    $0 = $1165($0);
    break label$1;
   }
   $0 = $1200($1_1);
   $1163($10_1, $0);
   $1_1 = HEAP32[$10_1 >> 2];
   HEAP8[$2_1 | 0] = $1_1;
   HEAP8[$2_1 + 1 | 0] = $1_1 >>> 8;
   HEAP8[$2_1 + 2 | 0] = $1_1 >>> 16;
   HEAP8[$2_1 + 3 | 0] = $1_1 >>> 24;
   $1164($10_1, $0);
   $1199($8_1, $10_1);
   $1597($10_1);
   $927($10_1, $0);
   $1199($7_1, $10_1);
   $1597($10_1);
   (wasm2js_i32$0 = $3, wasm2js_i32$1 = $1011($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1012($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $1013($10_1, $0);
   $408($5_1, $10_1);
   $1597($10_1);
   $926($10_1, $0);
   $1199($6_1, $10_1);
   $1597($10_1);
   $0 = $1165($0);
  }
  HEAP32[$9_1 >> 2] = $0;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1182($0, $1_1) {
  $381($0, $713(HEAP32[$1_1 >> 2]), HEAP32[$1_1 >> 2]);
 }
 
 function $1189($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $0 = global$0 - 448 | 0;
  global$0 = $0;
  HEAP32[$0 + 440 >> 2] = $1_1;
  HEAP32[$0 + 432 >> 2] = $2_1;
  HEAP32[$0 + 20 >> 2] = 170;
  $1_1 = $930($0 + 24 | 0, $0 + 32 | 0, $0 + 20 | 0);
  $683($0 + 16 | 0, $4_1);
  $7_1 = $704($0 + 16 | 0);
  HEAP8[$0 + 15 | 0] = 0;
  if ($1178($0 + 440 | 0, $2_1, $3, $0 + 16 | 0, HEAP32[$4_1 + 4 >> 2], $5_1, $0 + 15 | 0, $7_1, $1_1, $0 + 20 | 0, $0 + 432 | 0)) {
   $1190($6_1);
   if (HEAPU8[$0 + 15 | 0]) {
    $1621($6_1, $746($7_1, 45))
   }
   $2_1 = $746($7_1, 48);
   $4_1 = HEAP32[$1_1 >> 2];
   $3 = HEAP32[$0 + 20 >> 2];
   $7_1 = $3 + -4 | 0;
   while (1) {
    if (!(($2_1 | 0) != HEAP32[$4_1 >> 2] | $4_1 >>> 0 >= $7_1 >>> 0)) {
     $4_1 = $4_1 + 4 | 0;
     continue;
    }
    break;
   };
   $1197($6_1, $4_1, $3);
  }
  if ($709($0 + 440 | 0, $0 + 432 | 0)) {
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 2
  }
  $2_1 = HEAP32[$0 + 440 >> 2];
  $924($0 + 16 | 0);
  $934($1_1);
  global$0 = $0 + 448 | 0;
  return $2_1 | 0;
 }
 
 function $1190($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   if ($94($0)) {
    $2_1 = HEAP32[$0 >> 2];
    HEAP32[$1_1 + 12 >> 2] = 0;
    $436($2_1, $1_1 + 12 | 0);
    $122($0, 0);
    break label$1;
   }
   HEAP32[$1_1 + 8 >> 2] = 0;
   $436($0, $1_1 + 8 | 0);
   $114($0, 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1197($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $5_1 = $19($0);
  $4_1 = $1479($0);
  $6_1 = $1478($1_1, $2_1);
  label$1 : {
   if (!$6_1) {
    break label$1
   }
   if ($1561($1_1, $93($0), $93($0) + ($19($0) << 2) | 0)) {
    $151($3, $0);
    $921($3, $1_1, $2_1);
    $1620($0, $93($3), $19($3));
    $1597($3);
    break label$1;
   }
   if ($4_1 - $5_1 >>> 0 < $6_1 >>> 0) {
    $1618($0, $4_1, ($5_1 + $6_1 | 0) - $4_1 | 0, $5_1, $5_1)
   }
   $4_1 = $93($0) + ($5_1 << 2) | 0;
   while (1) {
    if (($1_1 | 0) != ($2_1 | 0)) {
     $436($4_1, $1_1);
     $1_1 = $1_1 + 4 | 0;
     $4_1 = $4_1 + 4 | 0;
     continue;
    }
    break;
   };
   HEAP32[$3 >> 2] = 0;
   $436($4_1, $3);
   $1480($0, $5_1 + $6_1 | 0);
  }
  global$0 = $3 + 16 | 0;
 }
 
 function $1198($0) {
  return $929($0, 24200);
 }
 
 function $1199($0, $1_1) {
  $1205($0, $1_1);
 }
 
 function $1200($0) {
  return $929($0, 24192);
 }
 
 function $1201($0, $1_1, $2_1) {
  var $3 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  HEAP32[$3 + 16 >> 2] = $1_1;
  HEAP32[$3 + 24 >> 2] = $0;
  HEAP32[$3 + 8 >> 2] = $2_1;
  while (1) {
   label$2 : {
    $0 = 1;
    label$3 : {
     if (!$241($3 + 24 | 0, $3 + 16 | 0)) {
      break label$3
     }
     if (HEAP32[HEAP32[$3 + 24 >> 2] >> 2] == HEAP32[HEAP32[$3 + 8 >> 2] >> 2]) {
      break label$2
     }
     $0 = 0;
    }
    global$0 = $3 + 32 | 0;
    return $0;
   }
   $398($3 + 24 | 0);
   $398($3 + 8 | 0);
   continue;
  };
 }
 
 function $1202($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0 >> 2];
  $0 = $2_1 + 8 | 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + ($1_1 << 2);
  global$0 = $2_1 + 16 | 0;
  return HEAP32[$2_1 + 8 >> 2];
 }
 
 function $1205($0, $1_1) {
  var $2_1 = 0;
  $1543($0);
  HEAP32[$0 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2_1;
  $1140($1_1);
 }
 
 function $1206($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0;
  $0 = global$0 - 464 | 0;
  global$0 = $0;
  HEAP32[$0 + 16 >> 2] = $5_1;
  HEAP32[$0 + 20 >> 2] = $6_1;
  HEAP32[$0 + 24 >> 2] = $7_1;
  HEAP32[$0 + 28 >> 2] = $8_1;
  HEAP32[$0 + 348 >> 2] = $0 + 352;
  $9_1 = $882($0 + 352 | 0, 100, 11567, $0 + 16 | 0);
  HEAP32[$0 + 240 >> 2] = 169;
  $13_1 = $930($0 + 232 | 0, 0, $0 + 240 | 0);
  HEAP32[$0 + 240 >> 2] = 169;
  $11_1 = $930($0 + 224 | 0, 0, $0 + 240 | 0);
  $12_1 = $0 + 240 | 0;
  label$1 : {
   if ($9_1 >>> 0 >= 100) {
    $9_1 = $973();
    HEAP32[$0 >> 2] = $5_1;
    HEAP32[$0 + 4 >> 2] = $6_1;
    HEAP32[$0 + 8 >> 2] = $7_1;
    HEAP32[$0 + 12 >> 2] = $8_1;
    $9_1 = $1034($0 + 348 | 0, $9_1, 11567, $0);
    $5_1 = HEAP32[$0 + 348 >> 2];
    if (!$5_1) {
     break label$1
    }
    $931($13_1, $5_1);
    $931($11_1, $1768($9_1));
    if ($1207($11_1)) {
     break label$1
    }
    $12_1 = HEAP32[$11_1 >> 2];
   }
   $683($0 + 216 | 0, $3);
   $14_1 = $526($0 + 216 | 0);
   $5_1 = HEAP32[$0 + 348 >> 2];
   $971($14_1, $5_1, $5_1 + $9_1 | 0, $12_1);
   $15_1 = $9_1 ? HEAPU8[HEAP32[$0 + 348 >> 2]] == 45 : 0;
   $8_1 = $10($0 + 192 | 0);
   $6_1 = $10($0 + 176 | 0);
   $5_1 = $10($0 + 160 | 0);
   $1208($2_1, $15_1, $0 + 216 | 0, $0 + 208 | 0, $0 + 207 | 0, $0 + 206 | 0, $8_1, $6_1, $5_1, $0 + 156 | 0);
   HEAP32[$0 + 48 >> 2] = 169;
   $7_1 = $930($0 + 40 | 0, 0, $0 + 48 | 0);
   $2_1 = HEAP32[$0 + 156 >> 2];
   label$5 : {
    if (($9_1 | 0) > ($2_1 | 0)) {
     $10_1 = $19($5_1) + ($9_1 - $2_1 << 1 | 1) | 0;
     break label$5;
    }
    $10_1 = $19($5_1) + 2 | 0;
   }
   $2_1 = $0 + 48 | 0;
   $10_1 = ($19($6_1) + $10_1 | 0) + HEAP32[$0 + 156 >> 2] | 0;
   if ($10_1 >>> 0 >= 101) {
    $931($7_1, $1768($10_1));
    $2_1 = HEAP32[$7_1 >> 2];
    if (!$2_1) {
     break label$1
    }
   }
   $1209($2_1, $0 + 36 | 0, $0 + 32 | 0, HEAP32[$3 + 4 >> 2], $12_1, $9_1 + $12_1 | 0, $14_1, $15_1, $0 + 208 | 0, HEAP8[$0 + 207 | 0], HEAP8[$0 + 206 | 0], $8_1, $6_1, $5_1, HEAP32[$0 + 156 >> 2]);
   $1_1 = $520($1_1, $2_1, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2], $3, $4_1);
   $934($7_1);
   $1597($5_1);
   $1597($6_1);
   $1597($8_1);
   $924($0 + 216 | 0);
   $934($11_1);
   $934($13_1);
   global$0 = $0 + 464 | 0;
   return $1_1 | 0;
  }
  $1129();
  abort();
 }
 
 function $1207($0) {
  return HEAP32[$0 >> 2] != 0 ^ 1;
 }
 
 function $1208($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  var $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   if ($0) {
    $0 = $1162($2_1);
    label$3 : {
     if ($1_1) {
      $1163($10_1, $0);
      $1_1 = HEAP32[$10_1 >> 2];
      HEAP8[$3 | 0] = $1_1;
      HEAP8[$3 + 1 | 0] = $1_1 >>> 8;
      HEAP8[$3 + 2 | 0] = $1_1 >>> 16;
      HEAP8[$3 + 3 | 0] = $1_1 >>> 24;
      $1164($10_1, $0);
      break label$3;
     }
     $1211($10_1, $0);
     $1_1 = HEAP32[$10_1 >> 2];
     HEAP8[$3 | 0] = $1_1;
     HEAP8[$3 + 1 | 0] = $1_1 >>> 8;
     HEAP8[$3 + 2 | 0] = $1_1 >>> 16;
     HEAP8[$3 + 3 | 0] = $1_1 >>> 24;
     $927($10_1, $0);
    }
    $408($8_1, $10_1);
    $1597($10_1);
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1011($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $1012($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
    $1013($10_1, $0);
    $408($6_1, $10_1);
    $1597($10_1);
    $926($10_1, $0);
    $408($7_1, $10_1);
    $1597($10_1);
    $0 = $1165($0);
    break label$1;
   }
   $0 = $1166($2_1);
   label$5 : {
    if ($1_1) {
     $1163($10_1, $0);
     $1_1 = HEAP32[$10_1 >> 2];
     HEAP8[$3 | 0] = $1_1;
     HEAP8[$3 + 1 | 0] = $1_1 >>> 8;
     HEAP8[$3 + 2 | 0] = $1_1 >>> 16;
     HEAP8[$3 + 3 | 0] = $1_1 >>> 24;
     $1164($10_1, $0);
     break label$5;
    }
    $1211($10_1, $0);
    $1_1 = HEAP32[$10_1 >> 2];
    HEAP8[$3 | 0] = $1_1;
    HEAP8[$3 + 1 | 0] = $1_1 >>> 8;
    HEAP8[$3 + 2 | 0] = $1_1 >>> 16;
    HEAP8[$3 + 3 | 0] = $1_1 >>> 24;
    $927($10_1, $0);
   }
   $408($8_1, $10_1);
   $1597($10_1);
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1011($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $1012($0)), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
   $1013($10_1, $0);
   $408($6_1, $10_1);
   $1597($10_1);
   $926($10_1, $0);
   $408($7_1, $10_1);
   $1597($10_1);
   $0 = $1165($0);
  }
  HEAP32[$9_1 >> 2] = $0;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1209($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  var $15_1 = 0, $16_1 = 0, $17_1 = 0, $18 = 0, $19_1 = 0, $20 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $20 = global$0 - 16 | 0;
  global$0 = $20;
  HEAP32[$2_1 >> 2] = $0;
  $23_1 = $3 & 512;
  while (1) {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($21_1 | 0) == 4) {
        if ($19($13_1) >>> 0 > 1) {
         (wasm2js_i32$0 = $20, wasm2js_i32$1 = $1017($13_1)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
         (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $1214($1169($20 + 8 | 0, 1), $1018($13_1), HEAP32[$2_1 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        }
        $3 = $3 & 176;
        if (($3 | 0) == 16) {
         break label$4
        }
        if (($3 | 0) != 32) {
         break label$5
        }
        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
        break label$4;
       }
       $16_1 = HEAP8[$8_1 + $21_1 | 0];
       if ($16_1 >>> 0 > 4) {
        break label$2
       }
       label$8 : {
        switch ($16_1 - 1 | 0) {
        default:
         HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
         break label$2;
        case 0:
         HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
         $16_1 = $527($6_1, 32);
         $15_1 = HEAP32[$2_1 >> 2];
         HEAP32[$2_1 >> 2] = $15_1 + 1;
         HEAP8[$15_1 | 0] = $16_1;
         break label$2;
        case 2:
         if ($212($13_1)) {
          break label$2
         }
         $16_1 = HEAPU8[$933($13_1, 0) | 0];
         $15_1 = HEAP32[$2_1 >> 2];
         HEAP32[$2_1 >> 2] = $15_1 + 1;
         HEAP8[$15_1 | 0] = $16_1;
         break label$2;
        case 1:
         if ($212($12_1) | !$23_1) {
          break label$2
         }
         (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $1214($1017($12_1), $1018($12_1), HEAP32[$2_1 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         break label$2;
        case 3:
         break label$8;
        };
       }
       $24_1 = HEAP32[$2_1 >> 2];
       $4_1 = $7_1 ? $4_1 + 1 | 0 : $4_1;
       $17_1 = $4_1;
       while (1) {
        label$14 : {
         if ($17_1 >>> 0 >= $5_1 >>> 0) {
          break label$14
         }
         if (!$686($6_1, 2048, HEAP8[$17_1 | 0])) {
          break label$14
         }
         $17_1 = $17_1 + 1 | 0;
         continue;
        }
        break;
       };
       $16_1 = $14_1;
       if (($16_1 | 0) >= 1) {
        while (1) {
         $15_1 = ($16_1 | 0) < 1;
         if (!($15_1 | $17_1 >>> 0 <= $4_1 >>> 0)) {
          $17_1 = $17_1 + -1 | 0;
          $15_1 = HEAPU8[$17_1 | 0];
          $18 = HEAP32[$2_1 >> 2];
          HEAP32[$2_1 >> 2] = $18 + 1;
          HEAP8[$18 | 0] = $15_1;
          $16_1 = $16_1 + -1 | 0;
          continue;
         }
         break;
        };
        if ($15_1) {
         $18 = 0
        } else {
         $18 = $527($6_1, 48)
        }
        while (1) {
         $15_1 = HEAP32[$2_1 >> 2];
         HEAP32[$2_1 >> 2] = $15_1 + 1;
         if (($16_1 | 0) >= 1) {
          HEAP8[$15_1 | 0] = $18;
          $16_1 = $16_1 + -1 | 0;
          continue;
         }
         break;
        };
        HEAP8[$15_1 | 0] = $9_1;
       }
       if (($4_1 | 0) == ($17_1 | 0)) {
        $16_1 = $527($6_1, 48);
        $15_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $15_1 + 1;
        HEAP8[$15_1 | 0] = $16_1;
        break label$3;
       }
       $15_1 = -1;
       label$23 : {
        if ($212($11_1)) {
         break label$23
        }
        $15_1 = HEAP8[$933($11_1, 0) | 0];
       }
       $16_1 = 0;
       $19_1 = 0;
       while (1) {
        if (($4_1 | 0) == ($17_1 | 0)) {
         break label$3
        }
        label$26 : {
         if (($16_1 | 0) != ($15_1 | 0)) {
          $18 = $16_1;
          break label$26;
         }
         $15_1 = HEAP32[$2_1 >> 2];
         HEAP32[$2_1 >> 2] = $15_1 + 1;
         HEAP8[$15_1 | 0] = $10_1;
         $18 = 0;
         $19_1 = $19_1 + 1 | 0;
         if ($19_1 >>> 0 >= $19($11_1) >>> 0) {
          $15_1 = $16_1;
          break label$26;
         }
         if (HEAPU8[$933($11_1, $19_1) | 0] == 127) {
          $15_1 = -1;
          break label$26;
         }
         $15_1 = HEAP8[$933($11_1, $19_1) | 0];
        }
        $17_1 = $17_1 + -1 | 0;
        $16_1 = HEAPU8[$17_1 | 0];
        $22_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $22_1 + 1;
        HEAP8[$22_1 | 0] = $16_1;
        $16_1 = $18 + 1 | 0;
        continue;
       };
      }
      HEAP32[$1_1 >> 2] = $0;
     }
     global$0 = $20 + 16 | 0;
     return;
    }
    $1026($24_1, HEAP32[$2_1 >> 2]);
   }
   $21_1 = $21_1 + 1 | 0;
   continue;
  };
 }
 
 function $1211($0, $1_1) {
  FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 40 >> 2]]($0, $1_1);
 }
 
 function $1214($0, $1_1, $2_1) {
  return $1225($0, $1_1, $2_1);
 }
 
 function $1215($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $0 = global$0 - 192 | 0;
  global$0 = $0;
  $683($0 + 184 | 0, $3);
  $11_1 = $526($0 + 184 | 0);
  if ($19($5_1)) {
   $12_1 = HEAPU8[$933($5_1, 0) | 0] == ($527($11_1, 45) & 255)
  }
  $9_1 = $10($0 + 160 | 0);
  $8_1 = $10($0 + 144 | 0);
  $7_1 = $10($0 + 128 | 0);
  $1208($2_1, $12_1, $0 + 184 | 0, $0 + 176 | 0, $0 + 175 | 0, $0 + 174 | 0, $9_1, $8_1, $7_1, $0 + 124 | 0);
  HEAP32[$0 + 16 >> 2] = 169;
  $10_1 = $930($0 + 8 | 0, 0, $0 + 16 | 0);
  label$3 : {
   if (($19($5_1) | 0) > HEAP32[$0 + 124 >> 2]) {
    $2_1 = $19($5_1);
    $6_1 = HEAP32[$0 + 124 >> 2];
    $6_1 = ($19($7_1) + ($2_1 - $6_1 << 1) | 0) + 1 | 0;
    break label$3;
   }
   $6_1 = $19($7_1) + 2 | 0;
  }
  $2_1 = $0 + 16 | 0;
  $6_1 = ($19($8_1) + $6_1 | 0) + HEAP32[$0 + 124 >> 2] | 0;
  label$5 : {
   if ($6_1 >>> 0 < 101) {
    break label$5
   }
   $931($10_1, $1768($6_1));
   $2_1 = HEAP32[$10_1 >> 2];
   if ($2_1) {
    break label$5
   }
   $1129();
   abort();
  }
  $1209($2_1, $0 + 4 | 0, $0, HEAP32[$3 + 4 >> 2], $93($5_1), $93($5_1) + $19($5_1) | 0, $11_1, $12_1, $0 + 176 | 0, HEAP8[$0 + 175 | 0], HEAP8[$0 + 174 | 0], $9_1, $8_1, $7_1, HEAP32[$0 + 124 >> 2]);
  $1_1 = $520($1_1, $2_1, HEAP32[$0 + 4 >> 2], HEAP32[$0 >> 2], $3, $4_1);
  $934($10_1);
  $1597($7_1);
  $1597($8_1);
  $1597($9_1);
  $924($0 + 184 | 0);
  global$0 = $0 + 192 | 0;
  return $1_1 | 0;
 }
 
 function $1216($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0;
  $0 = global$0 - 1072 | 0;
  global$0 = $0;
  HEAP32[$0 + 16 >> 2] = $5_1;
  HEAP32[$0 + 20 >> 2] = $6_1;
  HEAP32[$0 + 24 >> 2] = $7_1;
  HEAP32[$0 + 28 >> 2] = $8_1;
  HEAP32[$0 + 956 >> 2] = $0 + 960;
  $9_1 = $882($0 + 960 | 0, 100, 11567, $0 + 16 | 0);
  HEAP32[$0 + 544 >> 2] = 169;
  $13_1 = $930($0 + 536 | 0, 0, $0 + 544 | 0);
  HEAP32[$0 + 544 >> 2] = 169;
  $11_1 = $930($0 + 528 | 0, 0, $0 + 544 | 0);
  $12_1 = $0 + 544 | 0;
  label$1 : {
   if ($9_1 >>> 0 >= 100) {
    $9_1 = $973();
    HEAP32[$0 >> 2] = $5_1;
    HEAP32[$0 + 4 >> 2] = $6_1;
    HEAP32[$0 + 8 >> 2] = $7_1;
    HEAP32[$0 + 12 >> 2] = $8_1;
    $9_1 = $1034($0 + 956 | 0, $9_1, 11567, $0);
    $5_1 = HEAP32[$0 + 956 >> 2];
    if (!$5_1) {
     break label$1
    }
    $931($13_1, $5_1);
    $931($11_1, $1768($9_1 << 2));
    if ($1207($11_1)) {
     break label$1
    }
    $12_1 = HEAP32[$11_1 >> 2];
   }
   $683($0 + 520 | 0, $3);
   $14_1 = $704($0 + 520 | 0);
   $5_1 = HEAP32[$0 + 956 >> 2];
   $1009($14_1, $5_1, $5_1 + $9_1 | 0, $12_1);
   $15_1 = $9_1 ? HEAPU8[HEAP32[$0 + 956 >> 2]] == 45 : 0;
   $8_1 = $10($0 + 488 | 0);
   $6_1 = $1139($0 + 472 | 0);
   $5_1 = $1139($0 + 456 | 0);
   $1218($2_1, $15_1, $0 + 520 | 0, $0 + 512 | 0, $0 + 508 | 0, $0 + 504 | 0, $8_1, $6_1, $5_1, $0 + 452 | 0);
   HEAP32[$0 + 48 >> 2] = 169;
   $7_1 = $930($0 + 40 | 0, 0, $0 + 48 | 0);
   $2_1 = HEAP32[$0 + 452 >> 2];
   label$5 : {
    if (($9_1 | 0) > ($2_1 | 0)) {
     $10_1 = $19($5_1) + ($9_1 - $2_1 << 1 | 1) | 0;
     break label$5;
    }
    $10_1 = $19($5_1) + 2 | 0;
   }
   $2_1 = $0 + 48 | 0;
   $10_1 = ($19($6_1) + $10_1 | 0) + HEAP32[$0 + 452 >> 2] | 0;
   if ($10_1 >>> 0 >= 101) {
    $931($7_1, $1768($10_1 << 2));
    $2_1 = HEAP32[$7_1 >> 2];
    if (!$2_1) {
     break label$1
    }
   }
   $1219($2_1, $0 + 36 | 0, $0 + 32 | 0, HEAP32[$3 + 4 >> 2], $12_1, ($9_1 << 2) + $12_1 | 0, $14_1, $15_1, $0 + 512 | 0, HEAP32[$0 + 508 >> 2], HEAP32[$0 + 504 >> 2], $8_1, $6_1, $5_1, HEAP32[$0 + 452 >> 2]);
   $1_1 = $1048($1_1, $2_1, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2], $3, $4_1);
   $934($7_1);
   $1597($5_1);
   $1597($6_1);
   $1597($8_1);
   $924($0 + 520 | 0);
   $934($11_1);
   $934($13_1);
   global$0 = $0 + 1072 | 0;
   return $1_1 | 0;
  }
  $1129();
  abort();
 }
 
 function $1218($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  var $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  label$1 : {
   if ($0) {
    $0 = $1198($2_1);
    label$3 : {
     if ($1_1) {
      $1163($10_1, $0);
      $1_1 = HEAP32[$10_1 >> 2];
      HEAP8[$3 | 0] = $1_1;
      HEAP8[$3 + 1 | 0] = $1_1 >>> 8;
      HEAP8[$3 + 2 | 0] = $1_1 >>> 16;
      HEAP8[$3 + 3 | 0] = $1_1 >>> 24;
      $1164($10_1, $0);
      break label$3;
     }
     $1211($10_1, $0);
     $1_1 = HEAP32[$10_1 >> 2];
     HEAP8[$3 | 0] = $1_1;
     HEAP8[$3 + 1 | 0] = $1_1 >>> 8;
     HEAP8[$3 + 2 | 0] = $1_1 >>> 16;
     HEAP8[$3 + 3 | 0] = $1_1 >>> 24;
     $927($10_1, $0);
    }
    $1199($8_1, $10_1);
    $1597($10_1);
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1011($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $1012($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $1013($10_1, $0);
    $408($6_1, $10_1);
    $1597($10_1);
    $926($10_1, $0);
    $1199($7_1, $10_1);
    $1597($10_1);
    $0 = $1165($0);
    break label$1;
   }
   $0 = $1200($2_1);
   label$5 : {
    if ($1_1) {
     $1163($10_1, $0);
     $1_1 = HEAP32[$10_1 >> 2];
     HEAP8[$3 | 0] = $1_1;
     HEAP8[$3 + 1 | 0] = $1_1 >>> 8;
     HEAP8[$3 + 2 | 0] = $1_1 >>> 16;
     HEAP8[$3 + 3 | 0] = $1_1 >>> 24;
     $1164($10_1, $0);
     break label$5;
    }
    $1211($10_1, $0);
    $1_1 = HEAP32[$10_1 >> 2];
    HEAP8[$3 | 0] = $1_1;
    HEAP8[$3 + 1 | 0] = $1_1 >>> 8;
    HEAP8[$3 + 2 | 0] = $1_1 >>> 16;
    HEAP8[$3 + 3 | 0] = $1_1 >>> 24;
    $927($10_1, $0);
   }
   $1199($8_1, $10_1);
   $1597($10_1);
   (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $1011($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $1012($0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $1013($10_1, $0);
   $408($6_1, $10_1);
   $1597($10_1);
   $926($10_1, $0);
   $1199($7_1, $10_1);
   $1597($10_1);
   $0 = $1165($0);
  }
  HEAP32[$9_1 >> 2] = $0;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1219($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  var $15_1 = 0, $16_1 = 0, $17_1 = 0, $18 = 0, $19_1 = 0, $20 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $20 = global$0 - 16 | 0;
  global$0 = $20;
  HEAP32[$2_1 >> 2] = $0;
  $23_1 = $3 & 512;
  label$1 : {
   while (1) {
    if (($21_1 | 0) == 4) {
     label$4 : {
      if ($19($13_1) >>> 0 > 1) {
       (wasm2js_i32$0 = $20, wasm2js_i32$1 = $1017($13_1)), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
       (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $1223($1202($20 + 8 | 0, 1), $1043($13_1), HEAP32[$2_1 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      }
      $3 = $3 & 176;
      if (($3 | 0) == 16) {
       break label$1
      }
      if (($3 | 0) != 32) {
       break label$4
      }
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
      break label$1;
     }
    } else {
     $16_1 = HEAP8[$8_1 + $21_1 | 0];
     label$7 : {
      if ($16_1 >>> 0 > 4) {
       break label$7
      }
      label$8 : {
       switch ($16_1 - 1 | 0) {
       default:
        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
        break label$7;
       case 0:
        HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
        $16_1 = $746($6_1, 32);
        $15_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $15_1 + 4;
        HEAP32[$15_1 >> 2] = $16_1;
        break label$7;
       case 2:
        if ($212($13_1)) {
         break label$7
        }
        $16_1 = HEAP32[$983($13_1, 0) >> 2];
        $15_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $15_1 + 4;
        HEAP32[$15_1 >> 2] = $16_1;
        break label$7;
       case 1:
        if ($212($12_1) | !$23_1) {
         break label$7
        }
        (wasm2js_i32$0 = $2_1, wasm2js_i32$1 = $1223($1017($12_1), $1043($12_1), HEAP32[$2_1 >> 2])), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$7;
       case 3:
        break label$8;
       };
      }
      $24_1 = HEAP32[$2_1 >> 2];
      $4_1 = $7_1 ? $4_1 + 4 | 0 : $4_1;
      $17_1 = $4_1;
      while (1) {
       label$14 : {
        if ($17_1 >>> 0 >= $5_1 >>> 0) {
         break label$14
        }
        if (!$707($6_1, 2048, HEAP32[$17_1 >> 2])) {
         break label$14
        }
        $17_1 = $17_1 + 4 | 0;
        continue;
       }
       break;
      };
      $16_1 = $14_1;
      if (($16_1 | 0) >= 1) {
       while (1) {
        $15_1 = ($16_1 | 0) < 1;
        if (!($15_1 | $17_1 >>> 0 <= $4_1 >>> 0)) {
         $17_1 = $17_1 + -4 | 0;
         $15_1 = HEAP32[$17_1 >> 2];
         $18 = HEAP32[$2_1 >> 2];
         HEAP32[$2_1 >> 2] = $18 + 4;
         HEAP32[$18 >> 2] = $15_1;
         $16_1 = $16_1 + -1 | 0;
         continue;
        }
        break;
       };
       if ($15_1) {
        $19_1 = 0
       } else {
        $19_1 = $746($6_1, 48)
       }
       $15_1 = HEAP32[$2_1 >> 2];
       while (1) {
        $18 = $15_1 + 4 | 0;
        if (($16_1 | 0) >= 1) {
         HEAP32[$15_1 >> 2] = $19_1;
         $16_1 = $16_1 + -1 | 0;
         $15_1 = $18;
         continue;
        }
        break;
       };
       HEAP32[$2_1 >> 2] = $18;
       HEAP32[$15_1 >> 2] = $9_1;
      }
      label$22 : {
       if (($4_1 | 0) == ($17_1 | 0)) {
        $16_1 = $746($6_1, 48);
        $15_1 = HEAP32[$2_1 >> 2];
        $17_1 = $15_1 + 4 | 0;
        HEAP32[$2_1 >> 2] = $17_1;
        HEAP32[$15_1 >> 2] = $16_1;
        break label$22;
       }
       $18 = -1;
       label$24 : {
        if ($212($11_1)) {
         break label$24
        }
        $18 = HEAP8[$933($11_1, 0) | 0];
       }
       $16_1 = 0;
       $19_1 = 0;
       while (1) {
        if (($4_1 | 0) != ($17_1 | 0)) {
         label$28 : {
          if (($16_1 | 0) != ($18 | 0)) {
           $15_1 = $16_1;
           break label$28;
          }
          $15_1 = HEAP32[$2_1 >> 2];
          HEAP32[$2_1 >> 2] = $15_1 + 4;
          HEAP32[$15_1 >> 2] = $10_1;
          $15_1 = 0;
          $19_1 = $19_1 + 1 | 0;
          if ($19_1 >>> 0 >= $19($11_1) >>> 0) {
           $18 = $16_1;
           break label$28;
          }
          if (HEAPU8[$933($11_1, $19_1) | 0] == 127) {
           $18 = -1;
           break label$28;
          }
          $18 = HEAP8[$933($11_1, $19_1) | 0];
         }
         $17_1 = $17_1 + -4 | 0;
         $16_1 = HEAP32[$17_1 >> 2];
         $22_1 = HEAP32[$2_1 >> 2];
         HEAP32[$2_1 >> 2] = $22_1 + 4;
         HEAP32[$22_1 >> 2] = $16_1;
         $16_1 = $15_1 + 1 | 0;
         continue;
        }
        break;
       };
       $17_1 = HEAP32[$2_1 >> 2];
      }
      $1049($24_1, $17_1);
     }
     $21_1 = $21_1 + 1 | 0;
     continue;
    }
    break;
   };
   HEAP32[$1_1 >> 2] = $0;
  }
  global$0 = $20 + 16 | 0;
 }
 
 function $1223($0, $1_1, $2_1) {
  return $1227($0, $1_1, $2_1);
 }
 
 function $1224($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $0 = global$0 - 496 | 0;
  global$0 = $0;
  $683($0 + 488 | 0, $3);
  $11_1 = $704($0 + 488 | 0);
  if ($19($5_1)) {
   $12_1 = HEAP32[$983($5_1, 0) >> 2] == ($746($11_1, 45) | 0)
  }
  $9_1 = $10($0 + 456 | 0);
  $8_1 = $1139($0 + 440 | 0);
  $7_1 = $1139($0 + 424 | 0);
  $1218($2_1, $12_1, $0 + 488 | 0, $0 + 480 | 0, $0 + 476 | 0, $0 + 472 | 0, $9_1, $8_1, $7_1, $0 + 420 | 0);
  HEAP32[$0 + 16 >> 2] = 169;
  $10_1 = $930($0 + 8 | 0, 0, $0 + 16 | 0);
  label$3 : {
   if (($19($5_1) | 0) > HEAP32[$0 + 420 >> 2]) {
    $2_1 = $19($5_1);
    $6_1 = HEAP32[$0 + 420 >> 2];
    $6_1 = ($19($7_1) + ($2_1 - $6_1 << 1) | 0) + 1 | 0;
    break label$3;
   }
   $6_1 = $19($7_1) + 2 | 0;
  }
  $2_1 = $0 + 16 | 0;
  $6_1 = ($19($8_1) + $6_1 | 0) + HEAP32[$0 + 420 >> 2] | 0;
  label$5 : {
   if ($6_1 >>> 0 < 101) {
    break label$5
   }
   $931($10_1, $1768($6_1 << 2));
   $2_1 = HEAP32[$10_1 >> 2];
   if ($2_1) {
    break label$5
   }
   $1129();
   abort();
  }
  $1219($2_1, $0 + 4 | 0, $0, HEAP32[$3 + 4 >> 2], $93($5_1), $93($5_1) + ($19($5_1) << 2) | 0, $11_1, $12_1, $0 + 480 | 0, HEAP32[$0 + 476 >> 2], HEAP32[$0 + 472 >> 2], $9_1, $8_1, $7_1, HEAP32[$0 + 420 >> 2]);
  $1_1 = $1048($1_1, $2_1, HEAP32[$0 + 4 >> 2], HEAP32[$0 >> 2], $3, $4_1);
  $934($10_1);
  $1597($7_1);
  $1597($8_1);
  $1597($9_1);
  $924($0 + 488 | 0);
  global$0 = $0 + 496 | 0;
  return $1_1 | 0;
 }
 
 function $1225($0, $1_1, $2_1) {
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 >> 2] = $1_1;
  HEAP32[$3 + 8 >> 2] = $0;
  while (1) {
   if ($241($3 + 8 | 0, $3)) {
    HEAP8[$2_1 | 0] = HEAPU8[HEAP32[$3 + 8 >> 2]];
    $2_1 = $2_1 + 1 | 0;
    $1020($3 + 8 | 0);
    continue;
   }
   break;
  };
  global$0 = $3 + 16 | 0;
  return $2_1;
 }
 
 function $1227($0, $1_1, $2_1) {
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 >> 2] = $1_1;
  HEAP32[$3 + 8 >> 2] = $0;
  while (1) {
   if ($241($3 + 8 | 0, $3)) {
    HEAP32[$2_1 >> 2] = HEAP32[HEAP32[$3 + 8 >> 2] >> 2];
    $2_1 = $2_1 + 4 | 0;
    $398($3 + 8 | 0);
    continue;
   }
   break;
  };
  global$0 = $3 + 16 | 0;
  return $2_1;
 }
 
 function $1229($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $93($1_1);
  return (1 ? -1 : 2147483647) | 0;
 }
 
 function $1230($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $3 = $10($1_1 + 16 | 0);
  $1232($245($3), $93($5_1), $93($5_1) + $19($5_1) | 0);
  $2_1 = $93($3);
  $1232($245($10($0)), $2_1, $644($2_1) + $2_1 | 0);
  $1597($3);
  global$0 = $1_1 + 32 | 0;
 }
 
 function $1232($0, $1_1, $2_1) {
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 8 >> 2] = $0;
  while (1) {
   if ($1_1 >>> 0 < $2_1 >>> 0) {
    $1233($3 + 8 | 0, $1_1);
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  global$0 = $3 + 16 | 0;
 }
 
 function $1233($0, $1_1) {
  $1608(HEAP32[$0 >> 2], HEAP8[$1_1 | 0]);
 }
 
 function $1235($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $4_1 = $10($1_1 + 16 | 0);
  $2_1 = $1_1 + 8 | 0;
  $1242($2_1);
  HEAP32[$2_1 >> 2] = 12692;
  $1238($2_1, $245($4_1), $93($5_1), $93($5_1) + ($19($5_1) << 2) | 0);
  $2_1 = $93($4_1);
  $3 = $1139($0);
  $0 = $1_1 + 8 | 0;
  $1242($0);
  HEAP32[$0 >> 2] = 12788;
  $1241($0, $245($3), $2_1, $644($2_1) + $2_1 | 0);
  $1597($4_1);
  global$0 = $1_1 + 32 | 0;
 }
 
 function $1238($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 + -64 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 56 >> 2] = $1_1;
  $6_1 = $4_1 + 48 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!(($5_1 | 0) == 2 | $2_1 >>> 0 >= $3 >>> 0)) {
     HEAP32[$4_1 + 8 >> 2] = $2_1;
     $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $4_1 + 48 | 0, $2_1, $3, $4_1 + 8 | 0, $4_1 + 16 | 0, $6_1, $4_1 + 12 | 0) | 0;
     if (($5_1 | 0) == 2) {
      break label$1
     }
     $1_1 = $4_1 + 16 | 0;
     if (HEAP32[$4_1 + 8 >> 2] == ($2_1 | 0)) {
      break label$1
     }
     while (1) if ($1_1 >>> 0 >= HEAPU32[$4_1 + 12 >> 2]) {
      $2_1 = HEAP32[$4_1 + 8 >> 2];
      continue label$2;
     } else {
      $1233($4_1 + 56 | 0, $1_1);
      $1_1 = $1_1 + 1 | 0;
      continue;
     };
    }
    break;
   };
   global$0 = $4_1 - -64 | 0;
   return;
  }
  $1129();
  abort();
 }
 
 function $1241($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 152 >> 2] = $1_1;
  $6_1 = $4_1 + 144 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!(($5_1 | 0) == 2 | $2_1 >>> 0 >= $3 >>> 0)) {
     HEAP32[$4_1 + 8 >> 2] = $2_1;
     $5_1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $4_1 + 144 | 0, $2_1, ($3 - $2_1 | 0) > 32 ? $2_1 + 32 | 0 : $3, $4_1 + 8 | 0, $4_1 + 16 | 0, $6_1, $4_1 + 12 | 0) | 0;
     if (($5_1 | 0) == 2) {
      break label$1
     }
     $1_1 = $4_1 + 16 | 0;
     if (HEAP32[$4_1 + 8 >> 2] == ($2_1 | 0)) {
      break label$1
     }
     while (1) if ($1_1 >>> 0 >= HEAPU32[$4_1 + 12 >> 2]) {
      $2_1 = HEAP32[$4_1 + 8 >> 2];
      continue label$2;
     } else {
      HEAP32[$4_1 + 4 >> 2] = HEAP32[$1_1 >> 2];
      $1621(HEAP32[$4_1 + 152 >> 2], HEAP32[$4_1 + 4 >> 2]);
      $1_1 = $1_1 + 4 | 0;
      continue;
     };
    }
    break;
   };
   global$0 = $4_1 + 160 | 0;
   return;
  }
  $1129();
  abort();
 }
 
 function $1242($0) {
  $1246($0);
  HEAP32[$0 >> 2] = 12576;
 }
 
 function $1244($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 11656;
  if (HEAP32[$0 + 8 >> 2] != ($973() | 0)) {
   $885(HEAP32[$0 + 8 >> 2])
  }
  return $0 | 0;
 }
 
 function $1245() {
  var $0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1246(25888);
  HEAP32[6472] = 11584;
  $1306();
  $1307();
  $1308(28);
  $7(26064, 11573);
  $0 = $454(25904);
  $1309(25904);
  $1310(25904, $0);
  $1246(25568);
  HEAP32[6392] = 13176;
  $1312(25568, $1311(24096));
  $1246(25576);
  HEAP32[6394] = 13208;
  $1312(25576, $1311(24104));
  $1315();
  $1312(25584, $1311(24300));
  $1246(25600);
  HEAP32[6400] = 12164;
  $1312(25600, $1311(24292));
  $1246(25608);
  HEAP32[6402] = 12312;
  $1312(25608, $1311(24308));
  $1246(25616);
  HEAP32[6404] = 11656;
  (wasm2js_i32$0 = 25624, wasm2js_i32$1 = $973()), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $1312(25616, $1311(24316));
  $1246(25632);
  HEAP32[6408] = 12460;
  $1312(25632, $1311(24324));
  $1242(25640);
  $1312(25640, $1311(24332));
  $1246(25648);
  HEAP16[12828] = 11310;
  HEAP32[6412] = 11704;
  $10(25660);
  $1312(25648, $1311(24340));
  $1246(25680);
  HEAP32[6422] = 46;
  HEAP32[6423] = 44;
  HEAP32[6420] = 11744;
  $10(25696);
  $1312(25680, $1311(24348));
  $1246(25712);
  HEAP32[6428] = 13240;
  $1312(25712, $1311(24112));
  $1246(25720);
  HEAP32[6430] = 13484;
  $1312(25720, $1311(24120));
  $1246(25728);
  HEAP32[6432] = 13696;
  $1312(25728, $1311(24128));
  $1246(25736);
  HEAP32[6434] = 13928;
  $1312(25736, $1311(24136));
  $1246(25744);
  HEAP32[6436] = 14912;
  $1312(25744, $1311(24176));
  $1246(25752);
  HEAP32[6438] = 15060;
  $1312(25752, $1311(24184));
  $1246(25760);
  HEAP32[6440] = 15176;
  $1312(25760, $1311(24192));
  $1246(25768);
  HEAP32[6442] = 15292;
  $1312(25768, $1311(24200));
  $1246(25776);
  HEAP32[6444] = 15408;
  $1312(25776, $1311(24208));
  $1246(25784);
  HEAP32[6446] = 15572;
  $1312(25784, $1311(24216));
  $1246(25792);
  HEAP32[6448] = 15736;
  $1312(25792, $1311(24224));
  $1246(25800);
  HEAP32[6450] = 15900;
  $1312(25800, $1311(24232));
  $1246(25808);
  HEAP32[6454] = 17452;
  HEAP32[6452] = 14128;
  HEAP32[6454] = 14176;
  $1312(25808, $1311(24144));
  $1246(25824);
  HEAP32[6458] = 17488;
  HEAP32[6456] = 14392;
  HEAP32[6458] = 14440;
  $1312(25824, $1311(24152));
  $1246(25840);
  $1511(25848);
  HEAP32[6460] = 14628;
  $1312(25840, $1311(24160));
  $1246(25856);
  $1511(25864);
  HEAP32[6464] = 14784;
  $1312(25856, $1311(24168));
  $1246(25872);
  HEAP32[6468] = 16064;
  $1312(25872, $1311(24240));
  $1246(25880);
  HEAP32[6470] = 16184;
  $1312(25880, $1311(24248));
 }
 
 function $1246($0) {
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 >> 2] = 17524;
  HEAP32[$0 >> 2] = 12108;
 }
 
 function $1306() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[6476] = 0;
  HEAP32[6477] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  $131(25920, $0 + 12 | 0);
  HEAP8[26048] = 0;
  global$0 = $0 + 16 | 0;
 }
 
 function $1307() {
  var $0 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  if ($1490() >>> 0 < 28) {
   $1629();
   abort();
  }
  $0 = $1492($1491(25904), 28);
  HEAP32[6476] = $0;
  HEAP32[6477] = $0;
  (wasm2js_i32$0 = $566(25904), wasm2js_i32$1 = $0 + 112 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $1494(0);
 }
 
 function $1308($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1491(25904);
  while (1) {
   $1505(HEAP32[6477]);
   HEAP32[6477] = HEAP32[6477] + 4;
   $0 = $0 + -1 | 0;
   if ($0) {
    continue
   }
   break;
  };
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1309($0) {
  $1507($0, HEAP32[$0 >> 2]);
 }
 
 function $1310($0, $1_1) {
  $1503($0);
  $454($0);
 }
 
 function $1311($0) {
  var $1_1 = 0, $2_1 = 0, $3 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAP32[$1_1 + 8 >> 2] = 171;
  $2_1 = HEAP32[$1_1 + 12 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 + 8 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $3 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $1_1 + 16 | 0;
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = $3;
  HEAP32[$2_1 >> 2] = $0;
  $1368($0, $2_1);
  global$0 = $1_1 + 32 | 0;
  return HEAP32[$0 + 4 >> 2] + -1 | 0;
 }
 
 function $1312($0, $1_1) {
  var $2_1 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1342($0);
  $0 = $1346($2_1 + 8 | 0, $0);
  if ($454(25904) >>> 0 <= $1_1 >>> 0) {
   $1349($1_1 + 1 | 0)
  }
  if (HEAP32[$1341(25904, $1_1) >> 2]) {
   $1350(HEAP32[$1341(25904, $1_1) >> 2])
  }
  $3 = $490($0);
  (wasm2js_i32$0 = $1341(25904, $1_1), wasm2js_i32$1 = $3), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  $1_1 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = 0;
  if ($1_1) {
   $1350($1_1)
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1315() {
  $1246(25584);
  HEAP8[25596] = 0;
  HEAP32[6398] = 0;
  HEAP32[6396] = 11604;
  HEAP32[6398] = HEAP32[1854];
 }
 
 function $1340() {
  label$1 : {
   if (HEAP8[24272] & 1) {
    break label$1
   }
   if (!$1630(24272)) {
    break label$1
   }
   $1245();
   HEAP32[6066] = 25888;
   HEAP32[6067] = 24264;
   $1632(24272);
  }
  return HEAP32[6067];
 }
 
 function $1341($0, $1_1) {
  return HEAP32[$0 >> 2] + ($1_1 << 2) | 0;
 }
 
 function $1342($0) {
  $0 = $0 + 4 | 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
 }
 
 function $1346($0, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $436($0, $2_1 + 12 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $1349($0) {
  var $1_1 = 0;
  $1_1 = $454(25904);
  if ($1_1 >>> 0 < $0 >>> 0) {
   $1359($0 - $1_1 | 0);
   return;
  }
  if ($1_1 >>> 0 > $0 >>> 0) {
   $0 = HEAP32[6476] + ($0 << 2) | 0;
   $1_1 = $454(25904);
   $1507(25904, $0);
   $1310(25904, $1_1);
  }
 }
 
 function $1350($0) {
  if (($1355($0 + 4 | 0) | 0) == -1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0)
  }
 }
 
 function $1353($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0 >> 2] = 11584;
  $1_1 = $0 + 16 | 0;
  while (1) {
   if ($2_1 >>> 0 < $454($1_1) >>> 0) {
    if (HEAP32[$1341($1_1, $2_1) >> 2]) {
     $1350(HEAP32[$1341($1_1, $2_1) >> 2])
    }
    $2_1 = $2_1 + 1 | 0;
    continue;
   }
   break;
  };
  $1597($0 + 176 | 0);
  $1356($1_1);
  if (HEAP32[$1_1 >> 2]) {
   $1309($1_1);
   $1506($1491($1_1), HEAP32[$1_1 >> 2], $1503($1_1));
  }
  return $0 | 0;
 }
 
 function $1355($0) {
  var $1_1 = 0;
  $1_1 = $0;
  $0 = HEAP32[$0 >> 2] + -1 | 0;
  HEAP32[$1_1 >> 2] = $0;
  return $0;
 }
 
 function $1356($0) {
  $1503($0);
  $454($0);
  $1503($0);
 }
 
 function $1358($0) {
  $0 = $0 | 0;
  $1769($1353($0));
 }
 
 function $1359($0) {
  var $1_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   if (HEAP32[$566(25904) >> 2] - HEAP32[6477] >> 2 >>> 0 >= $0 >>> 0) {
    $1308($0);
    break label$1;
   }
   $1_1 = $1491(25904);
   $1_1 = $1514($2_1 + 8 | 0, $1512($454(25904) + $0 | 0), $454(25904), $1_1);
   $1515($1_1, $0);
   $1516($1_1);
   $484($1_1, HEAP32[$1_1 + 4 >> 2]);
   if (HEAP32[$1_1 >> 2]) {
    $1506($164($1_1), HEAP32[$1_1 >> 2], $476($1_1))
   }
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $1363($0, $1_1) {
  var $2_1 = 0;
  $2_1 = $0;
  $0 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 >> 2] = $0;
  $1342($0);
 }
 
 function $1364() {
  label$1 : {
   if (HEAP8[24284] & 1) {
    break label$1
   }
   if (!$1630(24284)) {
    break label$1
   }
   $1363(24276, $1340());
   HEAP32[6070] = 24276;
   $1632(24284);
  }
  return HEAP32[6070];
 }
 
 function $1365($0) {
  var $1_1 = 0;
  $1_1 = $0;
  $0 = HEAP32[$1364() >> 2];
  HEAP32[$1_1 >> 2] = $0;
  $1342($0);
 }
 
 function $1366($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = $0;
  $0 = HEAP32[6072] + 1 | 0;
  HEAP32[6072] = $0;
  HEAP32[$1_1 + 4 >> 2] = $0;
 }
 
 function $1368($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  if (HEAP32[$0 >> 2] != -1) {
   $3 = $2_1 + 8 | 0;
   $180($3, $1_1);
   $180($2_1, $3);
   $1571($0, $2_1);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1370($0) {
  $0 = $0 | 0;
  if ($0) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 4 >> 2]]($0)
  }
 }
 
 function $1372($0) {
  $0 = $0 | 0;
  $1531(HEAP32[HEAP32[$0 >> 2] >> 2]);
 }
 
 function $1375($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return ($2_1 >>> 0 <= 127 ? (HEAPU16[HEAP32[1854] + ($2_1 << 1) >> 1] & $1_1) != 0 : 0) | 0;
 }
 
 function $1377($0, $1_1, $2_1, $3) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    HEAP16[$3 >> 1] = HEAPU32[$1_1 >> 2] <= 127 ? HEAPU16[HEAP32[1854] + (HEAP32[$1_1 >> 2] << 1) >> 1] : 0;
    $3 = $3 + 2 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue;
   }
   break;
  };
  return $2_1 | 0;
 }
 
 function $1378($0, $1_1, $2_1, $3) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  while (1) {
   label$2 : {
    if (($2_1 | 0) != ($3 | 0)) {
     if (!(HEAPU16[HEAP32[1854] + (HEAP32[$2_1 >> 2] << 1) >> 1] & $1_1) | HEAPU32[$2_1 >> 2] > 127) {
      break label$2
     }
    } else {
     $2_1 = $3
    }
    return $2_1 | 0;
   }
   $2_1 = $2_1 + 4 | 0;
   continue;
  };
 }
 
 function $1379($0, $1_1, $2_1, $3) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  label$1 : {
   while (1) {
    if (($2_1 | 0) == ($3 | 0)) {
     break label$1
    }
    if (!(!(HEAPU16[HEAP32[1854] + (HEAP32[$2_1 >> 2] << 1) >> 1] & $1_1) | HEAPU32[$2_1 >> 2] > 127)) {
     $2_1 = $2_1 + 4 | 0;
     continue;
    }
    break;
   };
   $3 = $2_1;
  }
  return $3 | 0;
 }
 
 function $1380($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 >>> 0 <= 127 ? HEAP32[HEAP32[2048] + ($1_1 << 2) >> 2] : $1_1) | 0;
 }
 
 function $1382($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $3 = $1_1;
    $0 = HEAP32[$1_1 >> 2];
    if ($0 >>> 0 <= 127) {
     $0 = HEAP32[HEAP32[2048] + (HEAP32[$1_1 >> 2] << 2) >> 2]
    }
    HEAP32[$3 >> 2] = $0;
    $1_1 = $1_1 + 4 | 0;
    continue;
   }
   break;
  };
  return $2_1 | 0;
 }
 
 function $1383($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 >>> 0 <= 127 ? HEAP32[HEAP32[2436] + ($1_1 << 2) >> 2] : $1_1) | 0;
 }
 
 function $1385($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $3 = $1_1;
    $0 = HEAP32[$1_1 >> 2];
    if ($0 >>> 0 <= 127) {
     $0 = HEAP32[HEAP32[2436] + (HEAP32[$1_1 >> 2] << 2) >> 2]
    }
    HEAP32[$3 >> 2] = $0;
    $1_1 = $1_1 + 4 | 0;
    continue;
   }
   break;
  };
  return $2_1 | 0;
 }
 
 function $1386($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $1387($0, $1_1, $2_1, $3) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    HEAP32[$3 >> 2] = HEAP8[$1_1 | 0];
    $3 = $3 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  return $2_1 | 0;
 }
 
 function $1388($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return ($1_1 >>> 0 < 128 ? $1_1 : $2_1) << 24 >> 24;
 }
 
 function $1389($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $0 = HEAP32[$1_1 >> 2];
    HEAP8[$4_1 | 0] = $0 >>> 0 < 128 ? $0 : $3;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue;
   }
   break;
  };
  return $2_1 | 0;
 }
 
 function $1390($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 11604;
  $1_1 = HEAP32[$0 + 8 >> 2];
  if (!(!$1_1 | !HEAPU8[$0 + 12 | 0])) {
   $1769($1_1)
  }
  return $0 | 0;
 }
 
 function $1391($0) {
  $0 = $0 | 0;
  $1769($1390($0));
 }
 
 function $1392($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return (($1_1 | 0) >= 0 ? HEAP32[HEAP32[2048] + (($1_1 & 255) << 2) >> 2] : $1_1) << 24 >> 24;
 }
 
 function $1393($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $3 = $1_1;
    $0 = HEAP8[$1_1 | 0];
    if (($0 | 0) >= 0) {
     $0 = HEAP32[HEAP32[2048] + (HEAP8[$1_1 | 0] << 2) >> 2]
    }
    HEAP8[$3 | 0] = $0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  return $2_1 | 0;
 }
 
 function $1394($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return (($1_1 | 0) >= 0 ? HEAP32[HEAP32[2436] + (($1_1 & 255) << 2) >> 2] : $1_1) << 24 >> 24;
 }
 
 function $1395($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $3 = $1_1;
    $0 = HEAP8[$1_1 | 0];
    if (($0 | 0) >= 0) {
     $0 = HEAP32[HEAP32[2436] + (HEAP8[$1_1 | 0] << 2) >> 2]
    }
    HEAP8[$3 | 0] = $0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  return $2_1 | 0;
 }
 
 function $1396($0, $1_1, $2_1, $3) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    HEAP8[$3 | 0] = HEAPU8[$1_1 | 0];
    $3 = $3 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  return $2_1 | 0;
 }
 
 function $1397($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (($1_1 | 0) > -1 ? $1_1 : $2_1) | 0;
 }
 
 function $1398($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $0 = HEAP8[$1_1 | 0];
    HEAP8[$4_1 | 0] = ($0 | 0) > -1 ? $0 : $3;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue;
   }
   break;
  };
  return $2_1 | 0;
 }
 
 function $1399($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7_1 >> 2] = $5_1;
  return 3;
 }
 
 function $1400($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3;
 }
 
 function $1401($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = $4_1;
  HEAP32[$0 + 8 >> 2] = $3 - $2_1;
  $1_1 = HEAP32[$175($0 + 12 | 0, $0 + 8 | 0) >> 2];
  global$0 = $0 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1402($0) {
  $0 = $0 | 0;
  $1769($1244($0));
 }
 
 function $1403($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  $8_1 = $2_1;
  while (1) {
   label$2 : {
    if (($3 | 0) == ($8_1 | 0)) {
     $8_1 = $3;
     break label$2;
    }
    if (!HEAP32[$8_1 >> 2]) {
     break label$2
    }
    $8_1 = $8_1 + 4 | 0;
    continue;
   }
   break;
  };
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  $11_1 = 1;
  while (1) {
   label$5 : {
    label$6 : {
     if (!(($5_1 | 0) == ($6_1 | 0) | ($2_1 | 0) == ($3 | 0))) {
      $9_1 = HEAP32[$1_1 + 4 >> 2];
      HEAP32[$10_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$10_1 + 12 >> 2] = $9_1;
      label$8 : {
       label$9 : {
        $9_1 = $1404($5_1, $4_1, $8_1 - $2_1 >> 2, $6_1 - $5_1 | 0, HEAP32[$0 + 8 >> 2]);
        $12_1 = $9_1 + 1 | 0;
        label$10 : {
         if ($12_1 >>> 0 <= 1) {
          if (!($12_1 - 1)) {
           break label$6
          }
          HEAP32[$7_1 >> 2] = $5_1;
          while (1) {
           label$13 : {
            if (HEAP32[$4_1 >> 2] == ($2_1 | 0)) {
             break label$13
            }
            $1_1 = $1405($5_1, HEAP32[$2_1 >> 2], HEAP32[$0 + 8 >> 2]);
            if (($1_1 | 0) == -1) {
             break label$13
            }
            $5_1 = $1_1 + HEAP32[$7_1 >> 2] | 0;
            HEAP32[$7_1 >> 2] = $5_1;
            $2_1 = $2_1 + 4 | 0;
            continue;
           }
           break;
          };
          HEAP32[$4_1 >> 2] = $2_1;
          break label$10;
         }
         $5_1 = $9_1 + HEAP32[$7_1 >> 2] | 0;
         HEAP32[$7_1 >> 2] = $5_1;
         if (($5_1 | 0) == ($6_1 | 0)) {
          break label$8
         }
         if (($3 | 0) == ($8_1 | 0)) {
          $2_1 = HEAP32[$4_1 >> 2];
          $8_1 = $3;
          continue;
         }
         $8_1 = $1405($10_1 + 4 | 0, 0, HEAP32[$0 + 8 >> 2]);
         if (($8_1 | 0) != -1) {
          break label$9
         }
        }
        $11_1 = 2;
        break label$6;
       }
       $5_1 = $10_1 + 4 | 0;
       if ($8_1 >>> 0 > $6_1 - HEAP32[$7_1 >> 2] >>> 0) {
        break label$6
       }
       while (1) {
        if ($8_1) {
         $2_1 = HEAPU8[$5_1 | 0];
         $9_1 = HEAP32[$7_1 >> 2];
         HEAP32[$7_1 >> 2] = $9_1 + 1;
         HEAP8[$9_1 | 0] = $2_1;
         $8_1 = $8_1 + -1 | 0;
         $5_1 = $5_1 + 1 | 0;
         continue;
        }
        break;
       };
       $2_1 = HEAP32[$4_1 >> 2] + 4 | 0;
       HEAP32[$4_1 >> 2] = $2_1;
       $8_1 = $2_1;
       while (1) {
        if (($3 | 0) == ($8_1 | 0)) {
         $8_1 = $3;
         break label$5;
        }
        if (!HEAP32[$8_1 >> 2]) {
         break label$5
        }
        $8_1 = $8_1 + 4 | 0;
        continue;
       };
      }
      $2_1 = HEAP32[$4_1 >> 2];
     }
     $11_1 = ($2_1 | 0) != ($3 | 0);
    }
    global$0 = $10_1 + 16 | 0;
    return $11_1 | 0;
   }
   $5_1 = HEAP32[$7_1 >> 2];
   continue;
  };
 }
 
 function $1404($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 12 >> 2] = $4_1;
  $4_1 = $977($5_1 + 8 | 0, $5_1 + 12 | 0);
  $0 = $891($0, $1_1, $2_1, $3);
  $978($4_1);
  global$0 = $5_1 + 16 | 0;
  return $0;
 }
 
 function $1405($0, $1_1, $2_1) {
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = $2_1;
  $2_1 = $977($3 + 8 | 0, $3 + 12 | 0);
  $0 = $860($0, $1_1);
  $978($2_1);
  global$0 = $3 + 16 | 0;
  return $0;
 }
 
 function $1406($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $9_1 = global$0 - 16 | 0;
  global$0 = $9_1;
  $8_1 = $2_1;
  while (1) {
   label$2 : {
    if (($3 | 0) == ($8_1 | 0)) {
     $8_1 = $3;
     break label$2;
    }
    if (!HEAPU8[$8_1 | 0]) {
     break label$2
    }
    $8_1 = $8_1 + 1 | 0;
    continue;
   }
   break;
  };
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  while (1) {
   label$5 : {
    label$6 : {
     label$7 : {
      if (($5_1 | 0) == ($6_1 | 0) | ($2_1 | 0) == ($3 | 0)) {
       break label$7
      }
      $10_1 = HEAP32[$1_1 + 4 >> 2];
      HEAP32[$9_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$9_1 + 12 >> 2] = $10_1;
      label$8 : {
       label$9 : {
        label$10 : {
         $10_1 = $1407($5_1, $4_1, $8_1 - $2_1 | 0, $6_1 - $5_1 >> 2, $1_1, HEAP32[$0 + 8 >> 2]);
         label$11 : {
          if (($10_1 | 0) == -1) {
           while (1) {
            label$14 : {
             HEAP32[$7_1 >> 2] = $5_1;
             if (HEAP32[$4_1 >> 2] == ($2_1 | 0)) {
              break label$14
             }
             label$15 : {
              $5_1 = $1408($5_1, $2_1, $8_1 - $2_1 | 0, $9_1 + 8 | 0, HEAP32[$0 + 8 >> 2]);
              $1_1 = $5_1 + 2 | 0;
              if ($1_1 >>> 0 > 2) {
               break label$15
              }
              $5_1 = 1;
              label$16 : {
               switch ($1_1 - 1 | 0) {
               case 1:
                break label$15;
               case 0:
                break label$16;
               default:
                break label$9;
               };
              }
              HEAP32[$4_1 >> 2] = $2_1;
              break label$11;
             }
             $2_1 = $2_1 + $5_1 | 0;
             $5_1 = HEAP32[$7_1 >> 2] + 4 | 0;
             continue;
            }
            break;
           };
           HEAP32[$4_1 >> 2] = $2_1;
           break label$7;
          }
          $5_1 = HEAP32[$7_1 >> 2] + ($10_1 << 2) | 0;
          HEAP32[$7_1 >> 2] = $5_1;
          if (($5_1 | 0) == ($6_1 | 0)) {
           break label$8
          }
          $2_1 = HEAP32[$4_1 >> 2];
          if (($3 | 0) == ($8_1 | 0)) {
           $8_1 = $3;
           continue;
          }
          if (!$1408($5_1, $2_1, 1, $1_1, HEAP32[$0 + 8 >> 2])) {
           break label$10
          }
         }
         $0 = 2;
         break label$6;
        }
        HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] + 4;
        $2_1 = HEAP32[$4_1 >> 2] + 1 | 0;
        HEAP32[$4_1 >> 2] = $2_1;
        $8_1 = $2_1;
        while (1) {
         if (($3 | 0) == ($8_1 | 0)) {
          $8_1 = $3;
          break label$5;
         }
         if (!HEAPU8[$8_1 | 0]) {
          break label$5
         }
         $8_1 = $8_1 + 1 | 0;
         continue;
        };
       }
       HEAP32[$4_1 >> 2] = $2_1;
       $0 = 1;
       break label$6;
      }
      $2_1 = HEAP32[$4_1 >> 2];
     }
     $0 = ($2_1 | 0) != ($3 | 0);
    }
    global$0 = $9_1 + 16 | 0;
    return $0 | 0;
   }
   $5_1 = HEAP32[$7_1 >> 2];
   continue;
  };
 }
 
 function $1407($0, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 12 >> 2] = $5_1;
  $5_1 = $977($6_1 + 8 | 0, $6_1 + 12 | 0);
  $0 = $893($0, $1_1, $2_1, $3, $4_1);
  $978($5_1);
  global$0 = $6_1 + 16 | 0;
  return $0;
 }
 
 function $1408($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 12 >> 2] = $4_1;
  $4_1 = $977($5_1 + 8 | 0, $5_1 + 12 | 0);
  $0 = $818($0, $1_1, $2_1, $3);
  $978($4_1);
  global$0 = $5_1 + 16 | 0;
  return $0;
 }
 
 function $1409($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  $0 = $1405($5_1 + 12 | 0, 0, HEAP32[$0 + 8 >> 2]);
  $2_1 = 2;
  label$1 : {
   if ($0 + 1 >>> 0 < 2) {
    break label$1
   }
   $1_1 = $0 + -1 | 0;
   $2_1 = 1;
   if ($1_1 >>> 0 > $3 - HEAP32[$4_1 >> 2] >>> 0) {
    break label$1
   }
   $2_1 = $5_1 + 12 | 0;
   while (1) {
    if ($1_1) {
     $0 = HEAPU8[$2_1 | 0];
     $3 = HEAP32[$4_1 >> 2];
     HEAP32[$4_1 >> 2] = $3 + 1;
     HEAP8[$3 | 0] = $0;
     $1_1 = $1_1 + -1 | 0;
     $2_1 = $2_1 + 1 | 0;
     continue;
    }
    break;
   };
   $2_1 = 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1410($0) {
  $0 = $0 | 0;
  label$1 : {
   if ($1411(HEAP32[$0 + 8 >> 2])) {
    $0 = -1
   } else {
    $0 = HEAP32[$0 + 8 >> 2];
    if ($0) {
     break label$1
    }
    $0 = 1;
   }
   return $0 | 0;
  }
  return ($1412($0) | 0) == 1 | 0;
 }
 
 function $1411($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  $0 = $977($1_1 + 8 | 0, $1_1 + 12 | 0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  global$0 = $2_1 + 16 | 0;
  $2_1 = 0;
  $978($0);
  global$0 = $1_1 + 16 | 0;
  return $2_1;
 }
 
 function $1412($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  $0 = $977($1_1 + 8 | 0, $1_1 + 12 | 0);
  $2_1 = HEAP32[HEAP32[5196] >> 2] ? 4 : 1;
  $978($0);
  global$0 = $1_1 + 16 | 0;
  return $2_1;
 }
 
 function $1413($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  while (1) {
   label$2 : {
    if (($2_1 | 0) == ($3 | 0) | $6_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    $5_1 = $1414($2_1, $3 - $2_1 | 0, $1_1, HEAP32[$0 + 8 >> 2]);
    $7_1 = $5_1 + 2 | 0;
    if ($7_1 >>> 0 <= 2) {
     $5_1 = 1;
     if ($7_1 - 2) {
      break label$2
     }
    }
    $6_1 = $6_1 + 1 | 0;
    $8_1 = $8_1 + $5_1 | 0;
    $2_1 = $2_1 + $5_1 | 0;
    continue;
   }
   break;
  };
  return $8_1 | 0;
 }
 
 function $1414($0, $1_1, $2_1, $3) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $3;
  $3 = $977($4_1 + 8 | 0, $4_1 + 12 | 0);
  $0 = $818(0, $0, $1_1, $2_1 ? $2_1 : 24092);
  $978($3);
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $1415($0) {
  $0 = $0 | 0;
  $0 = HEAP32[$0 + 8 >> 2];
  if (!$0) {
   return 1
  }
  return $1412($0) | 0;
 }
 
 function $1416($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $5_1;
  $1_1 = $1417($2_1, $3, $0 + 12 | 0, $5_1, $6_1, $0 + 8 | 0);
  HEAP32[$4_1 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7_1 >> 2] = HEAP32[$0 + 8 >> 2];
  global$0 = $0 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1417($0, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0;
  HEAP32[$2_1 >> 2] = $0;
  HEAP32[$5_1 >> 2] = $3;
  $6_1 = HEAP32[$2_1 >> 2];
  label$1 : {
   label$3 : {
    while (1) {
     if ($6_1 >>> 0 >= $1_1 >>> 0) {
      $0 = 0;
      break label$1;
     }
     $0 = 2;
     $3 = HEAPU16[$6_1 >> 1];
     if ($3 >>> 0 > 1114111) {
      break label$1
     }
     label$6 : {
      label$7 : {
       if ($3 >>> 0 <= 127) {
        $0 = 1;
        $6_1 = HEAP32[$5_1 >> 2];
        if (($4_1 - $6_1 | 0) < 1) {
         break label$1
        }
        HEAP32[$5_1 >> 2] = $6_1 + 1;
        HEAP8[$6_1 | 0] = $3;
        break label$7;
       }
       if ($3 >>> 0 <= 2047) {
        $0 = HEAP32[$5_1 >> 2];
        if (($4_1 - $0 | 0) < 2) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $3 >>> 6 | 192;
        $0 = HEAP32[$5_1 >> 2];
        HEAP32[$5_1 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $3 & 63 | 128;
        break label$7;
       }
       if ($3 >>> 0 <= 55295) {
        $0 = HEAP32[$5_1 >> 2];
        if (($4_1 - $0 | 0) < 3) {
         break label$3
        }
        HEAP32[$5_1 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $3 >>> 12 | 224;
        $0 = HEAP32[$5_1 >> 2];
        HEAP32[$5_1 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $3 >>> 6 & 63 | 128;
        $0 = HEAP32[$5_1 >> 2];
        HEAP32[$5_1 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $3 & 63 | 128;
        break label$7;
       }
       if ($3 >>> 0 <= 56319) {
        $0 = 1;
        if (($1_1 - $6_1 | 0) < 4) {
         break label$1
        }
        $7_1 = HEAPU16[$6_1 + 2 >> 1];
        if (($7_1 & 64512) != 56320) {
         break label$6
        }
        if (($4_1 - HEAP32[$5_1 >> 2] | 0) < 4) {
         break label$1
        }
        $0 = $3 & 960;
        if (($7_1 & 1023 | ($3 << 10 & 64512 | $0 << 10)) + 65536 >>> 0 > 1114111) {
         break label$6
        }
        HEAP32[$2_1 >> 2] = $6_1 + 2;
        $6_1 = HEAP32[$5_1 >> 2];
        HEAP32[$5_1 >> 2] = $6_1 + 1;
        $0 = ($0 >>> 6 | 0) + 1 | 0;
        HEAP8[$6_1 | 0] = $0 >>> 2 | 240;
        $6_1 = HEAP32[$5_1 >> 2];
        HEAP32[$5_1 >> 2] = $6_1 + 1;
        HEAP8[$6_1 | 0] = $0 << 4 & 48 | $3 >>> 2 & 15 | 128;
        $0 = HEAP32[$5_1 >> 2];
        HEAP32[$5_1 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $7_1 >>> 6 & 15 | $3 << 4 & 48 | 128;
        $0 = HEAP32[$5_1 >> 2];
        HEAP32[$5_1 >> 2] = $0 + 1;
        HEAP8[$0 | 0] = $7_1 & 63 | 128;
        break label$7;
       }
       if ($3 >>> 0 < 57344) {
        break label$1
       }
       $0 = HEAP32[$5_1 >> 2];
       if (($4_1 - $0 | 0) < 3) {
        break label$3
       }
       HEAP32[$5_1 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $3 >>> 12 | 224;
       $0 = HEAP32[$5_1 >> 2];
       HEAP32[$5_1 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $3 >>> 6 & 63 | 128;
       $0 = HEAP32[$5_1 >> 2];
       HEAP32[$5_1 >> 2] = $0 + 1;
       HEAP8[$0 | 0] = $3 & 63 | 128;
      }
      $6_1 = HEAP32[$2_1 >> 2] + 2 | 0;
      HEAP32[$2_1 >> 2] = $6_1;
      continue;
     }
     break;
    };
    return 2;
   }
   return 1;
  }
  return $0;
 }
 
 function $1418($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $5_1;
  $1_1 = $1419($2_1, $3, $0 + 12 | 0, $5_1, $6_1, $0 + 8 | 0);
  HEAP32[$4_1 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7_1 >> 2] = HEAP32[$0 + 8 >> 2];
  global$0 = $0 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1419($0, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  HEAP32[$2_1 >> 2] = $0;
  HEAP32[$5_1 >> 2] = $3;
  label$2 : {
   while (1) {
    $0 = HEAP32[$2_1 >> 2];
    if ($0 >>> 0 >= $1_1 >>> 0) {
     $9_1 = 0;
     break label$2;
    }
    $9_1 = 1;
    $7_1 = HEAP32[$5_1 >> 2];
    if ($7_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$5 : {
     $3 = HEAPU8[$0 | 0];
     if ($3 >>> 0 > 1114111) {
      break label$5
     }
     $11_1 = $2_1;
     label$6 : {
      if ($3 << 24 >> 24 >= 0) {
       HEAP16[$7_1 >> 1] = $3;
       $0 = $0 + 1 | 0;
       break label$6;
      }
      if ($3 >>> 0 < 194) {
       break label$5
      }
      if ($3 >>> 0 <= 223) {
       if (($1_1 - $0 | 0) < 2) {
        break label$2
       }
       $6_1 = HEAPU8[$0 + 1 | 0];
       if (($6_1 & 192) != 128) {
        break label$5
       }
       $9_1 = 2;
       $3 = $6_1 & 63 | $3 << 6 & 1984;
       if ($3 >>> 0 > 1114111) {
        break label$2
       }
       HEAP16[$7_1 >> 1] = $3;
       $0 = $0 + 2 | 0;
       break label$6;
      }
      if ($3 >>> 0 <= 239) {
       if (($1_1 - $0 | 0) < 3) {
        break label$2
       }
       $8_1 = HEAPU8[$0 + 2 | 0];
       $6_1 = HEAPU8[$0 + 1 | 0];
       label$10 : {
        label$11 : {
         if (($3 | 0) != 237) {
          if (($3 | 0) != 224) {
           break label$11
          }
          if (($6_1 & 224) != 160) {
           break label$5
          }
          break label$10;
         }
         if (($6_1 & 224) != 128) {
          break label$5
         }
         break label$10;
        }
        if (($6_1 & 192) != 128) {
         break label$5
        }
       }
       if (($8_1 & 192) != 128) {
        break label$5
       }
       $9_1 = 2;
       $3 = $8_1 & 63 | (($6_1 & 63) << 6 | $3 << 12);
       if (($3 & 65535) >>> 0 > 1114111) {
        break label$2
       }
       HEAP16[$7_1 >> 1] = $3;
       $0 = $0 + 3 | 0;
       break label$6;
      }
      if ($3 >>> 0 > 244) {
       break label$5
      }
      if (($1_1 - $0 | 0) < 4) {
       break label$2
      }
      $8_1 = HEAPU8[$0 + 3 | 0];
      $6_1 = HEAPU8[$0 + 2 | 0];
      $0 = HEAPU8[$0 + 1 | 0];
      label$13 : {
       label$14 : {
        $10_1 = $3 + -240 | 0;
        if ($10_1 >>> 0 > 4) {
         break label$14
        }
        label$15 : {
         switch ($10_1 - 1 | 0) {
         default:
          if (($0 + 112 & 255) >>> 0 >= 48) {
           break label$5
          }
          break label$13;
         case 0:
         case 1:
         case 2:
          break label$14;
         case 3:
          break label$15;
         };
        }
        if (($0 & 240) != 128) {
         break label$5
        }
        break label$13;
       }
       if (($0 & 192) != 128) {
        break label$5
       }
      }
      if (($6_1 & 192) != 128 | ($8_1 & 192) != 128) {
       break label$5
      }
      if (($4_1 - $7_1 | 0) < 4) {
       break label$2
      }
      $9_1 = 2;
      $8_1 = $8_1 & 63;
      $10_1 = $6_1 << 6;
      $3 = $3 & 7;
      if (($8_1 | ($10_1 & 4032 | ($0 << 12 & 258048 | $3 << 18))) >>> 0 > 1114111) {
       break label$2
      }
      $0 = $0 << 2;
      HEAP16[$7_1 >> 1] = ($0 & 192 | $3 << 8 | ($6_1 >>> 4 & 3 | $0 & 60)) + 16320 | 55296;
      HEAP32[$5_1 >> 2] = $7_1 + 2;
      HEAP16[$7_1 + 2 >> 1] = $8_1 | $10_1 & 960 | 56320;
      $0 = HEAP32[$2_1 >> 2] + 4 | 0;
     }
     HEAP32[$11_1 >> 2] = $0;
     HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + 2;
     continue;
    }
    break;
   };
   return 2;
  }
  return $9_1;
 }
 
 function $1420($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  return $1421($2_1, $3, $4_1) | 0;
 }
 
 function $1421($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $4_1 = $0;
  while (1) {
   label$3 : {
    if ($6_1 >>> 0 >= $2_1 >>> 0 | $4_1 >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    $5_1 = HEAPU8[$4_1 | 0];
    if ($5_1 >>> 0 > 1114111) {
     break label$3
    }
    $3 = $4_1 + 1 | 0;
    label$4 : {
     if ($5_1 << 24 >> 24 >= 0) {
      break label$4
     }
     if ($5_1 >>> 0 < 194) {
      break label$3
     }
     if ($5_1 >>> 0 <= 223) {
      if (($1_1 - $4_1 | 0) < 2) {
       break label$3
      }
      $3 = HEAPU8[$4_1 + 1 | 0];
      if (($3 & 192) != 128 | ($3 & 63 | $5_1 << 6 & 1984) >>> 0 > 1114111) {
       break label$3
      }
      $3 = $4_1 + 2 | 0;
      break label$4;
     }
     label$6 : {
      label$7 : {
       if ($5_1 >>> 0 <= 239) {
        if (($1_1 - $4_1 | 0) < 3) {
         break label$3
        }
        $7_1 = HEAPU8[$4_1 + 2 | 0];
        $3 = HEAPU8[$4_1 + 1 | 0];
        if (($5_1 | 0) == 237) {
         break label$7
        }
        if (($5_1 | 0) == 224) {
         if (($3 & 224) == 160) {
          break label$6
         }
         break label$3;
        }
        if (($3 & 192) != 128) {
         break label$3
        }
        break label$6;
       }
       if ($2_1 - $6_1 >>> 0 < 2 | $5_1 >>> 0 > 244 | ($1_1 - $4_1 | 0) < 4) {
        break label$3
       }
       $7_1 = HEAPU8[$4_1 + 3 | 0];
       $8_1 = HEAPU8[$4_1 + 2 | 0];
       $3 = HEAPU8[$4_1 + 1 | 0];
       label$10 : {
        label$11 : {
         $9_1 = $5_1 + -240 | 0;
         if ($9_1 >>> 0 > 4) {
          break label$11
         }
         label$12 : {
          switch ($9_1 - 1 | 0) {
          default:
           if (($3 + 112 & 255) >>> 0 < 48) {
            break label$10
           }
           break label$3;
          case 0:
          case 1:
          case 2:
           break label$11;
          case 3:
           break label$12;
          };
         }
         if (($3 & 240) == 128) {
          break label$10
         }
         break label$3;
        }
        if (($3 & 192) != 128) {
         break label$3
        }
       }
       if (($8_1 & 192) != 128 | ($7_1 & 192) != 128 | ($7_1 & 63 | ($8_1 << 6 & 4032 | ($5_1 << 18 & 1835008 | ($3 & 63) << 12))) >>> 0 > 1114111) {
        break label$3
       }
       $6_1 = $6_1 + 1 | 0;
       $3 = $4_1 + 4 | 0;
       break label$4;
      }
      if (($3 & 224) != 128) {
       break label$3
      }
     }
     if (($7_1 & 192) != 128 | ($7_1 & 63 | ($5_1 << 12 & 61440 | ($3 & 63) << 6)) >>> 0 > 1114111) {
      break label$3
     }
     $3 = $4_1 + 3 | 0;
    }
    $4_1 = $3;
    $6_1 = $6_1 + 1 | 0;
    continue;
   }
   break;
  };
  return $4_1 - $0 | 0;
 }
 
 function $1422($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $5_1;
  $1_1 = $1423($2_1, $3, $0 + 12 | 0, $5_1, $6_1, $0 + 8 | 0);
  HEAP32[$4_1 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7_1 >> 2] = HEAP32[$0 + 8 >> 2];
  global$0 = $0 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1423($0, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0;
  HEAP32[$2_1 >> 2] = $0;
  HEAP32[$5_1 >> 2] = $3;
  $3 = HEAP32[$2_1 >> 2];
  label$1 : {
   while (1) {
    if ($3 >>> 0 >= $1_1 >>> 0) {
     $6_1 = 0;
     break label$1;
    }
    $6_1 = 2;
    $0 = HEAP32[$3 >> 2];
    if ($0 >>> 0 > 1114111 | ($0 & -2048) == 55296) {
     break label$1
    }
    label$5 : {
     label$6 : {
      if ($0 >>> 0 <= 127) {
       $6_1 = 1;
       $3 = HEAP32[$5_1 >> 2];
       if (($4_1 - $3 | 0) < 1) {
        break label$1
       }
       HEAP32[$5_1 >> 2] = $3 + 1;
       HEAP8[$3 | 0] = $0;
       break label$6;
      }
      if ($0 >>> 0 <= 2047) {
       $3 = HEAP32[$5_1 >> 2];
       if (($4_1 - $3 | 0) < 2) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $3 + 1;
       HEAP8[$3 | 0] = $0 >>> 6 | 192;
       $3 = HEAP32[$5_1 >> 2];
       HEAP32[$5_1 >> 2] = $3 + 1;
       HEAP8[$3 | 0] = $0 & 63 | 128;
       break label$6;
      }
      $3 = HEAP32[$5_1 >> 2];
      $6_1 = $4_1 - $3 | 0;
      if ($0 >>> 0 <= 65535) {
       if (($6_1 | 0) < 3) {
        break label$5
       }
       HEAP32[$5_1 >> 2] = $3 + 1;
       HEAP8[$3 | 0] = $0 >>> 12 | 224;
       $3 = HEAP32[$5_1 >> 2];
       HEAP32[$5_1 >> 2] = $3 + 1;
       HEAP8[$3 | 0] = $0 >>> 6 & 63 | 128;
       $3 = HEAP32[$5_1 >> 2];
       HEAP32[$5_1 >> 2] = $3 + 1;
       HEAP8[$3 | 0] = $0 & 63 | 128;
       break label$6;
      }
      if (($6_1 | 0) < 4) {
       break label$5
      }
      HEAP32[$5_1 >> 2] = $3 + 1;
      HEAP8[$3 | 0] = $0 >>> 18 | 240;
      $3 = HEAP32[$5_1 >> 2];
      HEAP32[$5_1 >> 2] = $3 + 1;
      HEAP8[$3 | 0] = $0 >>> 12 & 63 | 128;
      $3 = HEAP32[$5_1 >> 2];
      HEAP32[$5_1 >> 2] = $3 + 1;
      HEAP8[$3 | 0] = $0 >>> 6 & 63 | 128;
      $3 = HEAP32[$5_1 >> 2];
      HEAP32[$5_1 >> 2] = $3 + 1;
      HEAP8[$3 | 0] = $0 & 63 | 128;
     }
     $3 = HEAP32[$2_1 >> 2] + 4 | 0;
     HEAP32[$2_1 >> 2] = $3;
     continue;
    }
    break;
   };
   return 1;
  }
  return $6_1;
 }
 
 function $1424($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = $2_1;
  HEAP32[$0 + 8 >> 2] = $5_1;
  $1_1 = $1425($2_1, $3, $0 + 12 | 0, $5_1, $6_1, $0 + 8 | 0);
  HEAP32[$4_1 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$7_1 >> 2] = HEAP32[$0 + 8 >> 2];
  global$0 = $0 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1425($0, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  HEAP32[$2_1 >> 2] = $0;
  HEAP32[$5_1 >> 2] = $3;
  while (1) {
   $6_1 = HEAP32[$2_1 >> 2];
   if ($6_1 >>> 0 >= $1_1 >>> 0) {
    return 0
   }
   $9_1 = 1;
   label$4 : {
    label$5 : {
     $10_1 = HEAP32[$5_1 >> 2];
     label$6 : {
      if ($10_1 >>> 0 >= $4_1 >>> 0) {
       break label$6
      }
      $0 = HEAP8[$6_1 | 0];
      $3 = $0 & 255;
      if (($0 | 0) >= 0) {
       if ($3 >>> 0 > 1114111) {
        break label$4
       }
       $0 = 1;
       break label$5;
      }
      if ($3 >>> 0 < 194) {
       break label$4
      }
      if ($3 >>> 0 <= 223) {
       if (($1_1 - $6_1 | 0) < 2) {
        break label$6
       }
       $9_1 = 2;
       $7_1 = HEAPU8[$6_1 + 1 | 0];
       if (($7_1 & 192) != 128) {
        break label$6
       }
       $0 = 2;
       $3 = $7_1 & 63 | $3 << 6 & 1984;
       if ($3 >>> 0 <= 1114111) {
        break label$5
       }
       break label$6;
      }
      label$9 : {
       if ($3 >>> 0 <= 239) {
        if (($1_1 - $6_1 | 0) < 3) {
         break label$6
        }
        $8_1 = HEAPU8[$6_1 + 2 | 0];
        $7_1 = HEAPU8[$6_1 + 1 | 0];
        label$11 : {
         label$12 : {
          if (($3 | 0) != 237) {
           if (($3 | 0) != 224) {
            break label$12
           }
           if (($7_1 & 224) == 160) {
            break label$11
           }
           break label$4;
          }
          if (($7_1 & 224) == 128) {
           break label$11
          }
          break label$4;
         }
         if (($7_1 & 192) != 128) {
          break label$4
         }
        }
        if (($8_1 & 192) == 128) {
         break label$9
        }
        break label$4;
       }
       if ($3 >>> 0 > 244) {
        break label$4
       }
       if (($1_1 - $6_1 | 0) < 4) {
        break label$6
       }
       $8_1 = HEAPU8[$6_1 + 3 | 0];
       $11_1 = HEAPU8[$6_1 + 2 | 0];
       $7_1 = HEAPU8[$6_1 + 1 | 0];
       label$14 : {
        label$15 : {
         $0 = $3 + -240 | 0;
         if ($0 >>> 0 > 4) {
          break label$15
         }
         label$16 : {
          switch ($0 - 1 | 0) {
          default:
           if (($7_1 + 112 & 255) >>> 0 >= 48) {
            break label$4
           }
           break label$14;
          case 0:
          case 1:
          case 2:
           break label$15;
          case 3:
           break label$16;
          };
         }
         if (($7_1 & 240) != 128) {
          break label$4
         }
         break label$14;
        }
        if (($7_1 & 192) != 128) {
         break label$4
        }
       }
       if (($11_1 & 192) != 128 | ($8_1 & 192) != 128) {
        break label$4
       }
       $0 = 4;
       $9_1 = 2;
       $3 = $8_1 & 63 | ($11_1 << 6 & 4032 | ($3 << 18 & 1835008 | ($7_1 & 63) << 12));
       if ($3 >>> 0 > 1114111) {
        break label$6
       }
       break label$5;
      }
      $0 = 3;
      $9_1 = 2;
      $3 = $8_1 & 63 | ($3 << 12 & 61440 | ($7_1 & 63) << 6);
      if ($3 >>> 0 <= 1114111) {
       break label$5
      }
     }
     return $9_1;
    }
    HEAP32[$10_1 >> 2] = $3;
    HEAP32[$2_1 >> 2] = $0 + $6_1;
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + 4;
    continue;
   }
   break;
  };
  return 2;
 }
 
 function $1426($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  return $1427($2_1, $3, $4_1) | 0;
 }
 
 function $1427($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $3 = $0;
  while (1) {
   label$3 : {
    if ($7_1 >>> 0 >= $2_1 >>> 0 | $3 >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    $4_1 = HEAP8[$3 | 0];
    $5_1 = $4_1 & 255;
    label$4 : {
     if (($4_1 | 0) >= 0) {
      if ($5_1 >>> 0 > 1114111) {
       break label$3
      }
      $3 = $3 + 1 | 0;
      break label$4;
     }
     if ($5_1 >>> 0 < 194) {
      break label$3
     }
     if ($5_1 >>> 0 <= 223) {
      if (($1_1 - $3 | 0) < 2) {
       break label$3
      }
      $4_1 = HEAPU8[$3 + 1 | 0];
      if (($4_1 & 192) != 128 | ($4_1 & 63 | $5_1 << 6 & 1984) >>> 0 > 1114111) {
       break label$3
      }
      $3 = $3 + 2 | 0;
      break label$4;
     }
     label$7 : {
      label$8 : {
       if ($5_1 >>> 0 <= 239) {
        if (($1_1 - $3 | 0) < 3) {
         break label$3
        }
        $6_1 = HEAPU8[$3 + 2 | 0];
        $4_1 = HEAPU8[$3 + 1 | 0];
        if (($5_1 | 0) == 237) {
         break label$8
        }
        if (($5_1 | 0) == 224) {
         if (($4_1 & 224) == 160) {
          break label$7
         }
         break label$3;
        }
        if (($4_1 & 192) != 128) {
         break label$3
        }
        break label$7;
       }
       if (($1_1 - $3 | 0) < 4 | $5_1 >>> 0 > 244) {
        break label$3
       }
       $6_1 = HEAPU8[$3 + 3 | 0];
       $8_1 = HEAPU8[$3 + 2 | 0];
       $4_1 = HEAPU8[$3 + 1 | 0];
       label$11 : {
        label$12 : {
         $9_1 = $5_1 + -240 | 0;
         if ($9_1 >>> 0 > 4) {
          break label$12
         }
         label$13 : {
          switch ($9_1 - 1 | 0) {
          default:
           if (($4_1 + 112 & 255) >>> 0 < 48) {
            break label$11
           }
           break label$3;
          case 0:
          case 1:
          case 2:
           break label$12;
          case 3:
           break label$13;
          };
         }
         if (($4_1 & 240) == 128) {
          break label$11
         }
         break label$3;
        }
        if (($4_1 & 192) != 128) {
         break label$3
        }
       }
       if (($8_1 & 192) != 128 | ($6_1 & 192) != 128 | ($6_1 & 63 | ($8_1 << 6 & 4032 | ($5_1 << 18 & 1835008 | ($4_1 & 63) << 12))) >>> 0 > 1114111) {
        break label$3
       }
       $3 = $3 + 4 | 0;
       break label$4;
      }
      if (($4_1 & 224) != 128) {
       break label$3
      }
     }
     if (($6_1 & 192) != 128 | ($6_1 & 63 | ($5_1 << 12 & 61440 | ($4_1 & 63) << 6)) >>> 0 > 1114111) {
      break label$3
     }
     $3 = $3 + 3 | 0;
    }
    $7_1 = $7_1 + 1 | 0;
    continue;
   }
   break;
  };
  return $3 - $0 | 0;
 }
 
 function $1428($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 11704;
  $1597($0 + 12 | 0);
  return $0 | 0;
 }
 
 function $1429($0) {
  $0 = $0 | 0;
  $1769($1428($0));
 }
 
 function $1430($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 11744;
  $1597($0 + 16 | 0);
  return $0 | 0;
 }
 
 function $1431($0) {
  $0 = $0 | 0;
  $1769($1430($0));
 }
 
 function $1432($0) {
  $0 = $0 | 0;
  return HEAP8[$0 + 8 | 0];
 }
 
 function $1433($0) {
  $0 = $0 | 0;
  return HEAP8[$0 + 9 | 0];
 }
 
 function $1434($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $1593($0, $1_1 + 12 | 0);
 }
 
 function $1435($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $1593($0, $1_1 + 16 | 0);
 }
 
 function $1436($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $7($0, 11776);
 }
 
 function $1437($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $1438($0, 11784);
 }
 
 function $1438($0, $1_1) {
  $25($0);
  $1613($0, $1_1, $886($1_1));
 }
 
 function $1440($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $7($0, 11804);
 }
 
 function $1441($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $1438($0, 11812);
 }
 
 function $1443($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[24360] & 1) {
    break label$1
   }
   if (!$1630(24360)) {
    break label$1
   }
   $1444();
   HEAP32[6089] = 24544;
   $1632(24360);
  }
  return HEAP32[6089];
 }
 
 function $1444() {
  var $0 = 0;
  label$1 : {
   if (HEAP8[24712] & 1) {
    break label$1
   }
   if (!$1630(24712)) {
    break label$1
   }
   $0 = 24544;
   while (1) {
    $0 = $10($0) + 12 | 0;
    if (($0 | 0) != 24712) {
     continue
    }
    break;
   };
   $1632(24712);
  }
  $350(24544, 16264);
  $350(24556, 16271);
  $350(24568, 16278);
  $350(24580, 16286);
  $350(24592, 16296);
  $350(24604, 16305);
  $350(24616, 16312);
  $350(24628, 16321);
  $350(24640, 16325);
  $350(24652, 16329);
  $350(24664, 16333);
  $350(24676, 16337);
  $350(24688, 16341);
  $350(24700, 16345);
 }
 
 function $1445($0) {
  $0 = $0 | 0;
  $0 = 24712;
  while (1) {
   $0 = $1597($0 + -12 | 0);
   if (($0 | 0) != 24544) {
    continue
   }
   break;
  };
 }
 
 function $1446($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[24368] & 1) {
    break label$1
   }
   if (!$1630(24368)) {
    break label$1
   }
   $1447();
   HEAP32[6091] = 24720;
   $1632(24368);
  }
  return HEAP32[6091];
 }
 
 function $1447() {
  var $0 = 0;
  label$1 : {
   if (HEAP8[24888] & 1) {
    break label$1
   }
   if (!$1630(24888)) {
    break label$1
   }
   $0 = 24720;
   while (1) {
    $0 = $1139($0) + 12 | 0;
    if (($0 | 0) != 24888) {
     continue
    }
    break;
   };
   $1632(24888);
  }
  $1449(24720, 16352);
  $1449(24732, 16380);
  $1449(24744, 16408);
  $1449(24756, 16440);
  $1449(24768, 16480);
  $1449(24780, 16516);
  $1449(24792, 16544);
  $1449(24804, 16580);
  $1449(24816, 16596);
  $1449(24828, 16612);
  $1449(24840, 16628);
  $1449(24852, 16644);
  $1449(24864, 16660);
  $1449(24876, 16676);
 }
 
 function $1448($0) {
  $0 = $0 | 0;
  $0 = 24888;
  while (1) {
   $0 = $1597($0 + -12 | 0);
   if (($0 | 0) != 24720) {
    continue
   }
   break;
  };
 }
 
 function $1449($0, $1_1) {
  $1615($0, $1_1, $886($1_1));
 }
 
 function $1450($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[24376] & 1) {
    break label$1
   }
   if (!$1630(24376)) {
    break label$1
   }
   $1451();
   HEAP32[6093] = 24896;
   $1632(24376);
  }
  return HEAP32[6093];
 }
 
 function $1451() {
  var $0 = 0;
  label$1 : {
   if (HEAP8[25184] & 1) {
    break label$1
   }
   if (!$1630(25184)) {
    break label$1
   }
   $0 = 24896;
   while (1) {
    $0 = $10($0) + 12 | 0;
    if (($0 | 0) != 25184) {
     continue
    }
    break;
   };
   $1632(25184);
  }
  $350(24896, 16692);
  $350(24908, 16700);
  $350(24920, 16709);
  $350(24932, 16715);
  $350(24944, 16721);
  $350(24956, 16725);
  $350(24968, 16730);
  $350(24980, 16735);
  $350(24992, 16742);
  $350(25004, 16752);
  $350(25016, 16760);
  $350(25028, 16769);
  $350(25040, 16778);
  $350(25052, 16782);
  $350(25064, 16786);
  $350(25076, 16790);
  $350(25088, 16721);
  $350(25100, 16794);
  $350(25112, 16798);
  $350(25124, 16802);
  $350(25136, 16806);
  $350(25148, 16810);
  $350(25160, 16814);
  $350(25172, 16818);
 }
 
 function $1452($0) {
  $0 = $0 | 0;
  $0 = 25184;
  while (1) {
   $0 = $1597($0 + -12 | 0);
   if (($0 | 0) != 24896) {
    continue
   }
   break;
  };
 }
 
 function $1453($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[24384] & 1) {
    break label$1
   }
   if (!$1630(24384)) {
    break label$1
   }
   $1454();
   HEAP32[6095] = 25200;
   $1632(24384);
  }
  return HEAP32[6095];
 }
 
 function $1454() {
  var $0 = 0;
  label$1 : {
   if (HEAP8[25488] & 1) {
    break label$1
   }
   if (!$1630(25488)) {
    break label$1
   }
   $0 = 25200;
   while (1) {
    $0 = $1139($0) + 12 | 0;
    if (($0 | 0) != 25488) {
     continue
    }
    break;
   };
   $1632(25488);
  }
  $1449(25200, 16824);
  $1449(25212, 16856);
  $1449(25224, 16892);
  $1449(25236, 16916);
  $1449(25248, 16940);
  $1449(25260, 16956);
  $1449(25272, 16976);
  $1449(25284, 16996);
  $1449(25296, 17024);
  $1449(25308, 17064);
  $1449(25320, 17096);
  $1449(25332, 17132);
  $1449(25344, 17168);
  $1449(25356, 17184);
  $1449(25368, 17200);
  $1449(25380, 17216);
  $1449(25392, 16940);
  $1449(25404, 17232);
  $1449(25416, 17248);
  $1449(25428, 17264);
  $1449(25440, 17280);
  $1449(25452, 17296);
  $1449(25464, 17312);
  $1449(25476, 17328);
 }
 
 function $1455($0) {
  $0 = $0 | 0;
  $0 = 25488;
  while (1) {
   $0 = $1597($0 + -12 | 0);
   if (($0 | 0) != 25200) {
    continue
   }
   break;
  };
 }
 
 function $1456($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[24392] & 1) {
    break label$1
   }
   if (!$1630(24392)) {
    break label$1
   }
   $1457();
   HEAP32[6097] = 25504;
   $1632(24392);
  }
  return HEAP32[6097];
 }
 
 function $1457() {
  var $0 = 0;
  label$1 : {
   if (HEAP8[25528] & 1) {
    break label$1
   }
   if (!$1630(25528)) {
    break label$1
   }
   $0 = 25504;
   while (1) {
    $0 = $10($0) + 12 | 0;
    if (($0 | 0) != 25528) {
     continue
    }
    break;
   };
   $1632(25528);
  }
  $350(25504, 17344);
  $350(25516, 17347);
 }
 
 function $1458($0) {
  $0 = $0 | 0;
  $0 = 25528;
  while (1) {
   $0 = $1597($0 + -12 | 0);
   if (($0 | 0) != 25504) {
    continue
   }
   break;
  };
 }
 
 function $1459($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[24400] & 1) {
    break label$1
   }
   if (!$1630(24400)) {
    break label$1
   }
   $1460();
   HEAP32[6099] = 25536;
   $1632(24400);
  }
  return HEAP32[6099];
 }
 
 function $1460() {
  var $0 = 0;
  label$1 : {
   if (HEAP8[25560] & 1) {
    break label$1
   }
   if (!$1630(25560)) {
    break label$1
   }
   $0 = 25536;
   while (1) {
    $0 = $1139($0) + 12 | 0;
    if (($0 | 0) != 25560) {
     continue
    }
    break;
   };
   $1632(25560);
  }
  $1449(25536, 17352);
  $1449(25548, 17364);
 }
 
 function $1461($0) {
  $0 = $0 | 0;
  $0 = 25560;
  while (1) {
   $0 = $1597($0 + -12 | 0);
   if (($0 | 0) != 25536) {
    continue
   }
   break;
  };
 }
 
 function $1462($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[24416] & 1) {
    break label$1
   }
   if (!$1630(24416)) {
    break label$1
   }
   $7(24404, 11836);
   $1632(24416);
  }
  return 24404;
 }
 
 function $1463($0) {
  $0 = $0 | 0;
  $1597(24404);
 }
 
 function $1464($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[24432] & 1) {
    break label$1
   }
   if (!$1630(24432)) {
    break label$1
   }
   $1438(24420, 11848);
   $1632(24432);
  }
  return 24420;
 }
 
 function $1465($0) {
  $0 = $0 | 0;
  $1597(24420);
 }
 
 function $1466($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[24448] & 1) {
    break label$1
   }
   if (!$1630(24448)) {
    break label$1
   }
   $7(24436, 11884);
   $1632(24448);
  }
  return 24436;
 }
 
 function $1467($0) {
  $0 = $0 | 0;
  $1597(24436);
 }
 
 function $1468($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[24464] & 1) {
    break label$1
   }
   if (!$1630(24464)) {
    break label$1
   }
   $1438(24452, 11896);
   $1632(24464);
  }
  return 24452;
 }
 
 function $1469($0) {
  $0 = $0 | 0;
  $1597(24452);
 }
 
 function $1470($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[24480] & 1) {
    break label$1
   }
   if (!$1630(24480)) {
    break label$1
   }
   $7(24468, 11932);
   $1632(24480);
  }
  return 24468;
 }
 
 function $1471($0) {
  $0 = $0 | 0;
  $1597(24468);
 }
 
 function $1472($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[24496] & 1) {
    break label$1
   }
   if (!$1630(24496)) {
    break label$1
   }
   $1438(24484, 11956);
   $1632(24496);
  }
  return 24484;
 }
 
 function $1473($0) {
  $0 = $0 | 0;
  $1597(24484);
 }
 
 function $1474($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[24512] & 1) {
    break label$1
   }
   if (!$1630(24512)) {
    break label$1
   }
   $7(24500, 12040);
   $1632(24512);
  }
  return 24500;
 }
 
 function $1475($0) {
  $0 = $0 | 0;
  $1597(24500);
 }
 
 function $1476($0) {
  $0 = $0 | 0;
  label$1 : {
   if (HEAP8[24528] & 1) {
    break label$1
   }
   if (!$1630(24528)) {
    break label$1
   }
   $1438(24516, 12052);
   $1632(24528);
  }
  return 24516;
 }
 
 function $1477($0) {
  $0 = $0 | 0;
  $1597(24516);
 }
 
 function $1478($0, $1_1) {
  return $1127($0, $1_1);
 }
 
 function $1479($0) {
  if ($94($0)) {
   $0 = $98($0) + -1 | 0
  } else {
   $0 = 1
  }
  return $0;
 }
 
 function $1480($0, $1_1) {
  if ($94($0)) {
   $122($0, $1_1);
   return;
  }
  $114($0, $1_1);
 }
 
 function $1485($0) {
  $0 = $0 | 0;
  $1769($1486($0));
 }
 
 function $1486($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = $0 + 8 | 0;
  if (HEAP32[$1_1 >> 2] != ($973() | 0)) {
   $885(HEAP32[$1_1 >> 2])
  }
  return $0 | 0;
 }
 
 function $1490() {
  var $0 = 0, $1_1 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  $1491(25904);
  HEAP32[$0 + 12 >> 2] = 1073741823;
  HEAP32[$0 + 8 >> 2] = 2147483647;
  $1_1 = HEAP32[$175($0 + 12 | 0, $0 + 8 | 0) >> 2];
  global$0 = $0 + 16 | 0;
  return $1_1;
 }
 
 function $1491($0) {
  return $0 + 32 | 0;
 }
 
 function $1492($0, $1_1) {
  return $1500($0, $1_1);
 }
 
 function $1494($0) {
  $1503(25904);
  $1503(25904);
 }
 
 function $1500($0, $1_1) {
  if (!(HEAPU8[$0 + 112 | 0] | $1_1 >>> 0 > 28)) {
   HEAP8[$0 + 112 | 0] = 1;
   return $0;
  }
  return $1576($1_1 << 2);
 }
 
 function $1503($0) {
  return HEAP32[$566($0) >> 2] - HEAP32[$0 >> 2] >> 2;
 }
 
 function $1505($0) {
  HEAP32[$0 >> 2] = 0;
 }
 
 function $1506($0, $1_1, $2_1) {
  __inlined_func$1508 : {
   if (($0 | 0) == ($1_1 | 0)) {
    HEAP8[$0 + 112 | 0] = 0;
    break __inlined_func$1508;
   }
   $1769($1_1);
  }
 }
 
 function $1507($0, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  while (1) {
   if (($1_1 | 0) != ($2_1 | 0)) {
    $1491($0);
    $2_1 = $2_1 + -4 | 0;
    continue;
   }
   break;
  };
  HEAP32[$0 + 4 >> 2] = $1_1;
 }
 
 function $1511($0) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $973()), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 
 function $1512($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  $2_1 = $1490();
  if ($2_1 >>> 0 >= $0 >>> 0) {
   $0 = $1503(25904);
   if ($0 >>> 0 < $2_1 >>> 1 >>> 0) {
    HEAP32[$1_1 + 8 >> 2] = $0 << 1;
    $2_1 = HEAP32[$91($1_1 + 8 | 0, $1_1 + 12 | 0) >> 2];
   }
   global$0 = $1_1 + 16 | 0;
   return $2_1;
  }
  $1629();
  abort();
 }
 
 function $1514($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $163($0 + 12 | 0, $4_1 + 12 | 0, $3);
  if ($1_1) {
   $5_1 = $1492($164($0), $1_1)
  }
  HEAP32[$0 >> 2] = $5_1;
  $2_1 = ($2_1 << 2) + $5_1 | 0;
  HEAP32[$0 + 8 >> 2] = $2_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  (wasm2js_i32$0 = $166($0), wasm2js_i32$1 = ($1_1 << 2) + $5_1 | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  global$0 = $4_1 + 16 | 0;
  return $0;
 }
 
 function $1515($0, $1_1) {
  var $2_1 = 0;
  $164($0);
  $2_1 = HEAP32[$0 + 8 >> 2];
  while (1) {
   $1505($2_1);
   $2_1 = HEAP32[$0 + 8 >> 2] + 4 | 0;
   HEAP32[$0 + 8 >> 2] = $2_1;
   $1_1 = $1_1 + -1 | 0;
   if ($1_1) {
    continue
   }
   break;
  };
 }
 
 function $1516($0) {
  var $1_1 = 0;
  $1356(25904);
  $1_1 = $0 + 4 | 0;
  $473($1491(25904), HEAP32[6476], HEAP32[6477], $1_1);
  $168(25904, $1_1);
  $168(25908, $0 + 8 | 0);
  $168($566(25904), $166($0));
  HEAP32[$0 >> 2] = HEAP32[$0 + 4 >> 2];
  $1494($454(25904));
 }
 
 function $1531($0) {
  var $1_1 = 0, $2_1 = 0, $3 = 0;
  $2_1 = HEAP32[$0 + 4 >> 2];
  $1_1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 8 >> 2];
  $1_1 = $1_1 + ($0 >> 1) | 0;
  $3 = $1_1;
  if ($0 & 1) {
   $2_1 = HEAP32[$2_1 + HEAP32[$1_1 >> 2] >> 2]
  }
  FUNCTION_TABLE[$2_1]($3);
 }
 
 function $1533($0) {
  var $1_1 = 0;
  if ($0 >>> 0 >= 2) {
   $1_1 = $0 + 4 & -4;
   $0 = $1_1 + -1 | 0;
   $0 = ($0 | 0) == 2 ? $1_1 : $0;
  } else {
   $0 = 1
  }
  return $0;
 }
 
 function $1540($0) {
  if (1073741823 < $0 >>> 0) {
   $127(17376);
   abort();
  }
  return $1576($0 << 2);
 }
 
 function $1543($0) {
  var $1_1 = 0;
  $1190($0);
  if ($94($0)) {
   $1_1 = HEAP32[$0 >> 2];
   $1479($0);
   $1769($1_1);
   $121($0, 0);
   $114($0, 0);
  }
 }
 
 function $1546() {
  i64toi32_i32$HIGH_BITS = -2147483648;
  return 0;
 }
 
 function $1547() {
  i64toi32_i32$HIGH_BITS = 2147483647;
  return -1;
 }
 
 function $1552() {
  i64toi32_i32$HIGH_BITS = -1;
  return -1;
 }
 
 function $1556($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $909($3, $1_1, $2_1, $973());
  $1_1 = HEAP32[$3 >> 2];
  $2_1 = HEAP32[$3 + 4 >> 2];
  $4_1 = HEAP32[$3 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $4_1;
  HEAP32[$0 >> 2] = $1_1;
  HEAP32[$0 + 4 >> 2] = $2_1;
  global$0 = $3 + 16 | 0;
 }
 
 function $1561($0, $1_1, $2_1) {
  return $0 >>> 0 < $2_1 >>> 0 & $1_1 >>> 0 <= $0 >>> 0;
 }
 
 function $1571($0, $1_1) {
  while (1) {
   if (HEAP32[$0 >> 2] == 1) {
    continue
   }
   break;
  };
  if (!HEAP32[$0 >> 2]) {
   HEAP32[$0 >> 2] = 1;
   FUNCTION_TABLE[172]($1_1);
   HEAP32[$0 >> 2] = -1;
  }
 }
 
 function $1576($0) {
  var $1_1 = 0, $2_1 = 0;
  $0 = $0 ? $0 : 1;
  while (1) {
   label$2 : {
    $1_1 = $1768($0);
    if ($1_1) {
     break label$2
    }
    $2_1 = HEAP32[6539];
    if (!$2_1) {
     break label$2
    }
    FUNCTION_TABLE[$2_1]();
    continue;
   }
   break;
  };
  return $1_1;
 }
 
 function $1578($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 >> 2] = $0;
  HEAP32[$1_1 + 4 >> 2] = 32768;
  $0 = $855(fimport$17(5, $1_1 | 0) | 0);
  global$0 = $1_1 + 16 | 0;
  return $0;
 }
 
 function $1580($0, $1_1, $2_1) {
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 8 >> 2] = $2_1;
  HEAP32[$3 + 4 >> 2] = $1_1;
  HEAP32[$3 >> 2] = $0;
  $0 = $855(fimport$18(3, $3 | 0) | 0);
  global$0 = $3 + 16 | 0;
  return $0;
 }
 
 function $1581($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = $1578($93($1_1));
  HEAP32[$0 >> 2] = $3;
  if (($3 | 0) <= -1) {
   $0 = HEAP32[5216];
   $1624($2_1, 17572, $1_1);
   $1628($0, $93($2_1));
   abort();
  }
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $1583($0) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 4;
  $3 = $1_1 + 12 | 0;
  while (1) {
   if ($2_1) {
    $4_1 = $1580(HEAP32[$0 >> 2], $3, $2_1);
    $5_1 = $4_1 + 1 | 0;
    if ($5_1 >>> 0 <= 1) {
     if (!($5_1 - 1)) {
      $1628(116, 17602);
      abort();
     }
     if (HEAP32[5216] == 27) {
      continue
     }
     $1628(HEAP32[5216], 17624);
     abort();
    } else {
     $3 = $3 + $4_1 | 0;
     $2_1 = $2_1 - $4_1 | 0;
     continue;
    }
   }
   break;
  };
  global$0 = $1_1 + 16 | 0;
  return HEAP32[$1_1 + 12 >> 2];
 }
 
 function $1585($0, $1_1) {
  var $2_1 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = $644($1_1);
  $3 = $1576($2_1 + 13 | 0);
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = $2_1;
  HEAP32[$3 >> 2] = $2_1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = $1778($3 + 12 | 0, $1_1, $2_1 + 1 | 0)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 
 function $1587($0, $1_1) {
  HEAP32[$0 >> 2] = 17740;
  HEAP32[$0 >> 2] = 17784;
  $1585($0 + 4 | 0, $1_1);
 }
 
 function $1588($0, $1_1, $2_1) {
  if ($2_1) {
   while (1) {
    HEAP32[$0 >> 2] = $1_1;
    $0 = $0 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   }
  }
 }
 
 function $1589($0, $1_1, $2_1) {
  var $3 = 0;
  label$1 : {
   if ($0 - $1_1 >> 2 >>> 0 < $2_1 >>> 0) {
    while (1) {
     $2_1 = $2_1 + -1 | 0;
     $3 = $2_1 << 2;
     HEAP32[$3 + $0 >> 2] = HEAP32[$1_1 + $3 >> 2];
     if ($2_1) {
      continue
     }
     break label$1;
    }
   }
   if (!$2_1) {
    break label$1
   }
   while (1) {
    HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
    $0 = $0 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   };
  }
 }
 
 function $1590($0) {
  var $1_1 = 0, $2_1 = 0, $3 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP8[$1_1 + 15 | 0] = 10;
  $2_1 = HEAP32[$0 + 16 >> 2];
  label$1 : {
   if (!$2_1) {
    if ($760($0)) {
     break label$1
    }
    $2_1 = HEAP32[$0 + 16 >> 2];
   }
   $3 = HEAP32[$0 + 20 >> 2];
   if (!(HEAP8[$0 + 75 | 0] == 10 | $3 >>> 0 >= $2_1 >>> 0)) {
    HEAP32[$0 + 20 >> 2] = $3 + 1;
    HEAP8[$3 | 0] = 10;
    break label$1;
   }
   if ((FUNCTION_TABLE[HEAP32[$0 + 36 >> 2]]($0, $1_1 + 15 | 0, 1) | 0) != 1) {
    break label$1
   }
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1591() {
  $127(17662);
  abort();
 }
 
 function $1592() {
  $1129();
  abort();
 }
 
 function $1593($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = $151($0, $2_1 + 8 | 0);
  label$1 : {
   if (!$94($1_1)) {
    HEAP32[$3 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
    $4_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$3 + 4 >> 2] = $4_1;
    break label$1;
   }
   $1595($0, HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2]);
  }
  global$0 = $2_1 + 16 | 0;
  return $0;
 }
 
 function $1595($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  if (4294967279 >= $2_1 >>> 0) {
   label$2 : {
    if ($2_1 >>> 0 <= 10) {
     $114($0, $2_1);
     $4_1 = $0;
     break label$2;
    }
    $5_1 = $116($2_1) + 1 | 0;
    $4_1 = $118($0, $5_1);
    $120($0, $4_1);
    $121($0, $5_1);
    $122($0, $2_1);
   }
   $123($4_1, $1_1, $2_1);
   HEAP8[$3 + 15 | 0] = 0;
   $124($2_1 + $4_1 | 0, $3 + 15 | 0);
   global$0 = $3 + 16 | 0;
   return;
  }
  $1591();
  abort();
 }
 
 function $1596($0, $1_1, $2_1, $3) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $2_1;
  $151($0, $3);
  $2_1 = $19($1_1);
  if ($2_1 >>> 0 < 0) {
   $1592();
   abort();
  }
  $1_1 = $93($1_1);
  HEAP32[$4_1 + 8 >> 2] = $2_1;
  $1595($0, $1_1, HEAP32[$175($4_1 + 12 | 0, $4_1 + 8 | 0) >> 2]);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1597($0) {
  var $1_1 = 0;
  if ($94($0)) {
   $1_1 = HEAP32[$0 >> 2];
   $98($0);
   $1769($1_1);
  }
  return $0;
 }
 
 function $1598($0, $1_1) {
  if (($0 | 0) != ($1_1 | 0)) {
   $1599($0, $93($1_1), $19($1_1))
  }
 }
 
 function $1599($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3 = $89($0);
  label$1 : {
   if ($3 >>> 0 >= $2_1 >>> 0) {
    $5_1 = $93($0);
    $6_1 = $5_1;
    $3 = $2_1;
    if ($2_1) {
     $1780($6_1, $1_1, $3)
    }
    HEAP8[$4_1 + 15 | 0] = 0;
    $124($2_1 + $5_1 | 0, $4_1 + 15 | 0);
    $1480($0, $2_1);
    break label$1;
   }
   $5_1 = $0;
   $0 = $19($0);
   $1601($5_1, $3, $2_1 - $3 | 0, $0, 0, $0, $2_1, $1_1);
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1601($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = -17;
  if ($9_1 + ($1_1 ^ -1) >>> 0 >= $2_1 >>> 0) {
   $10_1 = $93($0);
   $11_1 = $0;
   label$2 : {
    if (($9_1 >>> 1 | 0) + -16 >>> 0 > $1_1 >>> 0) {
     HEAP32[$8_1 + 8 >> 2] = $1_1 << 1;
     HEAP32[$8_1 + 12 >> 2] = $1_1 + $2_1;
     $2_1 = $116(HEAP32[$91($8_1 + 12 | 0, $8_1 + 8 | 0) >> 2]);
     break label$2;
    }
    $2_1 = $9_1 + -1 | 0;
   }
   $9_1 = $2_1 + 1 | 0;
   $2_1 = $118($11_1, $9_1);
   if ($4_1) {
    $123($2_1, $10_1, $4_1)
   }
   if ($6_1) {
    $123($2_1 + $4_1 | 0, $7_1, $6_1)
   }
   $3 = $3 - $5_1 | 0;
   $7_1 = $3 - $4_1 | 0;
   if ($7_1) {
    $123(($2_1 + $4_1 | 0) + $6_1 | 0, ($4_1 + $10_1 | 0) + $5_1 | 0, $7_1)
   }
   if (($1_1 | 0) != 10) {
    $1769($10_1)
   }
   $120($0, $2_1);
   $121($0, $9_1);
   $1_1 = $0;
   $0 = $3 + $6_1 | 0;
   $122($1_1, $0);
   HEAP8[$8_1 + 7 | 0] = 0;
   $124($0 + $2_1 | 0, $8_1 + 7 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $1591();
  abort();
 }
 
 function $1602($0, $1_1) {
  var $2_1 = 0;
  $2_1 = $19($0);
  if ($2_1 >>> 0 < $1_1 >>> 0) {
   $1603($0, $1_1 - $2_1 | 0);
   return;
  }
  $1604($0, $1_1);
 }
 
 function $1603($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  if ($1_1) {
   $2_1 = $89($0);
   $3 = $19($0);
   $5_1 = $3 + $1_1 | 0;
   if ($2_1 - $3 >>> 0 < $1_1 >>> 0) {
    $1605($0, $2_1, $5_1 - $2_1 | 0, $3, $3)
   }
   $2_1 = $93($0);
   $525($3 + $2_1 | 0, $1_1, 0);
   $1480($0, $5_1);
   HEAP8[$4_1 + 15 | 0] = 0;
   $124($2_1 + $5_1 | 0, $4_1 + 15 | 0);
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1604($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   if ($94($0)) {
    $3 = HEAP32[$0 >> 2];
    HEAP8[$2_1 + 15 | 0] = 0;
    $124($1_1 + $3 | 0, $2_1 + 15 | 0);
    $122($0, $1_1);
    break label$1;
   }
   HEAP8[$2_1 + 14 | 0] = 0;
   $124($0 + $1_1 | 0, $2_1 + 14 | 0);
   $114($0, $1_1);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1605($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = -17;
  if ($6_1 - $1_1 >>> 0 >= $2_1 >>> 0) {
   $7_1 = $93($0);
   $8_1 = $0;
   label$2 : {
    if (($6_1 >>> 1 | 0) + -16 >>> 0 > $1_1 >>> 0) {
     HEAP32[$5_1 + 8 >> 2] = $1_1 << 1;
     HEAP32[$5_1 + 12 >> 2] = $1_1 + $2_1;
     $2_1 = $116(HEAP32[$91($5_1 + 12 | 0, $5_1 + 8 | 0) >> 2]);
     break label$2;
    }
    $2_1 = $6_1 + -1 | 0;
   }
   $6_1 = $2_1 + 1 | 0;
   $2_1 = $118($8_1, $6_1);
   if ($4_1) {
    $123($2_1, $7_1, $4_1)
   }
   $3 = $3 - $4_1 | 0;
   if ($3) {
    $123($2_1 + $4_1 | 0, $4_1 + $7_1 | 0, $3)
   }
   if (($1_1 | 0) != 10) {
    $1769($7_1)
   }
   $120($0, $2_1);
   $121($0, $6_1);
   global$0 = $5_1 + 16 | 0;
   return;
  }
  $1591();
  abort();
 }
 
 function $1606($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $3 = $89($0);
  $4_1 = $19($0);
  label$1 : {
   if ($3 - $4_1 >>> 0 >= $2_1 >>> 0) {
    if (!$2_1) {
     break label$1
    }
    $3 = $93($0);
    $123($3 + $4_1 | 0, $1_1, $2_1);
    $1_1 = $2_1 + $4_1 | 0;
    $1480($0, $1_1);
    HEAP8[$5_1 + 15 | 0] = 0;
    $124($1_1 + $3 | 0, $5_1 + 15 | 0);
    break label$1;
   }
   $1601($0, $3, ($2_1 + $4_1 | 0) - $3 | 0, $4_1, $4_1, 0, $2_1, $1_1);
  }
  global$0 = $5_1 + 16 | 0;
  return $0;
 }
 
 function $1607($0, $1_1) {
  return $1606($0, $1_1, $644($1_1));
 }
 
 function $1608($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[$2_1 + 15 | 0] = $1_1;
  $4_1 = $94($0);
  label$4 : {
   if (!$4_1) {
    $1_1 = 10;
    $3 = HEAPU8[$0 + 11 | 0];
    break label$4;
   }
   $1_1 = $98($0) + -1 | 0;
   $3 = HEAP32[$0 + 4 >> 2];
  }
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 | 0) == ($3 | 0)) {
      $1605($0, $1_1, 1, $1_1, $1_1);
      if (!$94($0)) {
       break label$3
      }
      break label$2;
     }
     if ($4_1) {
      break label$2
     }
    }
    $1_1 = $0;
    $114($0, $3 + 1 | 0);
    break label$1;
   }
   $1_1 = HEAP32[$0 >> 2];
   $122($0, $3 + 1 | 0);
  }
  $0 = $1_1 + $3 | 0;
  $124($0, $2_1 + 15 | 0);
  HEAP8[$2_1 + 14 | 0] = 0;
  $124($0 + 1 | 0, $2_1 + 14 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1610($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 8 >> 2] = $2_1;
  HEAP32[$3 + 12 >> 2] = -1;
  $4_1 = ($2_1 | 0) == -1;
  $2_1 = $19($0);
  if (!($4_1 | $2_1 >>> 0 < 0)) {
   HEAP32[$3 >> 2] = $2_1;
   (wasm2js_i32$0 = $3, wasm2js_i32$1 = HEAP32[$175($3 + 12 | 0, $3) >> 2]), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
   $0 = $224($93($0), $1_1, HEAP32[$175($3 + 4 | 0, $3 + 8 | 0) >> 2]);
   label$2 : {
    if ($0) {
     break label$2
    }
    $0 = -1;
    $1_1 = HEAP32[$3 + 4 >> 2];
    $2_1 = HEAP32[$3 + 8 >> 2];
    if ($1_1 >>> 0 < $2_1 >>> 0) {
     break label$2
    }
    $0 = $1_1 >>> 0 > $2_1 >>> 0;
   }
   global$0 = $3 + 16 | 0;
   return $0;
  }
  $1592();
  abort();
 }
 
 function $1611($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  if (4294967279 >= $3 >>> 0) {
   label$2 : {
    if ($3 >>> 0 <= 10) {
     $114($0, $2_1);
     $3 = $0;
     break label$2;
    }
    $5_1 = $116($3) + 1 | 0;
    $3 = $118($0, $5_1);
    $120($0, $3);
    $121($0, $5_1);
    $122($0, $2_1);
   }
   $123($3, $1_1, $2_1);
   HEAP8[$4_1 + 15 | 0] = 0;
   $124($2_1 + $3 | 0, $4_1 + 15 | 0);
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $1591();
  abort();
 }
 
 function $1612($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  if (4294967279 >= $1_1 >>> 0) {
   label$2 : {
    if ($1_1 >>> 0 <= 10) {
     $114($0, $1_1);
     $4_1 = $0;
     break label$2;
    }
    $5_1 = $116($1_1) + 1 | 0;
    $4_1 = $118($0, $5_1);
    $120($0, $4_1);
    $121($0, $5_1);
    $122($0, $1_1);
   }
   $525($4_1, $1_1, $2_1);
   HEAP8[$3 + 15 | 0] = 0;
   $124($1_1 + $4_1 | 0, $3 + 15 | 0);
   global$0 = $3 + 16 | 0;
   return;
  }
  $1591();
  abort();
 }
 
 function $1613($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  if (1073741807 >= $2_1 >>> 0) {
   label$2 : {
    if ($2_1 >>> 0 <= 1) {
     $114($0, $2_1);
     $4_1 = $0;
     break label$2;
    }
    $5_1 = $1533($2_1) + 1 | 0;
    $4_1 = $1540($5_1);
    $120($0, $4_1);
    $121($0, $5_1);
    $122($0, $2_1);
   }
   $670($4_1, $1_1, $2_1);
   HEAP32[$3 + 12 >> 2] = 0;
   $436(($2_1 << 2) + $4_1 | 0, $3 + 12 | 0);
   global$0 = $3 + 16 | 0;
   return;
  }
  $1591();
  abort();
 }
 
 function $1615($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3 = $1479($0);
  label$1 : {
   if ($3 >>> 0 >= $2_1 >>> 0) {
    $5_1 = $93($0);
    $6_1 = $5_1;
    $3 = $2_1;
    if ($2_1) {
     $1589($6_1, $1_1, $3)
    }
    HEAP32[$4_1 + 12 >> 2] = 0;
    $436($5_1 + ($2_1 << 2) | 0, $4_1 + 12 | 0);
    $1480($0, $2_1);
    break label$1;
   }
   $5_1 = $0;
   $0 = $19($0);
   $1617($5_1, $3, $2_1 - $3 | 0, $0, 0, $0, $2_1, $1_1);
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1617($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  var $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = 1073741807;
  if ($9_1 + ($1_1 ^ -1) >>> 0 >= $2_1 >>> 0) {
   $10_1 = $93($0);
   label$2 : {
    if (($9_1 >>> 1 | 0) + -16 >>> 0 > $1_1 >>> 0) {
     HEAP32[$8_1 + 8 >> 2] = $1_1 << 1;
     HEAP32[$8_1 + 12 >> 2] = $1_1 + $2_1;
     $2_1 = $1533(HEAP32[$91($8_1 + 12 | 0, $8_1 + 8 | 0) >> 2]);
     break label$2;
    }
    $2_1 = $9_1 + -1 | 0;
   }
   $9_1 = $2_1 + 1 | 0;
   $2_1 = $1540($9_1);
   if ($4_1) {
    $670($2_1, $10_1, $4_1)
   }
   if ($6_1) {
    $670(($4_1 << 2) + $2_1 | 0, $7_1, $6_1)
   }
   $3 = $3 - $5_1 | 0;
   $7_1 = $3 - $4_1 | 0;
   if ($7_1) {
    $4_1 = $4_1 << 2;
    $670(($4_1 + $2_1 | 0) + ($6_1 << 2) | 0, ($4_1 + $10_1 | 0) + ($5_1 << 2) | 0, $7_1);
   }
   if (($1_1 | 0) != 1) {
    $1769($10_1)
   }
   $120($0, $2_1);
   $121($0, $9_1);
   $1_1 = $0;
   $0 = $3 + $6_1 | 0;
   $122($1_1, $0);
   HEAP32[$8_1 + 4 >> 2] = 0;
   $436($2_1 + ($0 << 2) | 0, $8_1 + 4 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $1591();
  abort();
 }
 
 function $1618($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = 1073741807;
  if ($6_1 - $1_1 >>> 0 >= $2_1 >>> 0) {
   $7_1 = $93($0);
   label$2 : {
    if (($6_1 >>> 1 | 0) + -16 >>> 0 > $1_1 >>> 0) {
     HEAP32[$5_1 + 8 >> 2] = $1_1 << 1;
     HEAP32[$5_1 + 12 >> 2] = $1_1 + $2_1;
     $2_1 = $1533(HEAP32[$91($5_1 + 12 | 0, $5_1 + 8 | 0) >> 2]);
     break label$2;
    }
    $2_1 = $6_1 + -1 | 0;
   }
   $6_1 = $2_1 + 1 | 0;
   $2_1 = $1540($6_1);
   if ($4_1) {
    $670($2_1, $7_1, $4_1)
   }
   $3 = $3 - $4_1 | 0;
   if ($3) {
    $4_1 = $4_1 << 2;
    $670($4_1 + $2_1 | 0, $4_1 + $7_1 | 0, $3);
   }
   if (($1_1 | 0) != 1) {
    $1769($7_1)
   }
   $120($0, $2_1);
   $121($0, $6_1);
   global$0 = $5_1 + 16 | 0;
   return;
  }
  $1591();
  abort();
 }
 
 function $1620($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $3 = $1479($0);
  $4_1 = $19($0);
  label$1 : {
   if ($3 - $4_1 >>> 0 >= $2_1 >>> 0) {
    if (!$2_1) {
     break label$1
    }
    $3 = $93($0);
    $670($3 + ($4_1 << 2) | 0, $1_1, $2_1);
    $1_1 = $0;
    $0 = $2_1 + $4_1 | 0;
    $1480($1_1, $0);
    HEAP32[$5_1 + 12 >> 2] = 0;
    $436($3 + ($0 << 2) | 0, $5_1 + 12 | 0);
    break label$1;
   }
   $1617($0, $3, ($2_1 + $4_1 | 0) - $3 | 0, $4_1, $4_1, 0, $2_1, $1_1);
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1621($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $4_1 = $94($0);
  label$4 : {
   if (!$4_1) {
    $1_1 = 1;
    $3 = HEAPU8[$0 + 11 | 0];
    break label$4;
   }
   $1_1 = $98($0) + -1 | 0;
   $3 = HEAP32[$0 + 4 >> 2];
  }
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 | 0) == ($3 | 0)) {
      $1618($0, $1_1, 1, $1_1, $1_1);
      if (!$94($0)) {
       break label$3
      }
      break label$2;
     }
     if ($4_1) {
      break label$2
     }
    }
    $1_1 = $0;
    $114($0, $3 + 1 | 0);
    break label$1;
   }
   $1_1 = HEAP32[$0 >> 2];
   $122($0, $3 + 1 | 0);
  }
  $0 = ($3 << 2) + $1_1 | 0;
  $436($0, $2_1 + 12 | 0);
  HEAP32[$2_1 + 8 >> 2] = 0;
  $436($0 + 4 | 0, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1623($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  if (1073741807 >= $1_1 >>> 0) {
   label$2 : {
    if ($1_1 >>> 0 <= 1) {
     $114($0, $1_1);
     $4_1 = $0;
     break label$2;
    }
    $5_1 = $1533($1_1) + 1 | 0;
    $4_1 = $1540($5_1);
    $120($0, $4_1);
    $121($0, $5_1);
    $122($0, $1_1);
   }
   $5_1 = $4_1;
   $0 = $1_1;
   if ($1_1) {
    $1588($5_1, $2_1, $0)
   }
   HEAP32[$3 + 12 >> 2] = 0;
   $436(($1_1 << 2) + $4_1 | 0, $3 + 12 | 0);
   global$0 = $3 + 16 | 0;
   return;
  }
  $1591();
  abort();
 }
 
 function $1624($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $0 = $148($0, $3 + 8 | 0);
  $5_1 = $1_1;
  $1_1 = $644($1_1);
  $4_1 = $19($2_1);
  $1611($0, $5_1, $1_1, $1_1 + $4_1 | 0);
  $1606($0, $93($2_1), $4_1);
  global$0 = $3 + 16 | 0;
 }
 
 function $1625($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = $10($2_1);
  $90($3, $89($3));
  $1627($0, $2_1, $1_1);
  $1597($2_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1627($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $3 = $19($1_1);
  while (1) {
   label$2 : {
    $4_1 = $933($1_1, 0);
    HEAP32[$5_1 >> 2] = $2_1;
    $6_1 = $1_1;
    $4_1 = $882($4_1, $3 + 1 | 0, 17675, $5_1);
    label$3 : {
     if (($4_1 | 0) >= 0) {
      if ($4_1 >>> 0 <= $3 >>> 0) {
       break label$2
      }
      $3 = $4_1;
      break label$3;
     }
     $3 = $3 << 1 | 1;
    }
    $90($6_1, $3);
    continue;
   }
   break;
  };
  $90($1_1, $4_1);
  $187($0, $1_1);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1628($0, $1_1) {
  fimport$16();
  abort();
 }
 
 function $1629() {
  $127(17679);
  abort();
 }
 
 function $1630($0) {
  return HEAPU8[$0 | 0] != 0 ^ 1;
 }
 
 function $1632($0) {
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 1;
 }
 
 function $1634($0) {
  var $1_1 = 0;
  if (HEAP32[$0 + 76 >> 2] < 0) {
   label$3 : {
    if (HEAP8[$0 + 75 | 0] == 10) {
     break label$3
    }
    $1_1 = HEAP32[$0 + 20 >> 2];
    if ($1_1 >>> 0 >= HEAPU32[$0 + 16 >> 2]) {
     break label$3
    }
    HEAP32[$0 + 20 >> 2] = $1_1 + 1;
    HEAP8[$1_1 | 0] = 10;
    return;
   }
   $1590($0);
   return;
  }
  label$4 : {
   label$5 : {
    if (HEAP8[$0 + 75 | 0] == 10) {
     break label$5
    }
    $1_1 = HEAP32[$0 + 20 >> 2];
    if ($1_1 >>> 0 >= HEAPU32[$0 + 16 >> 2]) {
     break label$5
    }
    HEAP32[$0 + 20 >> 2] = $1_1 + 1;
    HEAP8[$1_1 | 0] = 10;
    break label$4;
   }
   $1590($0);
  }
 }
 
 function $1635() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = 0;
  $0 = HEAP32[1370];
  $872($0, 17686, 0);
  $1634($0);
  fimport$16();
  abort();
 }
 
 function $1637() {
  $1635();
  abort();
 }
 
 function $1638($0) {
  $0 = $0 | 0;
  return 17716;
 }
 
 function $1639($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  HEAP32[$0 >> 2] = 17784;
  $1_1 = HEAP32[$0 + 4 >> 2] + -12 | 0;
  if (($1355($1_1 + 8 | 0) | 0) <= -1) {
   $1769($1_1)
  }
  return $0 | 0;
 }
 
 function $1642($0) {
  $0 = $0 | 0;
  $1769($1639($0));
 }
 
 function $1643($0) {
  $0 = $0 | 0;
  $1639($0);
  $1769($0);
 }
 
 function $1645($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1646($0, $1_1, 0) | 0;
 }
 
 function $1646($0, $1_1, $2_1) {
  if (!$2_1) {
   return ($0 | 0) == ($1_1 | 0)
  }
  return !$849(HEAP32[$0 + 4 >> 2], HEAP32[$1_1 + 4 >> 2]);
 }
 
 function $1647($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0;
  $3 = global$0 + -64 | 0;
  global$0 = $3;
  $4_1 = 1;
  label$1 : {
   if ($1646($0, $1_1, 0)) {
    break label$1
   }
   $4_1 = 0;
   if (!$1_1) {
    break label$1
   }
   $1_1 = $1648($1_1, 18040);
   $4_1 = 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[$3 + 20 >> 2] = -1;
   HEAP32[$3 + 16 >> 2] = $0;
   HEAP32[$3 + 12 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = $1_1;
   $1779($3 + 24 | 0, 0, 39);
   HEAP32[$3 + 56 >> 2] = 1;
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 28 >> 2]]($1_1, $3 + 8 | 0, HEAP32[$2_1 >> 2], 1);
   $4_1 = 0;
   if (HEAP32[$3 + 32 >> 2] != 1) {
    break label$1
   }
   HEAP32[$2_1 >> 2] = HEAP32[$3 + 24 >> 2];
   $4_1 = 1;
  }
  global$0 = $3 - -64 | 0;
  return $4_1 | 0;
 }
 
 function $1648($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 + -64 | 0;
  global$0 = $2_1;
  $3 = HEAP32[$0 >> 2];
  $5_1 = HEAP32[$3 + -8 >> 2];
  $3 = HEAP32[$3 + -4 >> 2];
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 16 >> 2] = 17992;
  HEAP32[$2_1 + 12 >> 2] = $0;
  HEAP32[$2_1 + 8 >> 2] = $1_1;
  $1779($2_1 + 24 | 0, 0, 39);
  $0 = $0 + $5_1 | 0;
  label$1 : {
   if ($1646($3, $1_1, 0)) {
    HEAP32[$2_1 + 56 >> 2] = 1;
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $2_1 + 8 | 0, $0, $0, 1, 0);
    $4_1 = HEAP32[$2_1 + 32 >> 2] == 1 ? $0 : 0;
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 24 >> 2]]($3, $2_1 + 8 | 0, $0, 1, 0);
   $0 = HEAP32[$2_1 + 44 >> 2];
   if ($0 >>> 0 > 1) {
    break label$1
   }
   if ($0 - 1) {
    $4_1 = HEAP32[$2_1 + 48 >> 2] == 1 ? (HEAP32[$2_1 + 36 >> 2] == 1 ? (HEAP32[$2_1 + 40 >> 2] == 1 ? HEAP32[$2_1 + 28 >> 2] : 0) : 0) : 0;
    break label$1;
   }
   if (HEAP32[$2_1 + 48 >> 2] | HEAP32[$2_1 + 36 >> 2] != 1 | HEAP32[$2_1 + 40 >> 2] != 1 ? HEAP32[$2_1 + 32 >> 2] != 1 : 0) {
    break label$1
   }
   $4_1 = HEAP32[$2_1 + 24 >> 2];
  }
  global$0 = $2_1 - -64 | 0;
  return $4_1;
 }
 
 function $1649($0, $1_1, $2_1) {
  var $3 = 0;
  $3 = HEAP32[$0 + 16 >> 2];
  if (!$3) {
   HEAP32[$0 + 36 >> 2] = 1;
   HEAP32[$0 + 24 >> 2] = $2_1;
   HEAP32[$0 + 16 >> 2] = $1_1;
   return;
  }
  label$2 : {
   if (($1_1 | 0) == ($3 | 0)) {
    if (HEAP32[$0 + 24 >> 2] != 2) {
     break label$2
    }
    HEAP32[$0 + 24 >> 2] = $2_1;
    return;
   }
   HEAP8[$0 + 54 | 0] = 1;
   HEAP32[$0 + 24 >> 2] = 2;
   HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
  }
 }
 
 function $1650($0, $1_1, $2_1, $3) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  if ($1646($0, HEAP32[$1_1 + 8 >> 2], 0)) {
   $1649($1_1, $2_1, $3)
  }
 }
 
 function $1651($0, $1_1, $2_1, $3) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  if ($1646($0, HEAP32[$1_1 + 8 >> 2], 0)) {
   $1649($1_1, $2_1, $3);
   return;
  }
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1_1, $2_1, $3);
 }
 
 function $1652($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = HEAP32[$0 + 4 >> 2];
  $0 = HEAP32[$0 >> 2];
  $6_1 = $0;
  $7_1 = $1_1;
  $4_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $1_1 = $5_1 >> 8;
   $4_1 = $1_1;
   if (!($5_1 & 1)) {
    break label$1
   }
   $4_1 = HEAP32[$1_1 + HEAP32[$2_1 >> 2] >> 2];
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($6_1, $7_1, $4_1 + $2_1 | 0, $5_1 & 2 ? $3 : 2);
 }
 
 function $1653($0, $1_1, $2_1, $3) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0;
  if ($1646($0, HEAP32[$1_1 + 8 >> 2], 0)) {
   $1649($1_1, $2_1, $3);
   return;
  }
  $4_1 = HEAP32[$0 + 12 >> 2];
  $5_1 = $0 + 16 | 0;
  $1652($5_1, $1_1, $2_1, $3);
  label$2 : {
   if (($4_1 | 0) < 2) {
    break label$2
   }
   $4_1 = ($4_1 << 3) + $5_1 | 0;
   $0 = $0 + 24 | 0;
   while (1) {
    $1652($0, $1_1, $2_1, $3);
    if (HEAPU8[$1_1 + 54 | 0]) {
     break label$2
    }
    $0 = $0 + 8 | 0;
    if ($0 >>> 0 < $4_1 >>> 0) {
     continue
    }
    break;
   };
  }
 }
 
 function $1654($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = $0;
  $3 = $1_1;
  label$1 : {
   if (HEAPU8[$0 + 8 | 0] & 24) {
    $0 = 1
   } else {
    $0 = 0;
    if (!$1_1) {
     break label$1
    }
    $1_1 = $1648($1_1, 18088);
    if (!$1_1) {
     break label$1
    }
    $0 = (HEAPU8[$1_1 + 8 | 0] & 24) != 0;
   }
   $0 = $1646($2_1, $3, $0);
  }
  return $0;
 }
 
 function $1655($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 + -64 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($1646($1_1, 18356, 0)) {
      HEAP32[$2_1 >> 2] = 0;
      break label$3;
     }
     if ($1654($0, $1_1)) {
      $5_1 = 1;
      $0 = HEAP32[$2_1 >> 2];
      if (!$0) {
       break label$1
      }
      HEAP32[$2_1 >> 2] = HEAP32[$0 >> 2];
      break label$1;
     }
     if (!$1_1) {
      break label$2
     }
     $1_1 = $1648($1_1, 18136);
     if (!$1_1) {
      break label$1
     }
     $3 = HEAP32[$2_1 >> 2];
     if ($3) {
      HEAP32[$2_1 >> 2] = HEAP32[$3 >> 2]
     }
     $6_1 = HEAP32[$1_1 + 8 >> 2];
     $3 = HEAP32[$0 + 8 >> 2];
     if ($6_1 & ($3 ^ -1) & 7 | ($6_1 ^ -1) & $3 & 96) {
      break label$1
     }
     $5_1 = 1;
     if ($1646(HEAP32[$0 + 12 >> 2], HEAP32[$1_1 + 12 >> 2], 0)) {
      break label$1
     }
     if ($1646(HEAP32[$0 + 12 >> 2], 18344, 0)) {
      $0 = HEAP32[$1_1 + 12 >> 2];
      if (!$0) {
       break label$1
      }
      $5_1 = !$1648($0, 18188);
      break label$1;
     }
     $3 = HEAP32[$0 + 12 >> 2];
     if (!$3) {
      break label$2
     }
     $5_1 = 0;
     $3 = $1648($3, 18136);
     if ($3) {
      if (!(HEAP8[$0 + 8 | 0] & 1)) {
       break label$1
      }
      $5_1 = $1656($3, HEAP32[$1_1 + 12 >> 2]);
      break label$1;
     }
     $3 = HEAP32[$0 + 12 >> 2];
     if (!$3) {
      break label$1
     }
     $3 = $1648($3, 18248);
     if ($3) {
      if (!(HEAP8[$0 + 8 | 0] & 1)) {
       break label$1
      }
      $5_1 = $1657($3, HEAP32[$1_1 + 12 >> 2]);
      break label$1;
     }
     $0 = HEAP32[$0 + 12 >> 2];
     if (!$0) {
      break label$1
     }
     $3 = $1648($0, 18040);
     if (!$3) {
      break label$1
     }
     $0 = HEAP32[$1_1 + 12 >> 2];
     if (!$0) {
      break label$1
     }
     $0 = $1648($0, 18040);
     if (!$0) {
      break label$1
     }
     HEAP32[$4_1 + 20 >> 2] = -1;
     HEAP32[$4_1 + 16 >> 2] = $3;
     HEAP32[$4_1 + 12 >> 2] = 0;
     HEAP32[$4_1 + 8 >> 2] = $0;
     $1779($4_1 + 24 | 0, 0, 39);
     HEAP32[$4_1 + 56 >> 2] = 1;
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $4_1 + 8 | 0, HEAP32[$2_1 >> 2], 1);
     if (HEAP32[$4_1 + 32 >> 2] != 1) {
      break label$1
     }
     if (!HEAP32[$2_1 >> 2]) {
      break label$3
     }
     HEAP32[$2_1 >> 2] = HEAP32[$4_1 + 24 >> 2];
    }
    $5_1 = 1;
    break label$1;
   }
   $5_1 = 0;
  }
  global$0 = $4_1 - -64 | 0;
  return $5_1 | 0;
 }
 
 function $1656($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  label$1 : {
   while (1) {
    if (!$1_1) {
     return 0
    }
    $1_1 = $1648($1_1, 18136);
    if (!$1_1 | HEAP32[$1_1 + 8 >> 2] & (HEAP32[$0 + 8 >> 2] ^ -1)) {
     break label$1
    }
    if ($1646(HEAP32[$0 + 12 >> 2], HEAP32[$1_1 + 12 >> 2], 0)) {
     return 1
    }
    if (!(HEAP8[$0 + 8 | 0] & 1)) {
     break label$1
    }
    $2_1 = HEAP32[$0 + 12 >> 2];
    if (!$2_1) {
     break label$1
    }
    $2_1 = $1648($2_1, 18136);
    if ($2_1) {
     $1_1 = HEAP32[$1_1 + 12 >> 2];
     $0 = $2_1;
     continue;
    }
    break;
   };
   $0 = HEAP32[$0 + 12 >> 2];
   if (!$0) {
    break label$1
   }
   $0 = $1648($0, 18248);
   if (!$0) {
    break label$1
   }
   $3 = $1657($0, HEAP32[$1_1 + 12 >> 2]);
  }
  return $3;
 }
 
 function $1657($0, $1_1) {
  var $2_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = $1648($1_1, 18248);
   if (!$1_1 | HEAP32[$1_1 + 8 >> 2] & (HEAP32[$0 + 8 >> 2] ^ -1)) {
    break label$1
   }
   if (!$1646(HEAP32[$0 + 12 >> 2], HEAP32[$1_1 + 12 >> 2], 0)) {
    break label$1
   }
   $2_1 = $1646(HEAP32[$0 + 16 >> 2], HEAP32[$1_1 + 16 >> 2], 0);
  }
  return $2_1;
 }
 
 function $1658($0, $1_1, $2_1, $3) {
  HEAP8[$0 + 53 | 0] = 1;
  label$1 : {
   if (HEAP32[$0 + 4 >> 2] != ($2_1 | 0)) {
    break label$1
   }
   HEAP8[$0 + 52 | 0] = 1;
   $2_1 = HEAP32[$0 + 16 >> 2];
   if (!$2_1) {
    HEAP32[$0 + 36 >> 2] = 1;
    HEAP32[$0 + 24 >> 2] = $3;
    HEAP32[$0 + 16 >> 2] = $1_1;
    if (($3 | 0) != 1 | HEAP32[$0 + 48 >> 2] != 1) {
     break label$1
    }
    HEAP8[$0 + 54 | 0] = 1;
    return;
   }
   if (($1_1 | 0) == ($2_1 | 0)) {
    $2_1 = HEAP32[$0 + 24 >> 2];
    if (($2_1 | 0) == 2) {
     HEAP32[$0 + 24 >> 2] = $3;
     $2_1 = $3;
    }
    if (HEAP32[$0 + 48 >> 2] != 1 | ($2_1 | 0) != 1) {
     break label$1
    }
    HEAP8[$0 + 54 | 0] = 1;
    return;
   }
   HEAP8[$0 + 54 | 0] = 1;
   HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
  }
 }
 
 function $1659($0, $1_1, $2_1) {
  if (!(HEAP32[$0 + 28 >> 2] == 1 | HEAP32[$0 + 4 >> 2] != ($1_1 | 0))) {
   HEAP32[$0 + 28 >> 2] = $2_1
  }
 }
 
 function $1660($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  if ($1646($0, HEAP32[$1_1 + 8 >> 2], $4_1)) {
   $1659($1_1, $2_1, $3);
   return;
  }
  label$2 : {
   if ($1646($0, HEAP32[$1_1 >> 2], $4_1)) {
    if (!(HEAP32[$1_1 + 20 >> 2] != ($2_1 | 0) ? HEAP32[$1_1 + 16 >> 2] != ($2_1 | 0) : 0)) {
     if (($3 | 0) != 1) {
      break label$2
     }
     HEAP32[$1_1 + 32 >> 2] = 1;
     return;
    }
    HEAP32[$1_1 + 32 >> 2] = $3;
    if (HEAP32[$1_1 + 44 >> 2] != 4) {
     $5_1 = $0 + 16 | 0;
     $8_1 = $5_1 + (HEAP32[$0 + 12 >> 2] << 3) | 0;
     $9_1 = $1_1;
     label$7 : {
      label$8 : {
       while (1) {
        label$10 : {
         if ($5_1 >>> 0 >= $8_1 >>> 0) {
          break label$10
         }
         HEAP16[$1_1 + 52 >> 1] = 0;
         $1661($5_1, $1_1, $2_1, $2_1, 1, $4_1);
         if (HEAPU8[$1_1 + 54 | 0]) {
          break label$10
         }
         label$11 : {
          if (!HEAPU8[$1_1 + 53 | 0]) {
           break label$11
          }
          if (HEAPU8[$1_1 + 52 | 0]) {
           $3 = 1;
           if (HEAP32[$1_1 + 24 >> 2] == 1) {
            break label$8
           }
           $7_1 = 1;
           $6_1 = 1;
           if (HEAPU8[$0 + 8 | 0] & 2) {
            break label$11
           }
           break label$8;
          }
          $7_1 = 1;
          $3 = $6_1;
          if (!(HEAP8[$0 + 8 | 0] & 1)) {
           break label$8
          }
         }
         $5_1 = $5_1 + 8 | 0;
         continue;
        }
        break;
       };
       $3 = $6_1;
       $0 = 4;
       if (!$7_1) {
        break label$7
       }
      }
      $0 = 3;
     }
     HEAP32[$9_1 + 44 >> 2] = $0;
     if ($3 & 1) {
      break label$2
     }
    }
    HEAP32[$1_1 + 20 >> 2] = $2_1;
    HEAP32[$1_1 + 40 >> 2] = HEAP32[$1_1 + 40 >> 2] + 1;
    if (HEAP32[$1_1 + 36 >> 2] != 1 | HEAP32[$1_1 + 24 >> 2] != 2) {
     break label$2
    }
    HEAP8[$1_1 + 54 | 0] = 1;
    return;
   }
   $6_1 = HEAP32[$0 + 12 >> 2];
   $5_1 = $0 + 16 | 0;
   $1662($5_1, $1_1, $2_1, $3, $4_1);
   if (($6_1 | 0) < 2) {
    break label$2
   }
   $6_1 = $5_1 + ($6_1 << 3) | 0;
   $5_1 = $0 + 24 | 0;
   $0 = HEAP32[$0 + 8 >> 2];
   if (!(HEAP32[$1_1 + 36 >> 2] != 1 ? !($0 & 2) : 0)) {
    while (1) {
     if (HEAPU8[$1_1 + 54 | 0]) {
      break label$2
     }
     $1662($5_1, $1_1, $2_1, $3, $4_1);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $6_1 >>> 0) {
      continue
     }
     break;
    };
    break label$2;
   }
   if (!($0 & 1)) {
    while (1) {
     if (HEAPU8[$1_1 + 54 | 0] | HEAP32[$1_1 + 36 >> 2] == 1) {
      break label$2
     }
     $1662($5_1, $1_1, $2_1, $3, $4_1);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $6_1 >>> 0) {
      continue
     }
     break label$2;
    }
   }
   while (1) {
    if (HEAPU8[$1_1 + 54 | 0] | (HEAP32[$1_1 + 24 >> 2] == 1 ? HEAP32[$1_1 + 36 >> 2] == 1 : 0)) {
     break label$2
    }
    $1662($5_1, $1_1, $2_1, $3, $4_1);
    $5_1 = $5_1 + 8 | 0;
    if ($5_1 >>> 0 < $6_1 >>> 0) {
     continue
    }
    break;
   };
  }
 }
 
 function $1661($0, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $6_1 = HEAP32[$0 + 4 >> 2];
  $7_1 = $6_1 >> 8;
  $0 = HEAP32[$0 >> 2];
  $8_1 = $0;
  if ($6_1 & 1) {
   $7_1 = HEAP32[HEAP32[$3 >> 2] + $7_1 >> 2]
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($8_1, $1_1, $2_1, $3 + $7_1 | 0, $6_1 & 2 ? $4_1 : 2, $5_1);
 }
 
 function $1662($0, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = HEAP32[$0 + 4 >> 2];
  $6_1 = $5_1 >> 8;
  $0 = HEAP32[$0 >> 2];
  $7_1 = $0;
  if ($5_1 & 1) {
   $6_1 = HEAP32[HEAP32[$2_1 >> 2] + $6_1 >> 2]
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($7_1, $1_1, $2_1 + $6_1 | 0, $5_1 & 2 ? $3 : 2, $4_1);
 }
 
 function $1663($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  if ($1646($0, HEAP32[$1_1 + 8 >> 2], $4_1)) {
   $1659($1_1, $2_1, $3);
   return;
  }
  label$2 : {
   if ($1646($0, HEAP32[$1_1 >> 2], $4_1)) {
    if (!(HEAP32[$1_1 + 20 >> 2] != ($2_1 | 0) ? HEAP32[$1_1 + 16 >> 2] != ($2_1 | 0) : 0)) {
     if (($3 | 0) != 1) {
      break label$2
     }
     HEAP32[$1_1 + 32 >> 2] = 1;
     return;
    }
    HEAP32[$1_1 + 32 >> 2] = $3;
    label$6 : {
     if (HEAP32[$1_1 + 44 >> 2] == 4) {
      break label$6
     }
     HEAP16[$1_1 + 52 >> 1] = 0;
     $0 = HEAP32[$0 + 8 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1_1, $2_1, $2_1, 1, $4_1);
     if (HEAPU8[$1_1 + 53 | 0]) {
      HEAP32[$1_1 + 44 >> 2] = 3;
      if (!HEAPU8[$1_1 + 52 | 0]) {
       break label$6
      }
      break label$2;
     }
     HEAP32[$1_1 + 44 >> 2] = 4;
    }
    HEAP32[$1_1 + 20 >> 2] = $2_1;
    HEAP32[$1_1 + 40 >> 2] = HEAP32[$1_1 + 40 >> 2] + 1;
    if (HEAP32[$1_1 + 36 >> 2] != 1 | HEAP32[$1_1 + 24 >> 2] != 2) {
     break label$2
    }
    HEAP8[$1_1 + 54 | 0] = 1;
    return;
   }
   $0 = HEAP32[$0 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1_1, $2_1, $3, $4_1);
  }
 }
 
 function $1664($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  if ($1646($0, HEAP32[$1_1 + 8 >> 2], $4_1)) {
   $1659($1_1, $2_1, $3);
   return;
  }
  label$2 : {
   if (!$1646($0, HEAP32[$1_1 >> 2], $4_1)) {
    break label$2
   }
   if (!(HEAP32[$1_1 + 20 >> 2] != ($2_1 | 0) ? HEAP32[$1_1 + 16 >> 2] != ($2_1 | 0) : 0)) {
    if (($3 | 0) != 1) {
     break label$2
    }
    HEAP32[$1_1 + 32 >> 2] = 1;
    return;
   }
   HEAP32[$1_1 + 20 >> 2] = $2_1;
   HEAP32[$1_1 + 32 >> 2] = $3;
   HEAP32[$1_1 + 40 >> 2] = HEAP32[$1_1 + 40 >> 2] + 1;
   if (!(HEAP32[$1_1 + 36 >> 2] != 1 | HEAP32[$1_1 + 24 >> 2] != 2)) {
    HEAP8[$1_1 + 54 | 0] = 1
   }
   HEAP32[$1_1 + 44 >> 2] = 4;
  }
 }
 
 function $1665($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  if ($1646($0, HEAP32[$1_1 + 8 >> 2], $5_1)) {
   $1658($1_1, $2_1, $3, $4_1);
   return;
  }
  $7_1 = HEAPU8[$1_1 + 53 | 0];
  $6_1 = HEAP32[$0 + 12 >> 2];
  HEAP8[$1_1 + 53 | 0] = 0;
  $8_1 = HEAPU8[$1_1 + 52 | 0];
  HEAP8[$1_1 + 52 | 0] = 0;
  $9_1 = $0 + 16 | 0;
  $1661($9_1, $1_1, $2_1, $3, $4_1, $5_1);
  $10_1 = HEAPU8[$1_1 + 53 | 0];
  $7_1 = $7_1 | $10_1;
  $11_1 = HEAPU8[$1_1 + 52 | 0];
  $8_1 = $8_1 | $11_1;
  label$2 : {
   if (($6_1 | 0) < 2) {
    break label$2
   }
   $9_1 = $9_1 + ($6_1 << 3) | 0;
   $6_1 = $0 + 24 | 0;
   while (1) {
    if (HEAPU8[$1_1 + 54 | 0]) {
     break label$2
    }
    label$4 : {
     if ($11_1) {
      if (HEAP32[$1_1 + 24 >> 2] == 1) {
       break label$2
      }
      if (HEAPU8[$0 + 8 | 0] & 2) {
       break label$4
      }
      break label$2;
     }
     if (!$10_1) {
      break label$4
     }
     if (!(HEAP8[$0 + 8 | 0] & 1)) {
      break label$2
     }
    }
    HEAP16[$1_1 + 52 >> 1] = 0;
    $1661($6_1, $1_1, $2_1, $3, $4_1, $5_1);
    $10_1 = HEAPU8[$1_1 + 53 | 0];
    $7_1 = $10_1 | $7_1;
    $11_1 = HEAPU8[$1_1 + 52 | 0];
    $8_1 = $11_1 | $8_1;
    $6_1 = $6_1 + 8 | 0;
    if ($6_1 >>> 0 < $9_1 >>> 0) {
     continue
    }
    break;
   };
  }
  HEAP8[$1_1 + 53 | 0] = ($7_1 & 255) != 0;
  HEAP8[$1_1 + 52 | 0] = ($8_1 & 255) != 0;
 }
 
 function $1666($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  if ($1646($0, HEAP32[$1_1 + 8 >> 2], $5_1)) {
   $1658($1_1, $2_1, $3, $4_1);
   return;
  }
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1_1, $2_1, $3, $4_1, $5_1);
 }
 
 function $1667($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  if ($1646($0, HEAP32[$1_1 + 8 >> 2], $5_1)) {
   $1658($1_1, $2_1, $3, $4_1)
  }
 }
 
 function $1668($0) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $644($0) + 1 | 0;
  $2_1 = $1768($1_1);
  if (!$2_1) {
   return 0
  }
  return $1778($2_1, $0, $1_1);
 }
 
 function $1669($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  $0 = $1668(HEAP32[HEAP32[$1_1 + 12 >> 2] + 4 >> 2]);
  global$0 = $1_1 + 16 | 0;
  return $0 | 0;
 }
 
 function $1670() {
  fimport$19(18344, 18760);
  fimport$20(18368, 18765, 1, 1, 0);
  $1673();
  $1674();
  $1675();
  $1676();
  $1677();
  $1678();
  $1679();
  $1680();
  $1681();
  $1682();
  $1683();
  fimport$21(2132, 18871);
  fimport$21(19584, 18883);
  fimport$22(19672, 4, 18916);
  fimport$23(19716, 18929);
  $1688();
  $1689(18975);
  $1690(19012);
  $1691(19051);
  $1692(19082);
  $1693(19122);
  $1694(19151);
  $1695();
  $1696();
  $1689(19258);
  $1690(19290);
  $1691(19323);
  $1692(19356);
  $1693(19390);
  $1694(19423);
  $1697();
  $1698();
 }
 
 function $1673() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = 18770;
  fimport$24(18380, HEAP32[$0 + 12 >> 2], 1, -128, 127);
  global$0 = $0 + 16 | 0;
 }
 
 function $1674() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = 18775;
  fimport$24(18404, HEAP32[$0 + 12 >> 2], 1, -128, 127);
  global$0 = $0 + 16 | 0;
 }
 
 function $1675() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = 18787;
  fimport$24(18392, HEAP32[$0 + 12 >> 2], 1, 0, 255);
  global$0 = $0 + 16 | 0;
 }
 
 function $1676() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = 18801;
  fimport$24(18416, HEAP32[$0 + 12 >> 2], 2, -32768, 32767);
  global$0 = $0 + 16 | 0;
 }
 
 function $1677() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = 18807;
  fimport$24(18428, HEAP32[$0 + 12 >> 2], 2, 0, 65535);
  global$0 = $0 + 16 | 0;
 }
 
 function $1678() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = 18822;
  fimport$24(18440, HEAP32[$0 + 12 >> 2], 4, -2147483648, 2147483647);
  global$0 = $0 + 16 | 0;
 }
 
 function $1679() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = 18826;
  fimport$24(18452, HEAP32[$0 + 12 >> 2], 4, 0, -1);
  global$0 = $0 + 16 | 0;
 }
 
 function $1680() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = 18839;
  fimport$24(18464, HEAP32[$0 + 12 >> 2], 4, -2147483648, 2147483647);
  global$0 = $0 + 16 | 0;
 }
 
 function $1681() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = 18844;
  fimport$24(18476, HEAP32[$0 + 12 >> 2], 4, 0, -1);
  global$0 = $0 + 16 | 0;
 }
 
 function $1682() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = 18858;
  fimport$25(18488, HEAP32[$0 + 12 >> 2], 4);
  global$0 = $0 + 16 | 0;
 }
 
 function $1683() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = 18864;
  fimport$25(18500, HEAP32[$0 + 12 >> 2], 8);
  global$0 = $0 + 16 | 0;
 }
 
 function $1688() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = 18945;
  fimport$26(19756, 0, HEAP32[$0 + 12 >> 2]);
  global$0 = $0 + 16 | 0;
 }
 
 function $1689($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  fimport$26(19796, 0, HEAP32[$1_1 + 12 >> 2]);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1690($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  fimport$26(19836, 1, HEAP32[$1_1 + 12 >> 2]);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1691($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  fimport$26(19876, 2, HEAP32[$1_1 + 12 >> 2]);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1692($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  fimport$26(19916, 3, HEAP32[$1_1 + 12 >> 2]);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1693($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  fimport$26(19956, 4, HEAP32[$1_1 + 12 >> 2]);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1694($0) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  fimport$26(19996, 5, HEAP32[$1_1 + 12 >> 2]);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1695() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = 19189;
  fimport$26(20036, 4, HEAP32[$0 + 12 >> 2]);
  global$0 = $0 + 16 | 0;
 }
 
 function $1696() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = 19219;
  fimport$26(20076, 5, HEAP32[$0 + 12 >> 2]);
  global$0 = $0 + 16 | 0;
 }
 
 function $1697() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = 19457;
  fimport$26(20116, 6, HEAP32[$0 + 12 >> 2]);
  global$0 = $0 + 16 | 0;
 }
 
 function $1698() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = 19488;
  fimport$26(20156, 7, HEAP32[$0 + 12 >> 2]);
  global$0 = $0 + 16 | 0;
 }
 
 function $1741($0) {
  $0 = $0 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = $0;
  $0 = HEAP32[$1_1 + 12 >> 2];
  $1670();
  global$0 = $1_1 + 16 | 0;
  return $0 | 0;
 }
 
 function $1768($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11_1 = global$0 - 16 | 0;
  global$0 = $11_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             if ($0 >>> 0 <= 244) {
              $6_1 = HEAP32[6541];
              $5_1 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
              $0 = $5_1 >>> 3 | 0;
              $1_1 = $6_1 >>> $0 | 0;
              if ($1_1 & 3) {
               $2_1 = $0 + (($1_1 ^ -1) & 1) | 0;
               $5_1 = $2_1 << 3;
               $1_1 = HEAP32[$5_1 + 26212 >> 2];
               $0 = $1_1 + 8 | 0;
               $3 = HEAP32[$1_1 + 8 >> 2];
               $5_1 = $5_1 + 26204 | 0;
               label$14 : {
                if (($3 | 0) == ($5_1 | 0)) {
                 (wasm2js_i32$0 = 26164, wasm2js_i32$1 = __wasm_rotl_i32(-2, $2_1) & $6_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                 break label$14;
                }
                HEAP32[$3 + 12 >> 2] = $5_1;
                HEAP32[$5_1 + 8 >> 2] = $3;
               }
               $2_1 = $2_1 << 3;
               HEAP32[$1_1 + 4 >> 2] = $2_1 | 3;
               $1_1 = $1_1 + $2_1 | 0;
               HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] | 1;
               break label$1;
              }
              $7_1 = HEAP32[6543];
              if ($5_1 >>> 0 <= $7_1 >>> 0) {
               break label$11
              }
              if ($1_1) {
               $2_1 = 2 << $0;
               $0 = (0 - $2_1 | $2_1) & $1_1 << $0;
               $0 = (0 - $0 & $0) + -1 | 0;
               $1_1 = $0 >>> 12 & 16;
               $2_1 = $1_1;
               $0 = $0 >>> $1_1 | 0;
               $1_1 = $0 >>> 5 & 8;
               $2_1 = $2_1 | $1_1;
               $0 = $0 >>> $1_1 | 0;
               $1_1 = $0 >>> 2 & 4;
               $2_1 = $2_1 | $1_1;
               $0 = $0 >>> $1_1 | 0;
               $1_1 = $0 >>> 1 & 2;
               $2_1 = $2_1 | $1_1;
               $0 = $0 >>> $1_1 | 0;
               $1_1 = $0 >>> 1 & 1;
               $2_1 = ($2_1 | $1_1) + ($0 >>> $1_1 | 0) | 0;
               $3 = $2_1 << 3;
               $1_1 = HEAP32[$3 + 26212 >> 2];
               $0 = HEAP32[$1_1 + 8 >> 2];
               $3 = $3 + 26204 | 0;
               label$17 : {
                if (($0 | 0) == ($3 | 0)) {
                 $6_1 = __wasm_rotl_i32(-2, $2_1) & $6_1;
                 HEAP32[6541] = $6_1;
                 break label$17;
                }
                HEAP32[$0 + 12 >> 2] = $3;
                HEAP32[$3 + 8 >> 2] = $0;
               }
               $0 = $1_1 + 8 | 0;
               HEAP32[$1_1 + 4 >> 2] = $5_1 | 3;
               $4_1 = $1_1 + $5_1 | 0;
               $2_1 = $2_1 << 3;
               $3 = $2_1 - $5_1 | 0;
               HEAP32[$4_1 + 4 >> 2] = $3 | 1;
               HEAP32[$1_1 + $2_1 >> 2] = $3;
               if ($7_1) {
                $5_1 = $7_1 >>> 3 | 0;
                $1_1 = ($5_1 << 3) + 26204 | 0;
                $2_1 = HEAP32[6546];
                $5_1 = 1 << $5_1;
                label$20 : {
                 if (!($5_1 & $6_1)) {
                  HEAP32[6541] = $5_1 | $6_1;
                  $5_1 = $1_1;
                  break label$20;
                 }
                 $5_1 = HEAP32[$1_1 + 8 >> 2];
                }
                HEAP32[$1_1 + 8 >> 2] = $2_1;
                HEAP32[$5_1 + 12 >> 2] = $2_1;
                HEAP32[$2_1 + 12 >> 2] = $1_1;
                HEAP32[$2_1 + 8 >> 2] = $5_1;
               }
               HEAP32[6546] = $4_1;
               HEAP32[6543] = $3;
               break label$1;
              }
              $10_1 = HEAP32[6542];
              if (!$10_1) {
               break label$11
              }
              $0 = ($10_1 & 0 - $10_1) + -1 | 0;
              $1_1 = $0 >>> 12 & 16;
              $2_1 = $1_1;
              $0 = $0 >>> $1_1 | 0;
              $1_1 = $0 >>> 5 & 8;
              $2_1 = $2_1 | $1_1;
              $0 = $0 >>> $1_1 | 0;
              $1_1 = $0 >>> 2 & 4;
              $2_1 = $2_1 | $1_1;
              $0 = $0 >>> $1_1 | 0;
              $1_1 = $0 >>> 1 & 2;
              $2_1 = $2_1 | $1_1;
              $0 = $0 >>> $1_1 | 0;
              $1_1 = $0 >>> 1 & 1;
              $1_1 = HEAP32[(($2_1 | $1_1) + ($0 >>> $1_1 | 0) << 2) + 26468 >> 2];
              $3 = (HEAP32[$1_1 + 4 >> 2] & -8) - $5_1 | 0;
              $2_1 = $1_1;
              while (1) {
               label$23 : {
                $0 = HEAP32[$2_1 + 16 >> 2];
                if (!$0) {
                 $0 = HEAP32[$2_1 + 20 >> 2];
                 if (!$0) {
                  break label$23
                 }
                }
                $4_1 = (HEAP32[$0 + 4 >> 2] & -8) - $5_1 | 0;
                $2_1 = $4_1 >>> 0 < $3 >>> 0;
                $3 = $2_1 ? $4_1 : $3;
                $1_1 = $2_1 ? $0 : $1_1;
                $2_1 = $0;
                continue;
               }
               break;
              };
              $9_1 = HEAP32[$1_1 + 24 >> 2];
              $4_1 = HEAP32[$1_1 + 12 >> 2];
              if (($4_1 | 0) != ($1_1 | 0)) {
               $0 = HEAP32[$1_1 + 8 >> 2];
               HEAP32[$0 + 12 >> 2] = $4_1;
               HEAP32[$4_1 + 8 >> 2] = $0;
               break label$2;
              }
              $2_1 = $1_1 + 20 | 0;
              $0 = HEAP32[$2_1 >> 2];
              if (!$0) {
               $0 = HEAP32[$1_1 + 16 >> 2];
               if (!$0) {
                break label$10
               }
               $2_1 = $1_1 + 16 | 0;
              }
              while (1) {
               $8_1 = $2_1;
               $4_1 = $0;
               $2_1 = $0 + 20 | 0;
               $0 = HEAP32[$2_1 >> 2];
               if ($0) {
                continue
               }
               $2_1 = $4_1 + 16 | 0;
               $0 = HEAP32[$4_1 + 16 >> 2];
               if ($0) {
                continue
               }
               break;
              };
              HEAP32[$8_1 >> 2] = 0;
              break label$2;
             }
             $5_1 = -1;
             if ($0 >>> 0 > 4294967231) {
              break label$11
             }
             $0 = $0 + 11 | 0;
             $5_1 = $0 & -8;
             $8_1 = HEAP32[6542];
             if (!$8_1) {
              break label$11
             }
             $2_1 = 0 - $5_1 | 0;
             $0 = $0 >>> 8 | 0;
             $7_1 = 0;
             label$29 : {
              if (!$0) {
               break label$29
              }
              $7_1 = 31;
              if ($5_1 >>> 0 > 16777215) {
               break label$29
              }
              $3 = $0 + 1048320 >>> 16 & 8;
              $1_1 = $0 << $3;
              $0 = $1_1 + 520192 >>> 16 & 4;
              $6_1 = $1_1 << $0;
              $1_1 = $6_1 + 245760 >>> 16 & 2;
              $0 = ($6_1 << $1_1 >>> 15 | 0) - ($1_1 | ($0 | $3)) | 0;
              $7_1 = ($0 << 1 | $5_1 >>> $0 + 21 & 1) + 28 | 0;
             }
             $3 = HEAP32[($7_1 << 2) + 26468 >> 2];
             label$30 : {
              label$31 : {
               label$32 : {
                if (!$3) {
                 $0 = 0;
                 break label$32;
                }
                $1_1 = $5_1 << (($7_1 | 0) == 31 ? 0 : 25 - ($7_1 >>> 1 | 0) | 0);
                $0 = 0;
                while (1) {
                 label$35 : {
                  $6_1 = (HEAP32[$3 + 4 >> 2] & -8) - $5_1 | 0;
                  if ($6_1 >>> 0 >= $2_1 >>> 0) {
                   break label$35
                  }
                  $4_1 = $3;
                  $2_1 = $6_1;
                  if ($2_1) {
                   break label$35
                  }
                  $2_1 = 0;
                  $0 = $3;
                  break label$31;
                 }
                 $6_1 = HEAP32[$3 + 20 >> 2];
                 $3 = HEAP32[(($1_1 >>> 29 & 4) + $3 | 0) + 16 >> 2];
                 $0 = $6_1 ? (($6_1 | 0) == ($3 | 0) ? $0 : $6_1) : $0;
                 $1_1 = $1_1 << (($3 | 0) != 0);
                 if ($3) {
                  continue
                 }
                 break;
                };
               }
               if (!($0 | $4_1)) {
                $0 = 2 << $7_1;
                $0 = (0 - $0 | $0) & $8_1;
                if (!$0) {
                 break label$11
                }
                $0 = ($0 & 0 - $0) + -1 | 0;
                $1_1 = $0 >>> 12 & 16;
                $3 = $1_1;
                $0 = $0 >>> $1_1 | 0;
                $1_1 = $0 >>> 5 & 8;
                $3 = $3 | $1_1;
                $0 = $0 >>> $1_1 | 0;
                $1_1 = $0 >>> 2 & 4;
                $3 = $3 | $1_1;
                $0 = $0 >>> $1_1 | 0;
                $1_1 = $0 >>> 1 & 2;
                $3 = $3 | $1_1;
                $0 = $0 >>> $1_1 | 0;
                $1_1 = $0 >>> 1 & 1;
                $0 = HEAP32[(($3 | $1_1) + ($0 >>> $1_1 | 0) << 2) + 26468 >> 2];
               }
               if (!$0) {
                break label$30
               }
              }
              while (1) {
               $3 = (HEAP32[$0 + 4 >> 2] & -8) - $5_1 | 0;
               $1_1 = $3 >>> 0 < $2_1 >>> 0;
               $2_1 = $1_1 ? $3 : $2_1;
               $4_1 = $1_1 ? $0 : $4_1;
               $1_1 = HEAP32[$0 + 16 >> 2];
               if ($1_1) {
                $0 = $1_1
               } else {
                $0 = HEAP32[$0 + 20 >> 2]
               }
               if ($0) {
                continue
               }
               break;
              };
             }
             if (!$4_1 | $2_1 >>> 0 >= HEAP32[6543] - $5_1 >>> 0) {
              break label$11
             }
             $7_1 = HEAP32[$4_1 + 24 >> 2];
             $1_1 = HEAP32[$4_1 + 12 >> 2];
             if (($4_1 | 0) != ($1_1 | 0)) {
              $0 = HEAP32[$4_1 + 8 >> 2];
              HEAP32[$0 + 12 >> 2] = $1_1;
              HEAP32[$1_1 + 8 >> 2] = $0;
              break label$3;
             }
             $3 = $4_1 + 20 | 0;
             $0 = HEAP32[$3 >> 2];
             if (!$0) {
              $0 = HEAP32[$4_1 + 16 >> 2];
              if (!$0) {
               break label$9
              }
              $3 = $4_1 + 16 | 0;
             }
             while (1) {
              $6_1 = $3;
              $1_1 = $0;
              $3 = $0 + 20 | 0;
              $0 = HEAP32[$3 >> 2];
              if ($0) {
               continue
              }
              $3 = $1_1 + 16 | 0;
              $0 = HEAP32[$1_1 + 16 >> 2];
              if ($0) {
               continue
              }
              break;
             };
             HEAP32[$6_1 >> 2] = 0;
             break label$3;
            }
            $1_1 = HEAP32[6543];
            if ($1_1 >>> 0 >= $5_1 >>> 0) {
             $0 = HEAP32[6546];
             $2_1 = $1_1 - $5_1 | 0;
             label$45 : {
              if ($2_1 >>> 0 >= 16) {
               HEAP32[6543] = $2_1;
               $3 = $0 + $5_1 | 0;
               HEAP32[6546] = $3;
               HEAP32[$3 + 4 >> 2] = $2_1 | 1;
               HEAP32[$0 + $1_1 >> 2] = $2_1;
               HEAP32[$0 + 4 >> 2] = $5_1 | 3;
               break label$45;
              }
              HEAP32[6546] = 0;
              HEAP32[6543] = 0;
              HEAP32[$0 + 4 >> 2] = $1_1 | 3;
              $1_1 = $0 + $1_1 | 0;
              HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] | 1;
             }
             $0 = $0 + 8 | 0;
             break label$1;
            }
            $1_1 = HEAP32[6544];
            if ($1_1 >>> 0 > $5_1 >>> 0) {
             $1_1 = $1_1 - $5_1 | 0;
             HEAP32[6544] = $1_1;
             $0 = HEAP32[6547];
             $2_1 = $0 + $5_1 | 0;
             HEAP32[6547] = $2_1;
             HEAP32[$2_1 + 4 >> 2] = $1_1 | 1;
             HEAP32[$0 + 4 >> 2] = $5_1 | 3;
             $0 = $0 + 8 | 0;
             break label$1;
            }
            $0 = 0;
            $4_1 = $5_1 + 47 | 0;
            $3 = $4_1;
            if (HEAP32[6659]) {
             $2_1 = HEAP32[6661]
            } else {
             HEAP32[6662] = -1;
             HEAP32[6663] = -1;
             HEAP32[6660] = 4096;
             HEAP32[6661] = 4096;
             HEAP32[6659] = $11_1 + 12 & -16 ^ 1431655768;
             HEAP32[6664] = 0;
             HEAP32[6652] = 0;
             $2_1 = 4096;
            }
            $6_1 = $3 + $2_1 | 0;
            $8_1 = 0 - $2_1 | 0;
            $2_1 = $6_1 & $8_1;
            if ($2_1 >>> 0 <= $5_1 >>> 0) {
             break label$1
            }
            $3 = HEAP32[6651];
            if ($3) {
             $7_1 = HEAP32[6649];
             $9_1 = $7_1 + $2_1 | 0;
             if ($9_1 >>> 0 <= $7_1 >>> 0 | $9_1 >>> 0 > $3 >>> 0) {
              break label$1
             }
            }
            if (HEAPU8[26608] & 4) {
             break label$6
            }
            label$51 : {
             label$52 : {
              $3 = HEAP32[6547];
              if ($3) {
               $0 = 26612;
               while (1) {
                $7_1 = HEAP32[$0 >> 2];
                if ($7_1 + HEAP32[$0 + 4 >> 2] >>> 0 > $3 >>> 0 ? $7_1 >>> 0 <= $3 >>> 0 : 0) {
                 break label$52
                }
                $0 = HEAP32[$0 + 8 >> 2];
                if ($0) {
                 continue
                }
                break;
               };
              }
              $1_1 = $1773(0);
              if (($1_1 | 0) == -1) {
               break label$7
              }
              $6_1 = $2_1;
              $0 = HEAP32[6660];
              $3 = $0 + -1 | 0;
              if ($3 & $1_1) {
               $6_1 = ($2_1 - $1_1 | 0) + ($1_1 + $3 & 0 - $0) | 0
              }
              if ($6_1 >>> 0 <= $5_1 >>> 0 | $6_1 >>> 0 > 2147483646) {
               break label$7
              }
              $0 = HEAP32[6651];
              if ($0) {
               $3 = HEAP32[6649];
               $8_1 = $3 + $6_1 | 0;
               if ($8_1 >>> 0 <= $3 >>> 0 | $8_1 >>> 0 > $0 >>> 0) {
                break label$7
               }
              }
              $0 = $1773($6_1);
              if (($1_1 | 0) != ($0 | 0)) {
               break label$51
              }
              break label$5;
             }
             $6_1 = $8_1 & $6_1 - $1_1;
             if ($6_1 >>> 0 > 2147483646) {
              break label$7
             }
             $1_1 = $1773($6_1);
             if (($1_1 | 0) == (HEAP32[$0 >> 2] + HEAP32[$0 + 4 >> 2] | 0)) {
              break label$8
             }
             $0 = $1_1;
            }
            $1_1 = $0;
            if (!($5_1 + 48 >>> 0 <= $6_1 >>> 0 | $6_1 >>> 0 > 2147483646 | ($0 | 0) == -1)) {
             $0 = HEAP32[6661];
             $0 = $0 + ($4_1 - $6_1 | 0) & 0 - $0;
             if ($0 >>> 0 > 2147483646) {
              break label$5
             }
             if (($1773($0) | 0) != -1) {
              $6_1 = $0 + $6_1 | 0;
              break label$5;
             }
             $1773(0 - $6_1 | 0);
             break label$7;
            }
            if (($1_1 | 0) != -1) {
             break label$5
            }
            break label$7;
           }
           $4_1 = 0;
           break label$2;
          }
          $1_1 = 0;
          break label$3;
         }
         if (($1_1 | 0) != -1) {
          break label$5
         }
        }
        HEAP32[6652] = HEAP32[6652] | 4;
       }
       if ($2_1 >>> 0 > 2147483646) {
        break label$4
       }
       $1_1 = $1773($2_1);
       $0 = $1773(0);
       if ($1_1 >>> 0 >= $0 >>> 0 | ($1_1 | 0) == -1 | ($0 | 0) == -1) {
        break label$4
       }
       $6_1 = $0 - $1_1 | 0;
       if ($6_1 >>> 0 <= $5_1 + 40 >>> 0) {
        break label$4
       }
      }
      $0 = HEAP32[6649] + $6_1 | 0;
      HEAP32[6649] = $0;
      if ($0 >>> 0 > HEAPU32[6650]) {
       HEAP32[6650] = $0
      }
      label$61 : {
       label$62 : {
        label$63 : {
         $3 = HEAP32[6547];
         if ($3) {
          $0 = 26612;
          while (1) {
           $2_1 = HEAP32[$0 >> 2];
           $4_1 = HEAP32[$0 + 4 >> 2];
           if (($2_1 + $4_1 | 0) == ($1_1 | 0)) {
            break label$63
           }
           $0 = HEAP32[$0 + 8 >> 2];
           if ($0) {
            continue
           }
           break;
          };
          break label$62;
         }
         $0 = HEAP32[6545];
         if (!($1_1 >>> 0 >= $0 >>> 0 ? $0 : 0)) {
          HEAP32[6545] = $1_1
         }
         $0 = 0;
         HEAP32[6654] = $6_1;
         HEAP32[6653] = $1_1;
         HEAP32[6549] = -1;
         HEAP32[6550] = HEAP32[6659];
         HEAP32[6656] = 0;
         while (1) {
          $2_1 = $0 << 3;
          $3 = $2_1 + 26204 | 0;
          HEAP32[$2_1 + 26212 >> 2] = $3;
          HEAP32[$2_1 + 26216 >> 2] = $3;
          $0 = $0 + 1 | 0;
          if (($0 | 0) != 32) {
           continue
          }
          break;
         };
         $0 = $6_1 + -40 | 0;
         $2_1 = $1_1 + 8 & 7 ? -8 - $1_1 & 7 : 0;
         $3 = $0 - $2_1 | 0;
         HEAP32[6544] = $3;
         $2_1 = $1_1 + $2_1 | 0;
         HEAP32[6547] = $2_1;
         HEAP32[$2_1 + 4 >> 2] = $3 | 1;
         HEAP32[($0 + $1_1 | 0) + 4 >> 2] = 40;
         HEAP32[6548] = HEAP32[6663];
         break label$61;
        }
        if (HEAPU8[$0 + 12 | 0] & 8 | $1_1 >>> 0 <= $3 >>> 0 | $2_1 >>> 0 > $3 >>> 0) {
         break label$62
        }
        HEAP32[$0 + 4 >> 2] = $4_1 + $6_1;
        $0 = $3 + 8 & 7 ? -8 - $3 & 7 : 0;
        $1_1 = $0 + $3 | 0;
        HEAP32[6547] = $1_1;
        $2_1 = HEAP32[6544] + $6_1 | 0;
        $0 = $2_1 - $0 | 0;
        HEAP32[6544] = $0;
        HEAP32[$1_1 + 4 >> 2] = $0 | 1;
        HEAP32[($2_1 + $3 | 0) + 4 >> 2] = 40;
        HEAP32[6548] = HEAP32[6663];
        break label$61;
       }
       $0 = HEAP32[6545];
       if ($1_1 >>> 0 < $0 >>> 0) {
        HEAP32[6545] = $1_1;
        $0 = 0;
       }
       $2_1 = $1_1 + $6_1 | 0;
       $0 = 26612;
       label$69 : {
        label$70 : {
         label$71 : {
          label$72 : {
           label$73 : {
            label$74 : {
             while (1) {
              if (($2_1 | 0) != HEAP32[$0 >> 2]) {
               $0 = HEAP32[$0 + 8 >> 2];
               if ($0) {
                continue
               }
               break label$74;
              }
              break;
             };
             if (!(HEAPU8[$0 + 12 | 0] & 8)) {
              break label$73
             }
            }
            $0 = 26612;
            while (1) {
             $2_1 = HEAP32[$0 >> 2];
             if ($2_1 >>> 0 <= $3 >>> 0) {
              $4_1 = $2_1 + HEAP32[$0 + 4 >> 2] | 0;
              if ($4_1 >>> 0 > $3 >>> 0) {
               break label$72
              }
             }
             $0 = HEAP32[$0 + 8 >> 2];
             continue;
            };
           }
           HEAP32[$0 >> 2] = $1_1;
           HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + $6_1;
           $7_1 = ($1_1 + 8 & 7 ? -8 - $1_1 & 7 : 0) + $1_1 | 0;
           HEAP32[$7_1 + 4 >> 2] = $5_1 | 3;
           $1_1 = $2_1 + ($2_1 + 8 & 7 ? -8 - $2_1 & 7 : 0) | 0;
           $0 = ($1_1 - $7_1 | 0) - $5_1 | 0;
           $4_1 = $5_1 + $7_1 | 0;
           if (($1_1 | 0) == ($3 | 0)) {
            HEAP32[6547] = $4_1;
            $0 = HEAP32[6544] + $0 | 0;
            HEAP32[6544] = $0;
            HEAP32[$4_1 + 4 >> 2] = $0 | 1;
            break label$70;
           }
           if (HEAP32[6546] == ($1_1 | 0)) {
            HEAP32[6546] = $4_1;
            $0 = HEAP32[6543] + $0 | 0;
            HEAP32[6543] = $0;
            HEAP32[$4_1 + 4 >> 2] = $0 | 1;
            HEAP32[$0 + $4_1 >> 2] = $0;
            break label$70;
           }
           $2_1 = HEAP32[$1_1 + 4 >> 2];
           if (($2_1 & 3) == 1) {
            $9_1 = $2_1 & -8;
            label$82 : {
             if ($2_1 >>> 0 <= 255) {
              $3 = HEAP32[$1_1 + 8 >> 2];
              $5_1 = $2_1 >>> 3 | 0;
              $2_1 = HEAP32[$1_1 + 12 >> 2];
              if (($2_1 | 0) == ($3 | 0)) {
               (wasm2js_i32$0 = 26164, wasm2js_i32$1 = HEAP32[6541] & __wasm_rotl_i32(-2, $5_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
               break label$82;
              }
              HEAP32[$3 + 12 >> 2] = $2_1;
              HEAP32[$2_1 + 8 >> 2] = $3;
              break label$82;
             }
             $8_1 = HEAP32[$1_1 + 24 >> 2];
             $6_1 = HEAP32[$1_1 + 12 >> 2];
             label$85 : {
              if (($6_1 | 0) != ($1_1 | 0)) {
               $2_1 = HEAP32[$1_1 + 8 >> 2];
               HEAP32[$2_1 + 12 >> 2] = $6_1;
               HEAP32[$6_1 + 8 >> 2] = $2_1;
               break label$85;
              }
              label$88 : {
               $3 = $1_1 + 20 | 0;
               $5_1 = HEAP32[$3 >> 2];
               if ($5_1) {
                break label$88
               }
               $3 = $1_1 + 16 | 0;
               $5_1 = HEAP32[$3 >> 2];
               if ($5_1) {
                break label$88
               }
               $6_1 = 0;
               break label$85;
              }
              while (1) {
               $2_1 = $3;
               $6_1 = $5_1;
               $3 = $5_1 + 20 | 0;
               $5_1 = HEAP32[$3 >> 2];
               if ($5_1) {
                continue
               }
               $3 = $6_1 + 16 | 0;
               $5_1 = HEAP32[$6_1 + 16 >> 2];
               if ($5_1) {
                continue
               }
               break;
              };
              HEAP32[$2_1 >> 2] = 0;
             }
             if (!$8_1) {
              break label$82
             }
             $2_1 = HEAP32[$1_1 + 28 >> 2];
             $3 = ($2_1 << 2) + 26468 | 0;
             label$90 : {
              if (HEAP32[$3 >> 2] == ($1_1 | 0)) {
               HEAP32[$3 >> 2] = $6_1;
               if ($6_1) {
                break label$90
               }
               (wasm2js_i32$0 = 26168, wasm2js_i32$1 = HEAP32[6542] & __wasm_rotl_i32(-2, $2_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
               break label$82;
              }
              HEAP32[$8_1 + (HEAP32[$8_1 + 16 >> 2] == ($1_1 | 0) ? 16 : 20) >> 2] = $6_1;
              if (!$6_1) {
               break label$82
              }
             }
             HEAP32[$6_1 + 24 >> 2] = $8_1;
             $2_1 = HEAP32[$1_1 + 16 >> 2];
             if ($2_1) {
              HEAP32[$6_1 + 16 >> 2] = $2_1;
              HEAP32[$2_1 + 24 >> 2] = $6_1;
             }
             $2_1 = HEAP32[$1_1 + 20 >> 2];
             if (!$2_1) {
              break label$82
             }
             HEAP32[$6_1 + 20 >> 2] = $2_1;
             HEAP32[$2_1 + 24 >> 2] = $6_1;
            }
            $1_1 = $1_1 + $9_1 | 0;
            $0 = $0 + $9_1 | 0;
           }
           HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] & -2;
           HEAP32[$4_1 + 4 >> 2] = $0 | 1;
           HEAP32[$0 + $4_1 >> 2] = $0;
           if ($0 >>> 0 <= 255) {
            $1_1 = $0 >>> 3 | 0;
            $0 = ($1_1 << 3) + 26204 | 0;
            $2_1 = HEAP32[6541];
            $1_1 = 1 << $1_1;
            label$94 : {
             if (!($2_1 & $1_1)) {
              HEAP32[6541] = $1_1 | $2_1;
              $1_1 = $0;
              break label$94;
             }
             $1_1 = HEAP32[$0 + 8 >> 2];
            }
            HEAP32[$0 + 8 >> 2] = $4_1;
            HEAP32[$1_1 + 12 >> 2] = $4_1;
            HEAP32[$4_1 + 12 >> 2] = $0;
            HEAP32[$4_1 + 8 >> 2] = $1_1;
            break label$70;
           }
           $6_1 = $4_1;
           $1_1 = $0 >>> 8 | 0;
           $2_1 = 0;
           label$96 : {
            if (!$1_1) {
             break label$96
            }
            $2_1 = 31;
            if ($0 >>> 0 > 16777215) {
             break label$96
            }
            $3 = $1_1 + 1048320 >>> 16 & 8;
            $2_1 = $1_1 << $3;
            $1_1 = $2_1 + 520192 >>> 16 & 4;
            $5_1 = $2_1 << $1_1;
            $2_1 = $5_1 + 245760 >>> 16 & 2;
            $1_1 = ($5_1 << $2_1 >>> 15 | 0) - ($2_1 | ($1_1 | $3)) | 0;
            $2_1 = ($1_1 << 1 | $0 >>> $1_1 + 21 & 1) + 28 | 0;
           }
           $1_1 = $2_1;
           HEAP32[$6_1 + 28 >> 2] = $1_1;
           HEAP32[$4_1 + 16 >> 2] = 0;
           HEAP32[$4_1 + 20 >> 2] = 0;
           $2_1 = ($1_1 << 2) + 26468 | 0;
           $3 = HEAP32[6542];
           $5_1 = 1 << $1_1;
           label$97 : {
            if (!($3 & $5_1)) {
             HEAP32[6542] = $3 | $5_1;
             HEAP32[$2_1 >> 2] = $4_1;
             break label$97;
            }
            $3 = $0 << (($1_1 | 0) == 31 ? 0 : 25 - ($1_1 >>> 1 | 0) | 0);
            $1_1 = HEAP32[$2_1 >> 2];
            while (1) {
             $2_1 = $1_1;
             if ((HEAP32[$1_1 + 4 >> 2] & -8) == ($0 | 0)) {
              break label$71
             }
             $1_1 = $3 >>> 29 | 0;
             $3 = $3 << 1;
             $5_1 = ($2_1 + ($1_1 & 4) | 0) + 16 | 0;
             $1_1 = HEAP32[$5_1 >> 2];
             if ($1_1) {
              continue
             }
             break;
            };
            HEAP32[$5_1 >> 2] = $4_1;
           }
           HEAP32[$4_1 + 24 >> 2] = $2_1;
           HEAP32[$4_1 + 12 >> 2] = $4_1;
           HEAP32[$4_1 + 8 >> 2] = $4_1;
           break label$70;
          }
          $0 = $6_1 + -40 | 0;
          $2_1 = $1_1 + 8 & 7 ? -8 - $1_1 & 7 : 0;
          $8_1 = $0 - $2_1 | 0;
          HEAP32[6544] = $8_1;
          $2_1 = $1_1 + $2_1 | 0;
          HEAP32[6547] = $2_1;
          HEAP32[$2_1 + 4 >> 2] = $8_1 | 1;
          HEAP32[($0 + $1_1 | 0) + 4 >> 2] = 40;
          HEAP32[6548] = HEAP32[6663];
          $0 = ($4_1 + ($4_1 + -39 & 7 ? 39 - $4_1 & 7 : 0) | 0) + -47 | 0;
          $2_1 = $0 >>> 0 < $3 + 16 >>> 0 ? $3 : $0;
          HEAP32[$2_1 + 4 >> 2] = 27;
          $0 = HEAP32[6656];
          HEAP32[$2_1 + 16 >> 2] = HEAP32[6655];
          HEAP32[$2_1 + 20 >> 2] = $0;
          $0 = HEAP32[6654];
          HEAP32[$2_1 + 8 >> 2] = HEAP32[6653];
          HEAP32[$2_1 + 12 >> 2] = $0;
          HEAP32[6655] = $2_1 + 8;
          HEAP32[6654] = $6_1;
          HEAP32[6653] = $1_1;
          HEAP32[6656] = 0;
          $0 = $2_1 + 24 | 0;
          while (1) {
           HEAP32[$0 + 4 >> 2] = 7;
           $1_1 = $0 + 8 | 0;
           $0 = $0 + 4 | 0;
           if ($4_1 >>> 0 > $1_1 >>> 0) {
            continue
           }
           break;
          };
          if (($2_1 | 0) == ($3 | 0)) {
           break label$61
          }
          HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] & -2;
          $6_1 = $2_1 - $3 | 0;
          HEAP32[$3 + 4 >> 2] = $6_1 | 1;
          HEAP32[$2_1 >> 2] = $6_1;
          if ($6_1 >>> 0 <= 255) {
           $1_1 = $6_1 >>> 3 | 0;
           $0 = ($1_1 << 3) + 26204 | 0;
           $2_1 = HEAP32[6541];
           $1_1 = 1 << $1_1;
           label$102 : {
            if (!($2_1 & $1_1)) {
             HEAP32[6541] = $1_1 | $2_1;
             $1_1 = $0;
             break label$102;
            }
            $1_1 = HEAP32[$0 + 8 >> 2];
           }
           HEAP32[$0 + 8 >> 2] = $3;
           HEAP32[$1_1 + 12 >> 2] = $3;
           HEAP32[$3 + 12 >> 2] = $0;
           HEAP32[$3 + 8 >> 2] = $1_1;
           break label$61;
          }
          HEAP32[$3 + 16 >> 2] = 0;
          HEAP32[$3 + 20 >> 2] = 0;
          $7_1 = $3;
          $0 = $6_1 >>> 8 | 0;
          $1_1 = 0;
          label$104 : {
           if (!$0) {
            break label$104
           }
           $1_1 = 31;
           if ($6_1 >>> 0 > 16777215) {
            break label$104
           }
           $2_1 = $0 + 1048320 >>> 16 & 8;
           $1_1 = $0 << $2_1;
           $0 = $1_1 + 520192 >>> 16 & 4;
           $4_1 = $1_1 << $0;
           $1_1 = $4_1 + 245760 >>> 16 & 2;
           $0 = ($4_1 << $1_1 >>> 15 | 0) - ($1_1 | ($0 | $2_1)) | 0;
           $1_1 = ($0 << 1 | $6_1 >>> $0 + 21 & 1) + 28 | 0;
          }
          $0 = $1_1;
          HEAP32[$7_1 + 28 >> 2] = $0;
          $1_1 = ($0 << 2) + 26468 | 0;
          $2_1 = HEAP32[6542];
          $4_1 = 1 << $0;
          label$105 : {
           if (!($2_1 & $4_1)) {
            HEAP32[6542] = $2_1 | $4_1;
            HEAP32[$1_1 >> 2] = $3;
            HEAP32[$3 + 24 >> 2] = $1_1;
            break label$105;
           }
           $0 = $6_1 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1 | 0) | 0);
           $1_1 = HEAP32[$1_1 >> 2];
           while (1) {
            $2_1 = $1_1;
            if (($6_1 | 0) == (HEAP32[$1_1 + 4 >> 2] & -8)) {
             break label$69
            }
            $1_1 = $0 >>> 29 | 0;
            $0 = $0 << 1;
            $4_1 = ($2_1 + ($1_1 & 4) | 0) + 16 | 0;
            $1_1 = HEAP32[$4_1 >> 2];
            if ($1_1) {
             continue
            }
            break;
           };
           HEAP32[$4_1 >> 2] = $3;
           HEAP32[$3 + 24 >> 2] = $2_1;
          }
          HEAP32[$3 + 12 >> 2] = $3;
          HEAP32[$3 + 8 >> 2] = $3;
          break label$61;
         }
         $0 = HEAP32[$2_1 + 8 >> 2];
         HEAP32[$0 + 12 >> 2] = $4_1;
         HEAP32[$2_1 + 8 >> 2] = $4_1;
         HEAP32[$4_1 + 24 >> 2] = 0;
         HEAP32[$4_1 + 12 >> 2] = $2_1;
         HEAP32[$4_1 + 8 >> 2] = $0;
        }
        $0 = $7_1 + 8 | 0;
        break label$1;
       }
       $0 = HEAP32[$2_1 + 8 >> 2];
       HEAP32[$0 + 12 >> 2] = $3;
       HEAP32[$2_1 + 8 >> 2] = $3;
       HEAP32[$3 + 24 >> 2] = 0;
       HEAP32[$3 + 12 >> 2] = $2_1;
       HEAP32[$3 + 8 >> 2] = $0;
      }
      $0 = HEAP32[6544];
      if ($0 >>> 0 <= $5_1 >>> 0) {
       break label$4
      }
      $1_1 = $0 - $5_1 | 0;
      HEAP32[6544] = $1_1;
      $0 = HEAP32[6547];
      $2_1 = $0 + $5_1 | 0;
      HEAP32[6547] = $2_1;
      HEAP32[$2_1 + 4 >> 2] = $1_1 | 1;
      HEAP32[$0 + 4 >> 2] = $5_1 | 3;
      $0 = $0 + 8 | 0;
      break label$1;
     }
     HEAP32[5216] = 48;
     $0 = 0;
     break label$1;
    }
    label$108 : {
     if (!$7_1) {
      break label$108
     }
     $0 = HEAP32[$4_1 + 28 >> 2];
     $3 = ($0 << 2) + 26468 | 0;
     label$109 : {
      if (HEAP32[$3 >> 2] == ($4_1 | 0)) {
       HEAP32[$3 >> 2] = $1_1;
       if ($1_1) {
        break label$109
       }
       $8_1 = __wasm_rotl_i32(-2, $0) & $8_1;
       HEAP32[6542] = $8_1;
       break label$108;
      }
      HEAP32[$7_1 + (HEAP32[$7_1 + 16 >> 2] == ($4_1 | 0) ? 16 : 20) >> 2] = $1_1;
      if (!$1_1) {
       break label$108
      }
     }
     HEAP32[$1_1 + 24 >> 2] = $7_1;
     $0 = HEAP32[$4_1 + 16 >> 2];
     if ($0) {
      HEAP32[$1_1 + 16 >> 2] = $0;
      HEAP32[$0 + 24 >> 2] = $1_1;
     }
     $0 = HEAP32[$4_1 + 20 >> 2];
     if (!$0) {
      break label$108
     }
     HEAP32[$1_1 + 20 >> 2] = $0;
     HEAP32[$0 + 24 >> 2] = $1_1;
    }
    label$112 : {
     if ($2_1 >>> 0 <= 15) {
      $0 = $2_1 + $5_1 | 0;
      HEAP32[$4_1 + 4 >> 2] = $0 | 3;
      $0 = $0 + $4_1 | 0;
      HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
      break label$112;
     }
     HEAP32[$4_1 + 4 >> 2] = $5_1 | 3;
     $1_1 = $4_1 + $5_1 | 0;
     HEAP32[$1_1 + 4 >> 2] = $2_1 | 1;
     HEAP32[$1_1 + $2_1 >> 2] = $2_1;
     if ($2_1 >>> 0 <= 255) {
      $2_1 = $2_1 >>> 3 | 0;
      $0 = ($2_1 << 3) + 26204 | 0;
      $3 = HEAP32[6541];
      $2_1 = 1 << $2_1;
      label$115 : {
       if (!($3 & $2_1)) {
        HEAP32[6541] = $2_1 | $3;
        $2_1 = $0;
        break label$115;
       }
       $2_1 = HEAP32[$0 + 8 >> 2];
      }
      HEAP32[$0 + 8 >> 2] = $1_1;
      HEAP32[$2_1 + 12 >> 2] = $1_1;
      HEAP32[$1_1 + 12 >> 2] = $0;
      HEAP32[$1_1 + 8 >> 2] = $2_1;
      break label$112;
     }
     $7_1 = $1_1;
     $0 = $2_1 >>> 8 | 0;
     $3 = 0;
     label$117 : {
      if (!$0) {
       break label$117
      }
      $3 = 31;
      if ($2_1 >>> 0 > 16777215) {
       break label$117
      }
      $5_1 = $0 + 1048320 >>> 16 & 8;
      $3 = $0 << $5_1;
      $0 = $3 + 520192 >>> 16 & 4;
      $6_1 = $3 << $0;
      $3 = $6_1 + 245760 >>> 16 & 2;
      $0 = ($6_1 << $3 >>> 15 | 0) - ($3 | ($0 | $5_1)) | 0;
      $3 = ($0 << 1 | $2_1 >>> $0 + 21 & 1) + 28 | 0;
     }
     $0 = $3;
     HEAP32[$7_1 + 28 >> 2] = $0;
     HEAP32[$1_1 + 16 >> 2] = 0;
     HEAP32[$1_1 + 20 >> 2] = 0;
     $3 = ($0 << 2) + 26468 | 0;
     label$118 : {
      $5_1 = 1 << $0;
      label$119 : {
       if (!($5_1 & $8_1)) {
        HEAP32[6542] = $5_1 | $8_1;
        HEAP32[$3 >> 2] = $1_1;
        break label$119;
       }
       $0 = $2_1 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1 | 0) | 0);
       $5_1 = HEAP32[$3 >> 2];
       while (1) {
        $3 = $5_1;
        if ((HEAP32[$3 + 4 >> 2] & -8) == ($2_1 | 0)) {
         break label$118
        }
        $5_1 = $0 >>> 29 | 0;
        $0 = $0 << 1;
        $6_1 = ($3 + ($5_1 & 4) | 0) + 16 | 0;
        $5_1 = HEAP32[$6_1 >> 2];
        if ($5_1) {
         continue
        }
        break;
       };
       HEAP32[$6_1 >> 2] = $1_1;
      }
      HEAP32[$1_1 + 24 >> 2] = $3;
      HEAP32[$1_1 + 12 >> 2] = $1_1;
      HEAP32[$1_1 + 8 >> 2] = $1_1;
      break label$112;
     }
     $0 = HEAP32[$3 + 8 >> 2];
     HEAP32[$0 + 12 >> 2] = $1_1;
     HEAP32[$3 + 8 >> 2] = $1_1;
     HEAP32[$1_1 + 24 >> 2] = 0;
     HEAP32[$1_1 + 12 >> 2] = $3;
     HEAP32[$1_1 + 8 >> 2] = $0;
    }
    $0 = $4_1 + 8 | 0;
    break label$1;
   }
   label$122 : {
    if (!$9_1) {
     break label$122
    }
    $0 = HEAP32[$1_1 + 28 >> 2];
    $2_1 = ($0 << 2) + 26468 | 0;
    label$123 : {
     if (HEAP32[$2_1 >> 2] == ($1_1 | 0)) {
      HEAP32[$2_1 >> 2] = $4_1;
      if ($4_1) {
       break label$123
      }
      (wasm2js_i32$0 = 26168, wasm2js_i32$1 = __wasm_rotl_i32(-2, $0) & $10_1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$122;
     }
     HEAP32[(HEAP32[$9_1 + 16 >> 2] == ($1_1 | 0) ? 16 : 20) + $9_1 >> 2] = $4_1;
     if (!$4_1) {
      break label$122
     }
    }
    HEAP32[$4_1 + 24 >> 2] = $9_1;
    $0 = HEAP32[$1_1 + 16 >> 2];
    if ($0) {
     HEAP32[$4_1 + 16 >> 2] = $0;
     HEAP32[$0 + 24 >> 2] = $4_1;
    }
    $0 = HEAP32[$1_1 + 20 >> 2];
    if (!$0) {
     break label$122
    }
    HEAP32[$4_1 + 20 >> 2] = $0;
    HEAP32[$0 + 24 >> 2] = $4_1;
   }
   label$126 : {
    if ($3 >>> 0 <= 15) {
     $0 = $3 + $5_1 | 0;
     HEAP32[$1_1 + 4 >> 2] = $0 | 3;
     $0 = $0 + $1_1 | 0;
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
     break label$126;
    }
    HEAP32[$1_1 + 4 >> 2] = $5_1 | 3;
    $5_1 = $1_1 + $5_1 | 0;
    HEAP32[$5_1 + 4 >> 2] = $3 | 1;
    HEAP32[$3 + $5_1 >> 2] = $3;
    if ($7_1) {
     $4_1 = $7_1 >>> 3 | 0;
     $0 = ($4_1 << 3) + 26204 | 0;
     $2_1 = HEAP32[6546];
     $4_1 = 1 << $4_1;
     label$129 : {
      if (!($4_1 & $6_1)) {
       HEAP32[6541] = $4_1 | $6_1;
       $6_1 = $0;
       break label$129;
      }
      $6_1 = HEAP32[$0 + 8 >> 2];
     }
     HEAP32[$0 + 8 >> 2] = $2_1;
     HEAP32[$6_1 + 12 >> 2] = $2_1;
     HEAP32[$2_1 + 12 >> 2] = $0;
     HEAP32[$2_1 + 8 >> 2] = $6_1;
    }
    HEAP32[6546] = $5_1;
    HEAP32[6543] = $3;
   }
   $0 = $1_1 + 8 | 0;
  }
  global$0 = $11_1 + 16 | 0;
  return $0 | 0;
 }
 
 function $1769($0) {
  $0 = $0 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $3 = $0 + -8 | 0;
   $2_1 = HEAP32[$0 + -4 >> 2];
   $0 = $2_1 & -8;
   $5_1 = $3 + $0 | 0;
   label$2 : {
    if ($2_1 & 1) {
     break label$2
    }
    if (!($2_1 & 3)) {
     break label$1
    }
    $2_1 = HEAP32[$3 >> 2];
    $3 = $3 - $2_1 | 0;
    if ($3 >>> 0 < HEAPU32[6545]) {
     break label$1
    }
    $0 = $0 + $2_1 | 0;
    if (HEAP32[6546] != ($3 | 0)) {
     if ($2_1 >>> 0 <= 255) {
      $4_1 = HEAP32[$3 + 8 >> 2];
      $2_1 = $2_1 >>> 3 | 0;
      $1_1 = HEAP32[$3 + 12 >> 2];
      if (($1_1 | 0) == ($4_1 | 0)) {
       (wasm2js_i32$0 = 26164, wasm2js_i32$1 = HEAP32[6541] & __wasm_rotl_i32(-2, $2_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[$4_1 + 12 >> 2] = $1_1;
      HEAP32[$1_1 + 8 >> 2] = $4_1;
      break label$2;
     }
     $7_1 = HEAP32[$3 + 24 >> 2];
     $2_1 = HEAP32[$3 + 12 >> 2];
     label$6 : {
      if (($2_1 | 0) != ($3 | 0)) {
       $1_1 = HEAP32[$3 + 8 >> 2];
       HEAP32[$1_1 + 12 >> 2] = $2_1;
       HEAP32[$2_1 + 8 >> 2] = $1_1;
       break label$6;
      }
      label$9 : {
       $4_1 = $3 + 20 | 0;
       $1_1 = HEAP32[$4_1 >> 2];
       if ($1_1) {
        break label$9
       }
       $4_1 = $3 + 16 | 0;
       $1_1 = HEAP32[$4_1 >> 2];
       if ($1_1) {
        break label$9
       }
       $2_1 = 0;
       break label$6;
      }
      while (1) {
       $6_1 = $4_1;
       $2_1 = $1_1;
       $4_1 = $2_1 + 20 | 0;
       $1_1 = HEAP32[$4_1 >> 2];
       if ($1_1) {
        continue
       }
       $4_1 = $2_1 + 16 | 0;
       $1_1 = HEAP32[$2_1 + 16 >> 2];
       if ($1_1) {
        continue
       }
       break;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     $4_1 = HEAP32[$3 + 28 >> 2];
     $1_1 = ($4_1 << 2) + 26468 | 0;
     label$11 : {
      if (HEAP32[$1_1 >> 2] == ($3 | 0)) {
       HEAP32[$1_1 >> 2] = $2_1;
       if ($2_1) {
        break label$11
       }
       (wasm2js_i32$0 = 26168, wasm2js_i32$1 = HEAP32[6542] & __wasm_rotl_i32(-2, $4_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[$7_1 + (HEAP32[$7_1 + 16 >> 2] == ($3 | 0) ? 16 : 20) >> 2] = $2_1;
      if (!$2_1) {
       break label$2
      }
     }
     HEAP32[$2_1 + 24 >> 2] = $7_1;
     $1_1 = HEAP32[$3 + 16 >> 2];
     if ($1_1) {
      HEAP32[$2_1 + 16 >> 2] = $1_1;
      HEAP32[$1_1 + 24 >> 2] = $2_1;
     }
     $1_1 = HEAP32[$3 + 20 >> 2];
     if (!$1_1) {
      break label$2
     }
     HEAP32[$2_1 + 20 >> 2] = $1_1;
     HEAP32[$1_1 + 24 >> 2] = $2_1;
     break label$2;
    }
    $2_1 = HEAP32[$5_1 + 4 >> 2];
    if (($2_1 & 3) != 3) {
     break label$2
    }
    HEAP32[6543] = $0;
    HEAP32[$5_1 + 4 >> 2] = $2_1 & -2;
    HEAP32[$3 + 4 >> 2] = $0 | 1;
    HEAP32[$0 + $3 >> 2] = $0;
    return;
   }
   if ($5_1 >>> 0 <= $3 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[$5_1 + 4 >> 2];
   if (!($2_1 & 1)) {
    break label$1
   }
   label$14 : {
    if (!($2_1 & 2)) {
     if (($5_1 | 0) == HEAP32[6547]) {
      HEAP32[6547] = $3;
      $0 = HEAP32[6544] + $0 | 0;
      HEAP32[6544] = $0;
      HEAP32[$3 + 4 >> 2] = $0 | 1;
      if (HEAP32[6546] != ($3 | 0)) {
       break label$1
      }
      HEAP32[6543] = 0;
      HEAP32[6546] = 0;
      return;
     }
     if (($5_1 | 0) == HEAP32[6546]) {
      HEAP32[6546] = $3;
      $0 = HEAP32[6543] + $0 | 0;
      HEAP32[6543] = $0;
      HEAP32[$3 + 4 >> 2] = $0 | 1;
      HEAP32[$0 + $3 >> 2] = $0;
      return;
     }
     $0 = ($2_1 & -8) + $0 | 0;
     label$18 : {
      if ($2_1 >>> 0 <= 255) {
       $1_1 = HEAP32[$5_1 + 8 >> 2];
       $2_1 = $2_1 >>> 3 | 0;
       $4_1 = HEAP32[$5_1 + 12 >> 2];
       if (($1_1 | 0) == ($4_1 | 0)) {
        (wasm2js_i32$0 = 26164, wasm2js_i32$1 = HEAP32[6541] & __wasm_rotl_i32(-2, $2_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$18;
       }
       HEAP32[$1_1 + 12 >> 2] = $4_1;
       HEAP32[$4_1 + 8 >> 2] = $1_1;
       break label$18;
      }
      $7_1 = HEAP32[$5_1 + 24 >> 2];
      $2_1 = HEAP32[$5_1 + 12 >> 2];
      label$23 : {
       if (($5_1 | 0) != ($2_1 | 0)) {
        $1_1 = HEAP32[$5_1 + 8 >> 2];
        HEAP32[$1_1 + 12 >> 2] = $2_1;
        HEAP32[$2_1 + 8 >> 2] = $1_1;
        break label$23;
       }
       label$26 : {
        $4_1 = $5_1 + 20 | 0;
        $1_1 = HEAP32[$4_1 >> 2];
        if ($1_1) {
         break label$26
        }
        $4_1 = $5_1 + 16 | 0;
        $1_1 = HEAP32[$4_1 >> 2];
        if ($1_1) {
         break label$26
        }
        $2_1 = 0;
        break label$23;
       }
       while (1) {
        $6_1 = $4_1;
        $2_1 = $1_1;
        $4_1 = $2_1 + 20 | 0;
        $1_1 = HEAP32[$4_1 >> 2];
        if ($1_1) {
         continue
        }
        $4_1 = $2_1 + 16 | 0;
        $1_1 = HEAP32[$2_1 + 16 >> 2];
        if ($1_1) {
         continue
        }
        break;
       };
       HEAP32[$6_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$18
      }
      $4_1 = HEAP32[$5_1 + 28 >> 2];
      $1_1 = ($4_1 << 2) + 26468 | 0;
      label$28 : {
       if (($5_1 | 0) == HEAP32[$1_1 >> 2]) {
        HEAP32[$1_1 >> 2] = $2_1;
        if ($2_1) {
         break label$28
        }
        (wasm2js_i32$0 = 26168, wasm2js_i32$1 = HEAP32[6542] & __wasm_rotl_i32(-2, $4_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$18;
       }
       HEAP32[$7_1 + (($5_1 | 0) == HEAP32[$7_1 + 16 >> 2] ? 16 : 20) >> 2] = $2_1;
       if (!$2_1) {
        break label$18
       }
      }
      HEAP32[$2_1 + 24 >> 2] = $7_1;
      $1_1 = HEAP32[$5_1 + 16 >> 2];
      if ($1_1) {
       HEAP32[$2_1 + 16 >> 2] = $1_1;
       HEAP32[$1_1 + 24 >> 2] = $2_1;
      }
      $1_1 = HEAP32[$5_1 + 20 >> 2];
      if (!$1_1) {
       break label$18
      }
      HEAP32[$2_1 + 20 >> 2] = $1_1;
      HEAP32[$1_1 + 24 >> 2] = $2_1;
     }
     HEAP32[$3 + 4 >> 2] = $0 | 1;
     HEAP32[$0 + $3 >> 2] = $0;
     if (HEAP32[6546] != ($3 | 0)) {
      break label$14
     }
     HEAP32[6543] = $0;
     return;
    }
    HEAP32[$5_1 + 4 >> 2] = $2_1 & -2;
    HEAP32[$3 + 4 >> 2] = $0 | 1;
    HEAP32[$0 + $3 >> 2] = $0;
   }
   if ($0 >>> 0 <= 255) {
    $0 = $0 >>> 3 | 0;
    $2_1 = ($0 << 3) + 26204 | 0;
    $1_1 = HEAP32[6541];
    $0 = 1 << $0;
    label$32 : {
     if (!($1_1 & $0)) {
      HEAP32[6541] = $0 | $1_1;
      $0 = $2_1;
      break label$32;
     }
     $0 = HEAP32[$2_1 + 8 >> 2];
    }
    HEAP32[$2_1 + 8 >> 2] = $3;
    HEAP32[$0 + 12 >> 2] = $3;
    HEAP32[$3 + 12 >> 2] = $2_1;
    HEAP32[$3 + 8 >> 2] = $0;
    return;
   }
   HEAP32[$3 + 16 >> 2] = 0;
   HEAP32[$3 + 20 >> 2] = 0;
   $2_1 = $3;
   $4_1 = $0 >>> 8 | 0;
   $1_1 = 0;
   label$34 : {
    if (!$4_1) {
     break label$34
    }
    $1_1 = 31;
    if ($0 >>> 0 > 16777215) {
     break label$34
    }
    $1_1 = $4_1;
    $4_1 = $4_1 + 1048320 >>> 16 & 8;
    $1_1 = $1_1 << $4_1;
    $7_1 = $1_1 + 520192 >>> 16 & 4;
    $1_1 = $1_1 << $7_1;
    $6_1 = $1_1 + 245760 >>> 16 & 2;
    $1_1 = ($1_1 << $6_1 >>> 15 | 0) - ($6_1 | ($4_1 | $7_1)) | 0;
    $1_1 = ($1_1 << 1 | $0 >>> $1_1 + 21 & 1) + 28 | 0;
   }
   HEAP32[$2_1 + 28 >> 2] = $1_1;
   $6_1 = ($1_1 << 2) + 26468 | 0;
   label$35 : {
    label$36 : {
     $4_1 = HEAP32[6542];
     $2_1 = 1 << $1_1;
     label$37 : {
      if (!($4_1 & $2_1)) {
       HEAP32[6542] = $2_1 | $4_1;
       HEAP32[$6_1 >> 2] = $3;
       HEAP32[$3 + 24 >> 2] = $6_1;
       break label$37;
      }
      $4_1 = $0 << (($1_1 | 0) == 31 ? 0 : 25 - ($1_1 >>> 1 | 0) | 0);
      $2_1 = HEAP32[$6_1 >> 2];
      while (1) {
       $1_1 = $2_1;
       if ((HEAP32[$2_1 + 4 >> 2] & -8) == ($0 | 0)) {
        break label$36
       }
       $2_1 = $4_1 >>> 29 | 0;
       $4_1 = $4_1 << 1;
       $6_1 = ($1_1 + ($2_1 & 4) | 0) + 16 | 0;
       $2_1 = HEAP32[$6_1 >> 2];
       if ($2_1) {
        continue
       }
       break;
      };
      HEAP32[$6_1 >> 2] = $3;
      HEAP32[$3 + 24 >> 2] = $1_1;
     }
     HEAP32[$3 + 12 >> 2] = $3;
     HEAP32[$3 + 8 >> 2] = $3;
     break label$35;
    }
    $0 = HEAP32[$1_1 + 8 >> 2];
    HEAP32[$0 + 12 >> 2] = $3;
    HEAP32[$1_1 + 8 >> 2] = $3;
    HEAP32[$3 + 24 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = $1_1;
    HEAP32[$3 + 8 >> 2] = $0;
   }
   $0 = HEAP32[6549] + -1 | 0;
   HEAP32[6549] = $0;
   if ($0) {
    break label$1
   }
   $3 = 26620;
   while (1) {
    $0 = HEAP32[$3 >> 2];
    $3 = $0 + 8 | 0;
    if ($0) {
     continue
    }
    break;
   };
   HEAP32[6549] = -1;
  }
 }
 
 function $1770($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  if (!$0) {
   return $1768($1_1)
  }
  if ($1_1 >>> 0 >= 4294967232) {
   HEAP32[5216] = 48;
   return 0;
  }
  $2_1 = $1771($0 + -8 | 0, $1_1 >>> 0 < 11 ? 16 : $1_1 + 11 & -8);
  if ($2_1) {
   return $2_1 + 8 | 0
  }
  $2_1 = $1768($1_1);
  if (!$2_1) {
   return 0
  }
  $3 = HEAP32[$0 + -4 >> 2];
  $3 = ($3 & -8) - ($3 & 3 ? 4 : 8) | 0;
  $1778($2_1, $0, $3 >>> 0 < $1_1 >>> 0 ? $3 : $1_1);
  $1769($0);
  return $2_1;
 }
 
 function $1771($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7_1 = HEAP32[$0 + 4 >> 2];
  $2_1 = $7_1 & 3;
  $3 = $7_1 & -8;
  $5_1 = $3 + $0 | 0;
  label$2 : {
   if (!$2_1) {
    $2_1 = 0;
    if ($1_1 >>> 0 < 256) {
     break label$2
    }
    if ($3 >>> 0 >= $1_1 + 4 >>> 0) {
     $2_1 = $0;
     if ($3 - $1_1 >>> 0 <= HEAP32[6661] << 1 >>> 0) {
      break label$2
     }
    }
    return 0;
   }
   label$5 : {
    if ($3 >>> 0 >= $1_1 >>> 0) {
     $2_1 = $3 - $1_1 | 0;
     if ($2_1 >>> 0 < 16) {
      break label$5
     }
     HEAP32[$0 + 4 >> 2] = $7_1 & 1 | $1_1 | 2;
     $1_1 = $0 + $1_1 | 0;
     HEAP32[$1_1 + 4 >> 2] = $2_1 | 3;
     HEAP32[$5_1 + 4 >> 2] = HEAP32[$5_1 + 4 >> 2] | 1;
     $1772($1_1, $2_1);
     break label$5;
    }
    $2_1 = 0;
    if (($5_1 | 0) == HEAP32[6547]) {
     $4_1 = $3 + HEAP32[6544] | 0;
     if ($4_1 >>> 0 <= $1_1 >>> 0) {
      break label$2
     }
     HEAP32[$0 + 4 >> 2] = $7_1 & 1 | $1_1 | 2;
     $2_1 = $0 + $1_1 | 0;
     $1_1 = $4_1 - $1_1 | 0;
     HEAP32[$2_1 + 4 >> 2] = $1_1 | 1;
     HEAP32[6544] = $1_1;
     HEAP32[6547] = $2_1;
     break label$5;
    }
    if (($5_1 | 0) == HEAP32[6546]) {
     $4_1 = $3 + HEAP32[6543] | 0;
     if ($4_1 >>> 0 < $1_1 >>> 0) {
      break label$2
     }
     $2_1 = $4_1 - $1_1 | 0;
     label$9 : {
      if ($2_1 >>> 0 >= 16) {
       HEAP32[$0 + 4 >> 2] = $7_1 & 1 | $1_1 | 2;
       $1_1 = $0 + $1_1 | 0;
       HEAP32[$1_1 + 4 >> 2] = $2_1 | 1;
       $4_1 = $0 + $4_1 | 0;
       HEAP32[$4_1 >> 2] = $2_1;
       HEAP32[$4_1 + 4 >> 2] = HEAP32[$4_1 + 4 >> 2] & -2;
       break label$9;
      }
      HEAP32[$0 + 4 >> 2] = $4_1 | $7_1 & 1 | 2;
      $1_1 = $0 + $4_1 | 0;
      HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] | 1;
      $2_1 = 0;
      $1_1 = 0;
     }
     HEAP32[6546] = $1_1;
     HEAP32[6543] = $2_1;
     break label$5;
    }
    $6_1 = HEAP32[$5_1 + 4 >> 2];
    if ($6_1 & 2) {
     break label$2
    }
    $8_1 = $3 + ($6_1 & -8) | 0;
    if ($8_1 >>> 0 < $1_1 >>> 0) {
     break label$2
    }
    $10_1 = $8_1 - $1_1 | 0;
    label$11 : {
     if ($6_1 >>> 0 <= 255) {
      $2_1 = $6_1 >>> 3 | 0;
      $6_1 = HEAP32[$5_1 + 8 >> 2];
      $4_1 = HEAP32[$5_1 + 12 >> 2];
      if (($6_1 | 0) == ($4_1 | 0)) {
       (wasm2js_i32$0 = 26164, wasm2js_i32$1 = HEAP32[6541] & __wasm_rotl_i32(-2, $2_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$11;
      }
      HEAP32[$6_1 + 12 >> 2] = $4_1;
      HEAP32[$4_1 + 8 >> 2] = $6_1;
      break label$11;
     }
     $9_1 = HEAP32[$5_1 + 24 >> 2];
     $3 = HEAP32[$5_1 + 12 >> 2];
     label$14 : {
      if (($5_1 | 0) != ($3 | 0)) {
       $2_1 = HEAP32[$5_1 + 8 >> 2];
       HEAP32[$2_1 + 12 >> 2] = $3;
       HEAP32[$3 + 8 >> 2] = $2_1;
       break label$14;
      }
      label$17 : {
       $2_1 = $5_1 + 20 | 0;
       $6_1 = HEAP32[$2_1 >> 2];
       if ($6_1) {
        break label$17
       }
       $2_1 = $5_1 + 16 | 0;
       $6_1 = HEAP32[$2_1 >> 2];
       if ($6_1) {
        break label$17
       }
       $3 = 0;
       break label$14;
      }
      while (1) {
       $4_1 = $2_1;
       $3 = $6_1;
       $2_1 = $3 + 20 | 0;
       $6_1 = HEAP32[$2_1 >> 2];
       if ($6_1) {
        continue
       }
       $2_1 = $3 + 16 | 0;
       $6_1 = HEAP32[$3 + 16 >> 2];
       if ($6_1) {
        continue
       }
       break;
      };
      HEAP32[$4_1 >> 2] = 0;
     }
     if (!$9_1) {
      break label$11
     }
     $4_1 = HEAP32[$5_1 + 28 >> 2];
     $2_1 = ($4_1 << 2) + 26468 | 0;
     label$19 : {
      if (($5_1 | 0) == HEAP32[$2_1 >> 2]) {
       HEAP32[$2_1 >> 2] = $3;
       if ($3) {
        break label$19
       }
       (wasm2js_i32$0 = 26168, wasm2js_i32$1 = HEAP32[6542] & __wasm_rotl_i32(-2, $4_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$11;
      }
      HEAP32[(($5_1 | 0) == HEAP32[$9_1 + 16 >> 2] ? 16 : 20) + $9_1 >> 2] = $3;
      if (!$3) {
       break label$11
      }
     }
     HEAP32[$3 + 24 >> 2] = $9_1;
     $2_1 = HEAP32[$5_1 + 16 >> 2];
     if ($2_1) {
      HEAP32[$3 + 16 >> 2] = $2_1;
      HEAP32[$2_1 + 24 >> 2] = $3;
     }
     $2_1 = HEAP32[$5_1 + 20 >> 2];
     if (!$2_1) {
      break label$11
     }
     HEAP32[$3 + 20 >> 2] = $2_1;
     HEAP32[$2_1 + 24 >> 2] = $3;
    }
    if ($10_1 >>> 0 <= 15) {
     HEAP32[$0 + 4 >> 2] = $7_1 & 1 | $8_1 | 2;
     $1_1 = $0 + $8_1 | 0;
     HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] | 1;
     break label$5;
    }
    HEAP32[$0 + 4 >> 2] = $7_1 & 1 | $1_1 | 2;
    $2_1 = $0 + $1_1 | 0;
    HEAP32[$2_1 + 4 >> 2] = $10_1 | 3;
    $1_1 = $0 + $8_1 | 0;
    HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] | 1;
    $1772($2_1, $10_1);
   }
   $2_1 = $0;
  }
  return $2_1;
 }
 
 function $1772($0, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = $0 + $1_1 | 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[$0 + 4 >> 2];
    if ($2_1 & 1) {
     break label$2
    }
    if (!($2_1 & 3)) {
     break label$1
    }
    $2_1 = HEAP32[$0 >> 2];
    $1_1 = $2_1 + $1_1 | 0;
    $0 = $0 - $2_1 | 0;
    if (($0 | 0) != HEAP32[6546]) {
     if ($2_1 >>> 0 <= 255) {
      $4_1 = $2_1 >>> 3 | 0;
      $2_1 = HEAP32[$0 + 8 >> 2];
      $3 = HEAP32[$0 + 12 >> 2];
      if (($3 | 0) == ($2_1 | 0)) {
       (wasm2js_i32$0 = 26164, wasm2js_i32$1 = HEAP32[6541] & __wasm_rotl_i32(-2, $4_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[$2_1 + 12 >> 2] = $3;
      HEAP32[$3 + 8 >> 2] = $2_1;
      break label$2;
     }
     $7_1 = HEAP32[$0 + 24 >> 2];
     $2_1 = HEAP32[$0 + 12 >> 2];
     label$6 : {
      if (($2_1 | 0) != ($0 | 0)) {
       $3 = HEAP32[$0 + 8 >> 2];
       HEAP32[$3 + 12 >> 2] = $2_1;
       HEAP32[$2_1 + 8 >> 2] = $3;
       break label$6;
      }
      label$9 : {
       $3 = $0 + 20 | 0;
       $4_1 = HEAP32[$3 >> 2];
       if ($4_1) {
        break label$9
       }
       $3 = $0 + 16 | 0;
       $4_1 = HEAP32[$3 >> 2];
       if ($4_1) {
        break label$9
       }
       $2_1 = 0;
       break label$6;
      }
      while (1) {
       $6_1 = $3;
       $2_1 = $4_1;
       $3 = $2_1 + 20 | 0;
       $4_1 = HEAP32[$3 >> 2];
       if ($4_1) {
        continue
       }
       $3 = $2_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 + 16 >> 2];
       if ($4_1) {
        continue
       }
       break;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     $3 = HEAP32[$0 + 28 >> 2];
     $4_1 = ($3 << 2) + 26468 | 0;
     label$11 : {
      if (HEAP32[$4_1 >> 2] == ($0 | 0)) {
       HEAP32[$4_1 >> 2] = $2_1;
       if ($2_1) {
        break label$11
       }
       (wasm2js_i32$0 = 26168, wasm2js_i32$1 = HEAP32[6542] & __wasm_rotl_i32(-2, $3)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[$7_1 + (HEAP32[$7_1 + 16 >> 2] == ($0 | 0) ? 16 : 20) >> 2] = $2_1;
      if (!$2_1) {
       break label$2
      }
     }
     HEAP32[$2_1 + 24 >> 2] = $7_1;
     $3 = HEAP32[$0 + 16 >> 2];
     if ($3) {
      HEAP32[$2_1 + 16 >> 2] = $3;
      HEAP32[$3 + 24 >> 2] = $2_1;
     }
     $3 = HEAP32[$0 + 20 >> 2];
     if (!$3) {
      break label$2
     }
     HEAP32[$2_1 + 20 >> 2] = $3;
     HEAP32[$3 + 24 >> 2] = $2_1;
     break label$2;
    }
    $2_1 = HEAP32[$5_1 + 4 >> 2];
    if (($2_1 & 3) != 3) {
     break label$2
    }
    HEAP32[6543] = $1_1;
    HEAP32[$5_1 + 4 >> 2] = $2_1 & -2;
    HEAP32[$0 + 4 >> 2] = $1_1 | 1;
    HEAP32[$5_1 >> 2] = $1_1;
    return;
   }
   $2_1 = HEAP32[$5_1 + 4 >> 2];
   label$14 : {
    if (!($2_1 & 2)) {
     if (($5_1 | 0) == HEAP32[6547]) {
      HEAP32[6547] = $0;
      $1_1 = HEAP32[6544] + $1_1 | 0;
      HEAP32[6544] = $1_1;
      HEAP32[$0 + 4 >> 2] = $1_1 | 1;
      if (HEAP32[6546] != ($0 | 0)) {
       break label$1
      }
      HEAP32[6543] = 0;
      HEAP32[6546] = 0;
      return;
     }
     if (($5_1 | 0) == HEAP32[6546]) {
      HEAP32[6546] = $0;
      $1_1 = HEAP32[6543] + $1_1 | 0;
      HEAP32[6543] = $1_1;
      HEAP32[$0 + 4 >> 2] = $1_1 | 1;
      HEAP32[$0 + $1_1 >> 2] = $1_1;
      return;
     }
     $1_1 = ($2_1 & -8) + $1_1 | 0;
     label$18 : {
      if ($2_1 >>> 0 <= 255) {
       $4_1 = $2_1 >>> 3 | 0;
       $2_1 = HEAP32[$5_1 + 8 >> 2];
       $3 = HEAP32[$5_1 + 12 >> 2];
       if (($2_1 | 0) == ($3 | 0)) {
        (wasm2js_i32$0 = 26164, wasm2js_i32$1 = HEAP32[6541] & __wasm_rotl_i32(-2, $4_1)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$18;
       }
       HEAP32[$2_1 + 12 >> 2] = $3;
       HEAP32[$3 + 8 >> 2] = $2_1;
       break label$18;
      }
      $7_1 = HEAP32[$5_1 + 24 >> 2];
      $2_1 = HEAP32[$5_1 + 12 >> 2];
      label$21 : {
       if (($5_1 | 0) != ($2_1 | 0)) {
        $3 = HEAP32[$5_1 + 8 >> 2];
        HEAP32[$3 + 12 >> 2] = $2_1;
        HEAP32[$2_1 + 8 >> 2] = $3;
        break label$21;
       }
       label$24 : {
        $3 = $5_1 + 20 | 0;
        $4_1 = HEAP32[$3 >> 2];
        if ($4_1) {
         break label$24
        }
        $3 = $5_1 + 16 | 0;
        $4_1 = HEAP32[$3 >> 2];
        if ($4_1) {
         break label$24
        }
        $2_1 = 0;
        break label$21;
       }
       while (1) {
        $6_1 = $3;
        $2_1 = $4_1;
        $3 = $2_1 + 20 | 0;
        $4_1 = HEAP32[$3 >> 2];
        if ($4_1) {
         continue
        }
        $3 = $2_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 + 16 >> 2];
        if ($4_1) {
         continue
        }
        break;
       };
       HEAP32[$6_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$18
      }
      $3 = HEAP32[$5_1 + 28 >> 2];
      $4_1 = ($3 << 2) + 26468 | 0;
      label$26 : {
       if (($5_1 | 0) == HEAP32[$4_1 >> 2]) {
        HEAP32[$4_1 >> 2] = $2_1;
        if ($2_1) {
         break label$26
        }
        (wasm2js_i32$0 = 26168, wasm2js_i32$1 = HEAP32[6542] & __wasm_rotl_i32(-2, $3)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$18;
       }
       HEAP32[$7_1 + (($5_1 | 0) == HEAP32[$7_1 + 16 >> 2] ? 16 : 20) >> 2] = $2_1;
       if (!$2_1) {
        break label$18
       }
      }
      HEAP32[$2_1 + 24 >> 2] = $7_1;
      $3 = HEAP32[$5_1 + 16 >> 2];
      if ($3) {
       HEAP32[$2_1 + 16 >> 2] = $3;
       HEAP32[$3 + 24 >> 2] = $2_1;
      }
      $3 = HEAP32[$5_1 + 20 >> 2];
      if (!$3) {
       break label$18
      }
      HEAP32[$2_1 + 20 >> 2] = $3;
      HEAP32[$3 + 24 >> 2] = $2_1;
     }
     HEAP32[$0 + 4 >> 2] = $1_1 | 1;
     HEAP32[$0 + $1_1 >> 2] = $1_1;
     if (HEAP32[6546] != ($0 | 0)) {
      break label$14
     }
     HEAP32[6543] = $1_1;
     return;
    }
    HEAP32[$5_1 + 4 >> 2] = $2_1 & -2;
    HEAP32[$0 + 4 >> 2] = $1_1 | 1;
    HEAP32[$0 + $1_1 >> 2] = $1_1;
   }
   if ($1_1 >>> 0 <= 255) {
    $2_1 = $1_1 >>> 3 | 0;
    $1_1 = ($2_1 << 3) + 26204 | 0;
    $3 = HEAP32[6541];
    $2_1 = 1 << $2_1;
    label$30 : {
     if (!($3 & $2_1)) {
      HEAP32[6541] = $2_1 | $3;
      $2_1 = $1_1;
      break label$30;
     }
     $2_1 = HEAP32[$1_1 + 8 >> 2];
    }
    HEAP32[$1_1 + 8 >> 2] = $0;
    HEAP32[$2_1 + 12 >> 2] = $0;
    HEAP32[$0 + 12 >> 2] = $1_1;
    HEAP32[$0 + 8 >> 2] = $2_1;
    return;
   }
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 0;
   $3 = $0;
   $4_1 = $1_1 >>> 8 | 0;
   $2_1 = 0;
   label$32 : {
    if (!$4_1) {
     break label$32
    }
    $2_1 = 31;
    if ($1_1 >>> 0 > 16777215) {
     break label$32
    }
    $6_1 = $4_1 + 1048320 >>> 16 & 8;
    $4_1 = $4_1 << $6_1;
    $2_1 = $4_1 + 520192 >>> 16 & 4;
    $5_1 = $4_1 << $2_1;
    $4_1 = $5_1 + 245760 >>> 16 & 2;
    $2_1 = ($5_1 << $4_1 >>> 15 | 0) - ($4_1 | ($2_1 | $6_1)) | 0;
    $2_1 = ($2_1 << 1 | $1_1 >>> $2_1 + 21 & 1) + 28 | 0;
   }
   HEAP32[$3 + 28 >> 2] = $2_1;
   $4_1 = ($2_1 << 2) + 26468 | 0;
   label$33 : {
    $3 = HEAP32[6542];
    $6_1 = 1 << $2_1;
    label$34 : {
     if (!($3 & $6_1)) {
      HEAP32[6542] = $3 | $6_1;
      HEAP32[$4_1 >> 2] = $0;
      break label$34;
     }
     $3 = $1_1 << (($2_1 | 0) == 31 ? 0 : 25 - ($2_1 >>> 1 | 0) | 0);
     $2_1 = HEAP32[$4_1 >> 2];
     while (1) {
      $4_1 = $2_1;
      if ((HEAP32[$2_1 + 4 >> 2] & -8) == ($1_1 | 0)) {
       break label$33
      }
      $2_1 = $3 >>> 29 | 0;
      $3 = $3 << 1;
      $6_1 = ($4_1 + ($2_1 & 4) | 0) + 16 | 0;
      $2_1 = HEAP32[$6_1 >> 2];
      if ($2_1) {
       continue
      }
      break;
     };
     HEAP32[$6_1 >> 2] = $0;
    }
    HEAP32[$0 + 24 >> 2] = $4_1;
    HEAP32[$0 + 12 >> 2] = $0;
    HEAP32[$0 + 8 >> 2] = $0;
    return;
   }
   $1_1 = HEAP32[$4_1 + 8 >> 2];
   HEAP32[$1_1 + 12 >> 2] = $0;
   HEAP32[$4_1 + 8 >> 2] = $0;
   HEAP32[$0 + 24 >> 2] = 0;
   HEAP32[$0 + 12 >> 2] = $4_1;
   HEAP32[$0 + 8 >> 2] = $1_1;
  }
 }
 
 function $1773($0) {
  var $1_1 = 0;
  $1_1 = HEAP32[6668];
  $0 = $1_1 + ($0 + 3 & -4) | 0;
  if (($0 | 0) <= -1) {
   HEAP32[5216] = 48;
   return -1;
  }
  label$2 : {
   if ($0 >>> 0 <= __wasm_memory_size() << 16 >>> 0) {
    break label$2
   }
   if (fimport$27($0 | 0)) {
    break label$2
   }
   HEAP32[5216] = 48;
   return -1;
  }
  HEAP32[6668] = $0;
  return $1_1;
 }
 
 function $1775($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1) {
  var $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18 = 0, $19_1 = 0, $20 = 0, $21_1 = 0;
  $9_1 = global$0 - 128 | 0;
  global$0 = $9_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$828($5_1, $6_1, $7_1, $8_1, 0, 0, 0, 0)) {
      break label$3
     }
     $11_1 = $1777($5_1, $6_1, $7_1, $8_1);
     $19_1 = $4_1 >>> 16 | 0;
     $14_1 = $19_1 & 32767;
     if (($14_1 | 0) == 32767) {
      break label$3
     }
     if ($11_1) {
      break label$2
     }
    }
    $824($9_1 + 16 | 0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1);
    $4_1 = HEAP32[$9_1 + 16 >> 2];
    $3 = HEAP32[$9_1 + 20 >> 2];
    $2_1 = HEAP32[$9_1 + 24 >> 2];
    $1_1 = HEAP32[$9_1 + 28 >> 2];
    $834($9_1, $4_1, $3, $2_1, $1_1, $4_1, $3, $2_1, $1_1);
    $3 = HEAP32[$9_1 + 8 >> 2];
    $4_1 = HEAP32[$9_1 + 12 >> 2];
    $7_1 = HEAP32[$9_1 >> 2];
    $8_1 = HEAP32[$9_1 + 4 >> 2];
    break label$1;
   }
   $10_1 = $4_1 & 65535 | $14_1 << 16;
   $13_1 = $10_1;
   $12_1 = $3;
   $15_1 = $7_1;
   $18 = $8_1 >>> 16 & 32767;
   $11_1 = $8_1 & 65535 | $18 << 16;
   if (($828($1_1, $2_1, $12_1, $10_1, $5_1, $6_1, $7_1, $11_1) | 0) <= 0) {
    if ($828($1_1, $2_1, $12_1, $13_1, $5_1, $6_1, $15_1, $11_1)) {
     $7_1 = $1_1;
     $8_1 = $2_1;
     break label$1;
    }
    $824($9_1 + 112 | 0, $1_1, $2_1, $3, $4_1, 0, 0, 0, 0);
    $3 = HEAP32[$9_1 + 120 >> 2];
    $4_1 = HEAP32[$9_1 + 124 >> 2];
    $7_1 = HEAP32[$9_1 + 112 >> 2];
    $8_1 = HEAP32[$9_1 + 116 >> 2];
    break label$1;
   }
   if ($14_1) {
    $8_1 = $2_1;
    $7_1 = $1_1;
   } else {
    $824($9_1 + 96 | 0, $1_1, $2_1, $12_1, $13_1, 0, 0, 0, 1081540608);
    $7_1 = HEAP32[$9_1 + 108 >> 2];
    $13_1 = $7_1;
    $12_1 = HEAP32[$9_1 + 104 >> 2];
    $14_1 = ($7_1 >>> 16 | 0) + -120 | 0;
    $8_1 = HEAP32[$9_1 + 100 >> 2];
    $7_1 = HEAP32[$9_1 + 96 >> 2];
   }
   if (!$18) {
    $824($9_1 + 80 | 0, $5_1, $6_1, $15_1, $11_1, 0, 0, 0, 1081540608);
    $5_1 = HEAP32[$9_1 + 92 >> 2];
    $11_1 = $5_1;
    $15_1 = HEAP32[$9_1 + 88 >> 2];
    $18 = ($11_1 >>> 16 | 0) + -120 | 0;
    $6_1 = HEAP32[$9_1 + 84 >> 2];
    $5_1 = HEAP32[$9_1 + 80 >> 2];
   }
   $21_1 = $15_1;
   $10_1 = $15_1;
   $15_1 = $12_1 - $10_1 | 0;
   $13_1 = $13_1 & 65535 | 65536;
   $20 = $11_1 & 65535 | 65536;
   $11_1 = ($6_1 | 0) == ($8_1 | 0) & $7_1 >>> 0 < $5_1 >>> 0 | $8_1 >>> 0 < $6_1 >>> 0;
   $10_1 = ($13_1 - ($20 + ($12_1 >>> 0 < $10_1 >>> 0) | 0) | 0) - ($15_1 >>> 0 < $11_1 >>> 0) | 0;
   $16_1 = $15_1 - $11_1 | 0;
   $17_1 = ($10_1 | 0) > -1 ? 1 : ($10_1 | 0) >= -1 ? ($16_1 >>> 0 <= 4294967295 ? 0 : 1) : 0;
   $15_1 = $7_1 - $5_1 | 0;
   $11_1 = $8_1 - (($7_1 >>> 0 < $5_1 >>> 0) + $6_1 | 0) | 0;
   if (($14_1 | 0) > ($18 | 0)) {
    while (1) {
     label$11 : {
      if ($17_1 & 1) {
       if (!($15_1 | $16_1 | ($10_1 | $11_1))) {
        $824($9_1 + 32 | 0, $1_1, $2_1, $3, $4_1, 0, 0, 0, 0);
        $3 = HEAP32[$9_1 + 40 >> 2];
        $4_1 = HEAP32[$9_1 + 44 >> 2];
        $7_1 = HEAP32[$9_1 + 32 >> 2];
        $8_1 = HEAP32[$9_1 + 36 >> 2];
        break label$1;
       }
       $7_1 = $16_1;
       $17_1 = $10_1 << 1 | $7_1 >>> 31;
       $16_1 = $7_1 << 1;
       $10_1 = $17_1;
       $17_1 = 0;
       $7_1 = $11_1 >>> 31 | 0;
       break label$11;
      }
      $10_1 = 0;
      $11_1 = $8_1;
      $16_1 = $8_1 >>> 31 | 0;
      $15_1 = $7_1;
      $7_1 = $12_1;
      $17_1 = $13_1 << 1 | $7_1 >>> 31;
      $7_1 = $7_1 << 1;
     }
     $12_1 = $7_1 | $16_1;
     $8_1 = $12_1;
     $7_1 = $21_1;
     $16_1 = $8_1 - $7_1 | 0;
     $13_1 = $10_1 | $17_1;
     $10_1 = $13_1 - (($8_1 >>> 0 < $7_1 >>> 0) + $20 | 0) | 0;
     $7_1 = $15_1;
     $17_1 = $11_1 << 1 | $7_1 >>> 31;
     $7_1 = $7_1 << 1;
     $8_1 = $17_1;
     $11_1 = ($6_1 | 0) == ($8_1 | 0) & $7_1 >>> 0 < $5_1 >>> 0 | $8_1 >>> 0 < $6_1 >>> 0;
     $10_1 = $10_1 - ($16_1 >>> 0 < $11_1 >>> 0) | 0;
     $16_1 = $16_1 - $11_1 | 0;
     $17_1 = ($10_1 | 0) > -1 ? 1 : ($10_1 | 0) >= -1 ? ($16_1 >>> 0 <= 4294967295 ? 0 : 1) : 0;
     $15_1 = $7_1 - $5_1 | 0;
     $11_1 = $8_1 - (($7_1 >>> 0 < $5_1 >>> 0) + $6_1 | 0) | 0;
     $14_1 = $14_1 + -1 | 0;
     if (($14_1 | 0) > ($18 | 0)) {
      continue
     }
     break;
    };
    $14_1 = $18;
   }
   label$14 : {
    if (!$17_1) {
     break label$14
    }
    $7_1 = $15_1;
    $12_1 = $16_1;
    $8_1 = $11_1;
    $13_1 = $10_1;
    if ($7_1 | $12_1 | ($8_1 | $10_1)) {
     break label$14
    }
    $824($9_1 + 48 | 0, $1_1, $2_1, $3, $4_1, 0, 0, 0, 0);
    $3 = HEAP32[$9_1 + 56 >> 2];
    $4_1 = HEAP32[$9_1 + 60 >> 2];
    $7_1 = HEAP32[$9_1 + 48 >> 2];
    $8_1 = HEAP32[$9_1 + 52 >> 2];
    break label$1;
   }
   if (($13_1 | 0) == 65535 & $12_1 >>> 0 <= 4294967295 | $13_1 >>> 0 < 65535) {
    while (1) {
     $3 = $8_1 >>> 31 | 0;
     $1_1 = 0;
     $14_1 = $14_1 + -1 | 0;
     $10_1 = $8_1 << 1 | $7_1 >>> 31;
     $7_1 = $7_1 << 1;
     $8_1 = $10_1;
     $17_1 = $13_1 << 1 | $12_1 >>> 31;
     $12_1 = $12_1 << 1 | $3;
     $1_1 = $1_1 | $17_1;
     $13_1 = $1_1;
     if (($1_1 | 0) == 65536 & $12_1 >>> 0 < 0 | $1_1 >>> 0 < 65536) {
      continue
     }
     break;
    }
   }
   $1_1 = $19_1 & 32768;
   if (($14_1 | 0) <= 0) {
    $824($9_1 - -64 | 0, $7_1, $8_1, $12_1, $13_1 & 65535 | ($1_1 | $14_1 + 120) << 16, 0, 0, 0, 1065811968);
    $3 = HEAP32[$9_1 + 72 >> 2];
    $4_1 = HEAP32[$9_1 + 76 >> 2];
    $7_1 = HEAP32[$9_1 + 64 >> 2];
    $8_1 = HEAP32[$9_1 + 68 >> 2];
    break label$1;
   }
   $3 = $12_1;
   $4_1 = $13_1 & 65535 | ($1_1 | $14_1) << 16;
  }
  HEAP32[$0 >> 2] = $7_1;
  HEAP32[$0 + 4 >> 2] = $8_1;
  HEAP32[$0 + 8 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $4_1;
  global$0 = $9_1 + 128 | 0;
 }
 
 function $1776($0) {
  var $1_1 = 0.0;
  $1_1 = 1.0;
  label$1 : {
   if (($0 | 0) >= 1024) {
    $1_1 = 8988465674311579538646525.0e283;
    if (($0 | 0) < 2047) {
     $0 = $0 + -1023 | 0;
     break label$1;
    }
    $1_1 = infinity;
    $0 = (($0 | 0) < 3069 ? $0 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($0 | 0) > -1023) {
    break label$1
   }
   $1_1 = 2.2250738585072014e-308;
   if (($0 | 0) > -2045) {
    $0 = $0 + 1022 | 0;
    break label$1;
   }
   $1_1 = 0.0;
   $0 = (($0 | 0) > -3066 ? $0 : -3066) + 2044 | 0;
  }
  wasm2js_scratch_store_i32(0, 0);
  wasm2js_scratch_store_i32(1, $0 + 1023 << 20);
  return $1_1 * +wasm2js_scratch_load_f64();
 }
 
 function $1777($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0;
  $5_1 = $3 & 65535;
  $3 = $3 >>> 16 & 32767;
  label$1 : {
   if (($3 | 0) != 32767) {
    $4_1 = 4;
    if ($3) {
     break label$1
    }
    return $0 | $2_1 | ($1_1 | $5_1) ? 3 : 2;
   }
   $4_1 = !($0 | $2_1 | ($1_1 | $5_1));
  }
  return $4_1;
 }
 
 function $1778($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  if ($2_1 >>> 0 >= 8192) {
   fimport$28($0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $0;
  }
  $4_1 = $0 + $2_1 | 0;
  label$2 : {
   if (!(($0 ^ $1_1) & 3)) {
    label$4 : {
     if (($2_1 | 0) < 1) {
      $2_1 = $0;
      break label$4;
     }
     if (!($0 & 3)) {
      $2_1 = $0;
      break label$4;
     }
     $2_1 = $0;
     while (1) {
      HEAP8[$2_1 | 0] = HEAPU8[$1_1 | 0];
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if ($2_1 >>> 0 >= $4_1 >>> 0) {
       break label$4
      }
      if ($2_1 & 3) {
       continue
      }
      break;
     };
    }
    $3 = $4_1 & -4;
    label$8 : {
     if ($3 >>> 0 < 64) {
      break label$8
     }
     $5_1 = $3 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$2_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
      HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
      HEAP32[$2_1 + 12 >> 2] = HEAP32[$1_1 + 12 >> 2];
      HEAP32[$2_1 + 16 >> 2] = HEAP32[$1_1 + 16 >> 2];
      HEAP32[$2_1 + 20 >> 2] = HEAP32[$1_1 + 20 >> 2];
      HEAP32[$2_1 + 24 >> 2] = HEAP32[$1_1 + 24 >> 2];
      HEAP32[$2_1 + 28 >> 2] = HEAP32[$1_1 + 28 >> 2];
      HEAP32[$2_1 + 32 >> 2] = HEAP32[$1_1 + 32 >> 2];
      HEAP32[$2_1 + 36 >> 2] = HEAP32[$1_1 + 36 >> 2];
      HEAP32[$2_1 + 40 >> 2] = HEAP32[$1_1 + 40 >> 2];
      HEAP32[$2_1 + 44 >> 2] = HEAP32[$1_1 + 44 >> 2];
      HEAP32[$2_1 + 48 >> 2] = HEAP32[$1_1 + 48 >> 2];
      HEAP32[$2_1 + 52 >> 2] = HEAP32[$1_1 + 52 >> 2];
      HEAP32[$2_1 + 56 >> 2] = HEAP32[$1_1 + 56 >> 2];
      HEAP32[$2_1 + 60 >> 2] = HEAP32[$1_1 + 60 >> 2];
      $1_1 = $1_1 - -64 | 0;
      $2_1 = $2_1 - -64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue
      }
      break;
     };
    }
    if ($2_1 >>> 0 >= $3 >>> 0) {
     break label$2
    }
    while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $3 >>> 0) {
      continue
     }
     break;
    };
    break label$2;
   }
   if ($4_1 >>> 0 < 4) {
    $2_1 = $0;
    break label$2;
   }
   $3 = $4_1 + -4 | 0;
   if ($3 >>> 0 < $0 >>> 0) {
    $2_1 = $0;
    break label$2;
   }
   $2_1 = $0;
   while (1) {
    HEAP8[$2_1 | 0] = HEAPU8[$1_1 | 0];
    HEAP8[$2_1 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
    HEAP8[$2_1 + 2 | 0] = HEAPU8[$1_1 + 2 | 0];
    HEAP8[$2_1 + 3 | 0] = HEAPU8[$1_1 + 3 | 0];
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $3 >>> 0) {
     continue
    }
    break;
   };
  }
  if ($2_1 >>> 0 < $4_1 >>> 0) {
   while (1) {
    HEAP8[$2_1 | 0] = HEAPU8[$1_1 | 0];
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($4_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
  return $0;
 }
 
 function $1779($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3 = $0 + $2_1 | 0;
   HEAP8[$3 + -1 | 0] = $1_1;
   HEAP8[$0 | 0] = $1_1;
   if ($2_1 >>> 0 < 3) {
    break label$1
   }
   HEAP8[$3 + -2 | 0] = $1_1;
   HEAP8[$0 + 1 | 0] = $1_1;
   HEAP8[$3 + -3 | 0] = $1_1;
   HEAP8[$0 + 2 | 0] = $1_1;
   if ($2_1 >>> 0 < 7) {
    break label$1
   }
   HEAP8[$3 + -4 | 0] = $1_1;
   HEAP8[$0 + 3 | 0] = $1_1;
   if ($2_1 >>> 0 < 9) {
    break label$1
   }
   $3 = 0 - $0 & 3;
   $4_1 = $3 + $0 | 0;
   $1_1 = Math_imul($1_1 & 255, 16843009);
   HEAP32[$4_1 >> 2] = $1_1;
   $2_1 = $2_1 - $3 & -4;
   $3 = $2_1 + $4_1 | 0;
   HEAP32[$3 + -4 >> 2] = $1_1;
   if ($2_1 >>> 0 < 9) {
    break label$1
   }
   HEAP32[$4_1 + 8 >> 2] = $1_1;
   HEAP32[$4_1 + 4 >> 2] = $1_1;
   HEAP32[$3 + -8 >> 2] = $1_1;
   HEAP32[$3 + -12 >> 2] = $1_1;
   if ($2_1 >>> 0 < 25) {
    break label$1
   }
   HEAP32[$4_1 + 24 >> 2] = $1_1;
   HEAP32[$4_1 + 20 >> 2] = $1_1;
   HEAP32[$4_1 + 16 >> 2] = $1_1;
   HEAP32[$4_1 + 12 >> 2] = $1_1;
   HEAP32[$3 + -16 >> 2] = $1_1;
   HEAP32[$3 + -20 >> 2] = $1_1;
   HEAP32[$3 + -24 >> 2] = $1_1;
   HEAP32[$3 + -28 >> 2] = $1_1;
   $6_1 = $4_1 & 4 | 24;
   $2_1 = $2_1 - $6_1 | 0;
   if ($2_1 >>> 0 < 32) {
    break label$1
   }
   $3 = $1_1;
   $5_1 = $1_1;
   $1_1 = $4_1 + $6_1 | 0;
   while (1) {
    HEAP32[$1_1 + 24 >> 2] = $5_1;
    HEAP32[$1_1 + 28 >> 2] = $3;
    HEAP32[$1_1 + 16 >> 2] = $5_1;
    HEAP32[$1_1 + 20 >> 2] = $3;
    HEAP32[$1_1 + 8 >> 2] = $5_1;
    HEAP32[$1_1 + 12 >> 2] = $3;
    HEAP32[$1_1 >> 2] = $5_1;
    HEAP32[$1_1 + 4 >> 2] = $3;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function $1780($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0;
  label$1 : {
   if (($0 | 0) == ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    if ($1_1 + $2_1 >>> 0 > $0 >>> 0) {
     $4_1 = $0 + $2_1 | 0;
     if ($4_1 >>> 0 > $1_1 >>> 0) {
      break label$2
     }
    }
    $1778($0, $1_1, $2_1);
    return;
   }
   $3 = ($0 ^ $1_1) & 3;
   label$4 : {
    label$5 : {
     if ($0 >>> 0 < $1_1 >>> 0) {
      if ($3) {
       break label$4
      }
      if (!($0 & 3)) {
       break label$5
      }
      while (1) {
       if (!$2_1) {
        break label$1
       }
       HEAP8[$0 | 0] = HEAPU8[$1_1 | 0];
       $1_1 = $1_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $0 = $0 + 1 | 0;
       if ($0 & 3) {
        continue
       }
       break;
      };
      break label$5;
     }
     label$10 : {
      if ($3) {
       break label$10
      }
      if ($4_1 & 3) {
       while (1) {
        if (!$2_1) {
         break label$1
        }
        $2_1 = $2_1 + -1 | 0;
        $3 = $2_1 + $0 | 0;
        HEAP8[$3 | 0] = HEAPU8[$1_1 + $2_1 | 0];
        if ($3 & 3) {
         continue
        }
        break;
       }
      }
      if ($2_1 >>> 0 <= 3) {
       break label$10
      }
      while (1) {
       $2_1 = $2_1 + -4 | 0;
       HEAP32[$2_1 + $0 >> 2] = HEAP32[$1_1 + $2_1 >> 2];
       if ($2_1 >>> 0 > 3) {
        continue
       }
       break;
      };
     }
     if (!$2_1) {
      break label$1
     }
     while (1) {
      $2_1 = $2_1 + -1 | 0;
      HEAP8[$2_1 + $0 | 0] = HEAPU8[$1_1 + $2_1 | 0];
      if ($2_1) {
       continue
      }
      break;
     };
     break label$1;
    }
    if ($2_1 >>> 0 <= 3) {
     break label$4
    }
    $3 = $2_1;
    while (1) {
     HEAP32[$0 >> 2] = HEAP32[$1_1 >> 2];
     $1_1 = $1_1 + 4 | 0;
     $0 = $0 + 4 | 0;
     $3 = $3 + -4 | 0;
     if ($3 >>> 0 > 3) {
      continue
     }
     break;
    };
    $2_1 = $2_1 & 3;
   }
   if (!$2_1) {
    break label$1
   }
   while (1) {
    HEAP8[$0 | 0] = HEAPU8[$1_1 | 0];
    $0 = $0 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue
    }
    break;
   };
  }
 }
 
 function $1781($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  if (!HEAP32[6665]) {
   HEAP32[6666] = $1_1;
   HEAP32[6665] = $0;
  }
 }
 
 function $1782() {
  return global$0 | 0;
 }
 
 function $1783($0) {
  $0 = $0 | 0;
  $0 = global$0 - $0 & -16;
  global$0 = $0;
  return $0 | 0;
 }
 
 function $1784($0) {
  $0 = $0 | 0;
  global$0 = $0;
 }
 
 function $1785($0) {
  $0 = $0 | 0;
  return __wasm_memory_grow($0 | 0) | 0;
 }
 
 function $1786($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[$0]($1_1) | 0;
 }
 
 function $1787($0, $1_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[$0]($1_1);
 }
 
 function $1789($0, $1_1, $2_1, $3) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[$0]($1_1, $2_1, $3);
 }
 
 function $1790($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[$0]($1_1, $2_1, $3, $4_1) | 0;
 }
 
 function $1791($0) {
  $0 = $0 | 0;
  FUNCTION_TABLE[$0]();
 }
 
 function $1792($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  FUNCTION_TABLE[$0]($1_1, $2_1);
 }
 
 function $1794($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  FUNCTION_TABLE[$0]($1_1, $2_1, $3, $4_1);
 }
 
 function $1795($0, $1_1, $2_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[$0]($1_1, $2_1) | 0;
 }
 
 function $1798($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  return FUNCTION_TABLE[$0]($1_1, $2_1, $3, $4_1, $5_1, $6_1) | 0;
 }
 
 function $1799($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return FUNCTION_TABLE[$0]($1_1, $2_1, $3, $4_1, $5_1) | 0;
 }
 
 function $1800($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  return FUNCTION_TABLE[$0]($1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1) | 0;
 }
 
 function $1801($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  return FUNCTION_TABLE[$0]($1_1, $2_1, $3, $4_1, $5_1, $6_1) | 0;
 }
 
 function $1803($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = +$5_1;
  return FUNCTION_TABLE[$0]($1_1, $2_1, $3, $4_1, $5_1) | 0;
 }
 
 function $1805($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[$0]($1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) | 0;
 }
 
 function $1807($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  FUNCTION_TABLE[$0]($1_1, $2_1, $3, $4_1, $5_1, $6_1);
 }
 
 function $1808($0, $1_1, $2_1, $3, $4_1, $5_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  FUNCTION_TABLE[$0]($1_1, $2_1, $3, $4_1, $5_1);
 }
 
 function $1810($0, $1_1, $2_1, $3, $4_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $0 = FUNCTION_TABLE[$0]($1_1, $2_1, $3, $4_1) | 0;
  fimport$29(i64toi32_i32$HIGH_BITS | 0);
  return $0 | 0;
 }
 
 function $1813($0, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0 = $0 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  return FUNCTION_TABLE[$0]($1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) | 0;
 }
 
 function legalfunc$wasm2js_scratch_store_i64($0, $1_1) {
  legalimport$wasm2js_scratch_store_i64($0 | 0, $1_1 | 0);
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $4_1 = $2_1 >>> 16 | 0;
  $5_1 = $0 >>> 16 | 0;
  $9_1 = Math_imul($4_1, $5_1);
  $6_1 = $2_1 & 65535;
  $7_1 = $0 & 65535;
  $8_1 = Math_imul($6_1, $7_1);
  $5_1 = ($8_1 >>> 16 | 0) + Math_imul($5_1, $6_1) | 0;
  $4_1 = ($5_1 & 65535) + Math_imul($4_1, $7_1) | 0;
  $0 = (Math_imul($1_1, $2_1) + $9_1 | 0) + Math_imul($0, $3) + ($5_1 >>> 16) + ($4_1 >>> 16) | 0;
  $1_1 = $8_1 & 65535 | $4_1 << 16;
  i64toi32_i32$HIGH_BITS = $0;
  return $1_1;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$9 : {
          label$11 : {
           $4_1 = $1_1;
           if ($4_1) {
            $3 = $2_1;
            if (!$3) {
             break label$11
            }
            break label$9;
           }
           $1_1 = $0;
           $0 = ($0 >>> 0) / ($2_1 >>> 0) | 0;
           legalfunc$wasm2js_scratch_store_i64($1_1 - Math_imul($0, $2_1) | 0, 0);
           i64toi32_i32$HIGH_BITS = 0;
           return $0;
          }
          if (!$0) {
           break label$7
          }
          break label$6;
         }
         $6_1 = $3 + -1 | 0;
         if (!($6_1 & $3)) {
          break label$5
         }
         $6_1 = (Math_clz32($3) + 33 | 0) - Math_clz32($4_1) | 0;
         $7_1 = 0 - $6_1 | 0;
         break label$3;
        }
        $0 = ($4_1 >>> 0) / 0 | 0;
        legalfunc$wasm2js_scratch_store_i64(0, $4_1 - Math_imul($0, 0) | 0);
        i64toi32_i32$HIGH_BITS = 0;
        return $0;
       }
       $3 = 32 - Math_clz32($4_1) | 0;
       if ($3 >>> 0 < 31) {
        break label$4
       }
       break label$2;
      }
      legalfunc$wasm2js_scratch_store_i64($0 & $6_1, 0);
      if (($3 | 0) == 1) {
       break label$1
      }
      if ($3) {
       $3 = 31 - Math_clz32($3 + -1 ^ $3) | 0
      } else {
       $3 = 32
      }
      $2_1 = $3 & 31;
      if (32 <= ($3 & 63) >>> 0) {
       $4_1 = 0;
       $0 = $1_1 >>> $2_1 | 0;
      } else {
       $4_1 = $1_1 >>> $2_1 | 0;
       $0 = ((1 << $2_1) - 1 & $1_1) << 32 - $2_1 | $0 >>> $2_1;
      }
      i64toi32_i32$HIGH_BITS = $4_1;
      return $0;
     }
     $6_1 = $3 + 1 | 0;
     $7_1 = 63 - $3 | 0;
    }
    $3 = $1_1;
    $4_1 = $6_1 & 63;
    $5_1 = $4_1 & 31;
    if (32 <= $4_1 >>> 0) {
     $4_1 = 0;
     $5_1 = $3 >>> $5_1 | 0;
    } else {
     $4_1 = $3 >>> $5_1 | 0;
     $5_1 = ((1 << $5_1) - 1 & $3) << 32 - $5_1 | $0 >>> $5_1;
    }
    $7_1 = $7_1 & 63;
    $3 = $7_1 & 31;
    if (32 <= $7_1 >>> 0) {
     $1_1 = $0 << $3;
     $0 = 0;
    } else {
     $1_1 = (1 << $3) - 1 & $0 >>> 32 - $3 | $1_1 << $3;
     $0 = $0 << $3;
    }
    if ($6_1) {
     $3 = -1;
     $7_1 = $2_1 + -1 | 0;
     if ($7_1 >>> 0 < 4294967295) {
      $3 = 0
     }
     while (1) {
      $8_1 = $5_1 << 1 | $1_1 >>> 31;
      $9_1 = $8_1;
      $4_1 = $4_1 << 1 | $5_1 >>> 31;
      $8_1 = $3 - ($4_1 + ($7_1 >>> 0 < $8_1 >>> 0) | 0) >> 31;
      $10_1 = $2_1 & $8_1;
      $5_1 = $9_1 - $10_1 | 0;
      $4_1 = $4_1 - ($9_1 >>> 0 < $10_1 >>> 0) | 0;
      $1_1 = $1_1 << 1 | $0 >>> 31;
      $0 = $11_1 | $0 << 1;
      $8_1 = $8_1 & 1;
      $11_1 = $8_1;
      $6_1 = $6_1 + -1 | 0;
      if ($6_1) {
       continue
      }
      break;
     };
    }
    legalfunc$wasm2js_scratch_store_i64($5_1, $4_1);
    i64toi32_i32$HIGH_BITS = $1_1 << 1 | $0 >>> 31;
    return $8_1 | $0 << 1;
   }
   legalfunc$wasm2js_scratch_store_i64($0, $1_1);
   $0 = 0;
   $1_1 = 0;
  }
  i64toi32_i32$HIGH_BITS = $1_1;
  return $0;
 }
 
 function __wasm_i64_mul($0, $1_1, $2_1, $3) {
  $0 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1_1, $2_1, $3);
  return $0;
 }
 
 function __wasm_i64_udiv($0, $1_1, $2_1) {
  return _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1_1, $2_1);
 }
 
 function __wasm_rotl_i32($0, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = $1_1 & 31;
  $3 = (-1 >>> $2_1 & $0) << $2_1;
  $2_1 = $0;
  $0 = 0 - $1_1 & 31;
  return $3 | ($2_1 & -1 << $0) >>> $0;
 }
 
 // EMSCRIPTEN_END_FUNCS;
 FUNCTION_TABLE[1] = $55;
 FUNCTION_TABLE[2] = $58;
 FUNCTION_TABLE[3] = $59;
 FUNCTION_TABLE[4] = $5;
 FUNCTION_TABLE[5] = $198;
 FUNCTION_TABLE[6] = $203;
 FUNCTION_TABLE[7] = $1639;
 FUNCTION_TABLE[8] = $4;
 FUNCTION_TABLE[9] = $39;
 FUNCTION_TABLE[10] = $46;
 FUNCTION_TABLE[11] = $1637;
 FUNCTION_TABLE[12] = $39;
 FUNCTION_TABLE[13] = $62;
 FUNCTION_TABLE[14] = $16;
 FUNCTION_TABLE[15] = $66;
 FUNCTION_TABLE[16] = $64;
 FUNCTION_TABLE[17] = $67;
 FUNCTION_TABLE[18] = $65;
 FUNCTION_TABLE[19] = $68;
 FUNCTION_TABLE[20] = $732;
 FUNCTION_TABLE[21] = $735;
 FUNCTION_TABLE[22] = $733;
 FUNCTION_TABLE[23] = $736;
 FUNCTION_TABLE[24] = $734;
 FUNCTION_TABLE[25] = $737;
 FUNCTION_TABLE[26] = $675;
 FUNCTION_TABLE[27] = $677;
 FUNCTION_TABLE[28] = $676;
 FUNCTION_TABLE[29] = $678;
 FUNCTION_TABLE[30] = $715;
 FUNCTION_TABLE[31] = $717;
 FUNCTION_TABLE[32] = $716;
 FUNCTION_TABLE[33] = $718;
 FUNCTION_TABLE[34] = $63;
 FUNCTION_TABLE[35] = $69;
 FUNCTION_TABLE[36] = $244;
 FUNCTION_TABLE[37] = $37;
 FUNCTION_TABLE[38] = $70;
 FUNCTION_TABLE[39] = $81;
 FUNCTION_TABLE[40] = $657;
 FUNCTION_TABLE[41] = $657;
 FUNCTION_TABLE[42] = $658;
 FUNCTION_TABLE[43] = $83;
 FUNCTION_TABLE[44] = $663;
 FUNCTION_TABLE[45] = $86;
 FUNCTION_TABLE[46] = $665;
 FUNCTION_TABLE[47] = $88;
 FUNCTION_TABLE[48] = $221;
 FUNCTION_TABLE[49] = $225;
 FUNCTION_TABLE[50] = $226;
 FUNCTION_TABLE[51] = $55;
 FUNCTION_TABLE[52] = $260;
 FUNCTION_TABLE[53] = $261;
 FUNCTION_TABLE[54] = $331;
 FUNCTION_TABLE[55] = $217;
 FUNCTION_TABLE[56] = $227;
 FUNCTION_TABLE[57] = $233;
 FUNCTION_TABLE[58] = $250;
 FUNCTION_TABLE[59] = $254;
 FUNCTION_TABLE[60] = $39;
 FUNCTION_TABLE[61] = $62;
 FUNCTION_TABLE[62] = $339;
 FUNCTION_TABLE[63] = $340;
 FUNCTION_TABLE[64] = $342;
 FUNCTION_TABLE[65] = $343;
 FUNCTION_TABLE[66] = $344;
 FUNCTION_TABLE[67] = $411;
 FUNCTION_TABLE[68] = $349;
 FUNCTION_TABLE[69] = $355;
 FUNCTION_TABLE[70] = $360;
 FUNCTION_TABLE[71] = $363;
 FUNCTION_TABLE[72] = $401;
 FUNCTION_TABLE[73] = $422;
 FUNCTION_TABLE[74] = $425;
 FUNCTION_TABLE[75] = $39;
 FUNCTION_TABLE[76] = $62;
 FUNCTION_TABLE[77] = $343;
 FUNCTION_TABLE[78] = $344;
 FUNCTION_TABLE[79] = $343;
 FUNCTION_TABLE[80] = $344;
 FUNCTION_TABLE[81] = $55;
 FUNCTION_TABLE[82] = $58;
 FUNCTION_TABLE[83] = $553;
 FUNCTION_TABLE[84] = $331;
 FUNCTION_TABLE[85] = $539;
 FUNCTION_TABLE[86] = $39;
 FUNCTION_TABLE[87] = $46;
 FUNCTION_TABLE[88] = $39;
 FUNCTION_TABLE[89] = $62;
 FUNCTION_TABLE[90] = $567;
 FUNCTION_TABLE[91] = $568;
 FUNCTION_TABLE[92] = $55;
 FUNCTION_TABLE[93] = $260;
 FUNCTION_TABLE[94] = $595;
 FUNCTION_TABLE[95] = $331;
 FUNCTION_TABLE[96] = $217;
 FUNCTION_TABLE[97] = $569;
 FUNCTION_TABLE[98] = $575;
 FUNCTION_TABLE[99] = $585;
 FUNCTION_TABLE[100] = $589;
 FUNCTION_TABLE[101] = $39;
 FUNCTION_TABLE[102] = $62;
 FUNCTION_TABLE[103] = $652;
 FUNCTION_TABLE[104] = $653;
 FUNCTION_TABLE[105] = $655;
 FUNCTION_TABLE[106] = $656;
 FUNCTION_TABLE[107] = $662;
 FUNCTION_TABLE[108] = $664;
 FUNCTION_TABLE[109] = $664;
 FUNCTION_TABLE[110] = $666;
 FUNCTION_TABLE[111] = $667;
 FUNCTION_TABLE[112] = $244;
 FUNCTION_TABLE[113] = $37;
 FUNCTION_TABLE[114] = $655;
 FUNCTION_TABLE[115] = $656;
 FUNCTION_TABLE[116] = $657;
 FUNCTION_TABLE[117] = $657;
 FUNCTION_TABLE[118] = $669;
 FUNCTION_TABLE[119] = $662;
 FUNCTION_TABLE[120] = $672;
 FUNCTION_TABLE[121] = $664;
 FUNCTION_TABLE[122] = $673;
 FUNCTION_TABLE[123] = $664;
 FUNCTION_TABLE[124] = $675;
 FUNCTION_TABLE[125] = $677;
 FUNCTION_TABLE[126] = $676;
 FUNCTION_TABLE[127] = $678;
 FUNCTION_TABLE[128] = $715;
 FUNCTION_TABLE[129] = $717;
 FUNCTION_TABLE[130] = $716;
 FUNCTION_TABLE[131] = $718;
 FUNCTION_TABLE[132] = $649;
 FUNCTION_TABLE[133] = $738;
 FUNCTION_TABLE[134] = $648;
 FUNCTION_TABLE[135] = $651;
 FUNCTION_TABLE[136] = $648;
 FUNCTION_TABLE[137] = $651;
 FUNCTION_TABLE[138] = $747;
 FUNCTION_TABLE[139] = $750;
 FUNCTION_TABLE[140] = $751;
 FUNCTION_TABLE[141] = $657;
 FUNCTION_TABLE[142] = $752;
 FUNCTION_TABLE[143] = $753;
 FUNCTION_TABLE[144] = $767;
 FUNCTION_TABLE[145] = $785;
 FUNCTION_TABLE[146] = $786;
 FUNCTION_TABLE[147] = $787;
 FUNCTION_TABLE[148] = $789;
 FUNCTION_TABLE[149] = $790;
 FUNCTION_TABLE[150] = $795;
 FUNCTION_TABLE[151] = $796;
 FUNCTION_TABLE[152] = $797;
 FUNCTION_TABLE[153] = $799;
 FUNCTION_TABLE[154] = $800;
 FUNCTION_TABLE[155] = $785;
 FUNCTION_TABLE[156] = $801;
 FUNCTION_TABLE[157] = $802;
 FUNCTION_TABLE[158] = $804;
 FUNCTION_TABLE[159] = $805;
 FUNCTION_TABLE[160] = $795;
 FUNCTION_TABLE[161] = $806;
 FUNCTION_TABLE[162] = $802;
 FUNCTION_TABLE[163] = $807;
 FUNCTION_TABLE[164] = $808;
 FUNCTION_TABLE[165] = $848;
 FUNCTION_TABLE[166] = $873;
 FUNCTION_TABLE[167] = $874;
 FUNCTION_TABLE[168] = $877;
 FUNCTION_TABLE[169] = $1769;
 FUNCTION_TABLE[170] = $4;
 FUNCTION_TABLE[171] = $1366;
 FUNCTION_TABLE[172] = $1372;
 FUNCTION_TABLE[173] = $1445;
 FUNCTION_TABLE[174] = $1448;
 FUNCTION_TABLE[175] = $1452;
 FUNCTION_TABLE[176] = $1455;
 FUNCTION_TABLE[177] = $1458;
 FUNCTION_TABLE[178] = $1461;
 FUNCTION_TABLE[179] = $1463;
 FUNCTION_TABLE[180] = $1465;
 FUNCTION_TABLE[181] = $1467;
 FUNCTION_TABLE[182] = $1469;
 FUNCTION_TABLE[183] = $1471;
 FUNCTION_TABLE[184] = $1473;
 FUNCTION_TABLE[185] = $1475;
 FUNCTION_TABLE[186] = $1477;
 FUNCTION_TABLE[187] = $1353;
 FUNCTION_TABLE[188] = $1358;
 FUNCTION_TABLE[189] = $1370;
 FUNCTION_TABLE[190] = $1390;
 FUNCTION_TABLE[191] = $1391;
 FUNCTION_TABLE[192] = $1392;
 FUNCTION_TABLE[193] = $1393;
 FUNCTION_TABLE[194] = $1394;
 FUNCTION_TABLE[195] = $1395;
 FUNCTION_TABLE[196] = $1386;
 FUNCTION_TABLE[197] = $1396;
 FUNCTION_TABLE[198] = $1397;
 FUNCTION_TABLE[199] = $1398;
 FUNCTION_TABLE[200] = $1244;
 FUNCTION_TABLE[201] = $1402;
 FUNCTION_TABLE[202] = $1403;
 FUNCTION_TABLE[203] = $1406;
 FUNCTION_TABLE[204] = $1409;
 FUNCTION_TABLE[205] = $1410;
 FUNCTION_TABLE[206] = $657;
 FUNCTION_TABLE[207] = $1413;
 FUNCTION_TABLE[208] = $1415;
 FUNCTION_TABLE[209] = $1428;
 FUNCTION_TABLE[210] = $1429;
 FUNCTION_TABLE[211] = $1432;
 FUNCTION_TABLE[212] = $1433;
 FUNCTION_TABLE[213] = $1434;
 FUNCTION_TABLE[214] = $1436;
 FUNCTION_TABLE[215] = $1440;
 FUNCTION_TABLE[216] = $1430;
 FUNCTION_TABLE[217] = $1431;
 FUNCTION_TABLE[218] = $74;
 FUNCTION_TABLE[219] = $73;
 FUNCTION_TABLE[220] = $1435;
 FUNCTION_TABLE[221] = $1437;
 FUNCTION_TABLE[222] = $1441;
 FUNCTION_TABLE[223] = $39;
 FUNCTION_TABLE[224] = $46;
 FUNCTION_TABLE[225] = $46;
 FUNCTION_TABLE[226] = $1375;
 FUNCTION_TABLE[227] = $1377;
 FUNCTION_TABLE[228] = $1378;
 FUNCTION_TABLE[229] = $1379;
 FUNCTION_TABLE[230] = $1380;
 FUNCTION_TABLE[231] = $1382;
 FUNCTION_TABLE[232] = $1383;
 FUNCTION_TABLE[233] = $1385;
 FUNCTION_TABLE[234] = $1386;
 FUNCTION_TABLE[235] = $1387;
 FUNCTION_TABLE[236] = $1388;
 FUNCTION_TABLE[237] = $1389;
 FUNCTION_TABLE[238] = $46;
 FUNCTION_TABLE[239] = $1399;
 FUNCTION_TABLE[240] = $1399;
 FUNCTION_TABLE[241] = $1400;
 FUNCTION_TABLE[242] = $329;
 FUNCTION_TABLE[243] = $329;
 FUNCTION_TABLE[244] = $1401;
 FUNCTION_TABLE[245] = $329;
 FUNCTION_TABLE[246] = $46;
 FUNCTION_TABLE[247] = $1416;
 FUNCTION_TABLE[248] = $1418;
 FUNCTION_TABLE[249] = $1400;
 FUNCTION_TABLE[250] = $657;
 FUNCTION_TABLE[251] = $657;
 FUNCTION_TABLE[252] = $1420;
 FUNCTION_TABLE[253] = $195;
 FUNCTION_TABLE[254] = $46;
 FUNCTION_TABLE[255] = $1422;
 FUNCTION_TABLE[256] = $1424;
 FUNCTION_TABLE[257] = $1400;
 FUNCTION_TABLE[258] = $657;
 FUNCTION_TABLE[259] = $657;
 FUNCTION_TABLE[260] = $1426;
 FUNCTION_TABLE[261] = $195;
 FUNCTION_TABLE[262] = $46;
 FUNCTION_TABLE[263] = $46;
 FUNCTION_TABLE[264] = $39;
 FUNCTION_TABLE[265] = $46;
 FUNCTION_TABLE[266] = $912;
 FUNCTION_TABLE[267] = $913;
 FUNCTION_TABLE[268] = $916;
 FUNCTION_TABLE[269] = $39;
 FUNCTION_TABLE[270] = $46;
 FUNCTION_TABLE[271] = $917;
 FUNCTION_TABLE[272] = $918;
 FUNCTION_TABLE[273] = $922;
 FUNCTION_TABLE[274] = $46;
 FUNCTION_TABLE[275] = $923;
 FUNCTION_TABLE[276] = $935;
 FUNCTION_TABLE[277] = $944;
 FUNCTION_TABLE[278] = $947;
 FUNCTION_TABLE[279] = $950;
 FUNCTION_TABLE[280] = $950;
 FUNCTION_TABLE[281] = $956;
 FUNCTION_TABLE[282] = $959;
 FUNCTION_TABLE[283] = $964;
 FUNCTION_TABLE[284] = $967;
 FUNCTION_TABLE[285] = $970;
 FUNCTION_TABLE[286] = $46;
 FUNCTION_TABLE[287] = $979;
 FUNCTION_TABLE[288] = $985;
 FUNCTION_TABLE[289] = $990;
 FUNCTION_TABLE[290] = $992;
 FUNCTION_TABLE[291] = $994;
 FUNCTION_TABLE[292] = $994;
 FUNCTION_TABLE[293] = $998;
 FUNCTION_TABLE[294] = $1000;
 FUNCTION_TABLE[295] = $1004;
 FUNCTION_TABLE[296] = $1006;
 FUNCTION_TABLE[297] = $1008;
 FUNCTION_TABLE[298] = $46;
 FUNCTION_TABLE[299] = $1016;
 FUNCTION_TABLE[300] = $1021;
 FUNCTION_TABLE[301] = $1028;
 FUNCTION_TABLE[302] = $1029;
 FUNCTION_TABLE[303] = $1030;
 FUNCTION_TABLE[304] = $1031;
 FUNCTION_TABLE[305] = $1039;
 FUNCTION_TABLE[306] = $1040;
 FUNCTION_TABLE[307] = $46;
 FUNCTION_TABLE[308] = $1041;
 FUNCTION_TABLE[309] = $1046;
 FUNCTION_TABLE[310] = $1052;
 FUNCTION_TABLE[311] = $1053;
 FUNCTION_TABLE[312] = $1054;
 FUNCTION_TABLE[313] = $1055;
 FUNCTION_TABLE[314] = $1061;
 FUNCTION_TABLE[315] = $1062;
 FUNCTION_TABLE[316] = $39;
 FUNCTION_TABLE[317] = $46;
 FUNCTION_TABLE[318] = $1067;
 FUNCTION_TABLE[319] = $1068;
 FUNCTION_TABLE[320] = $1069;
 FUNCTION_TABLE[321] = $1070;
 FUNCTION_TABLE[322] = $1072;
 FUNCTION_TABLE[323] = $1074;
 FUNCTION_TABLE[324] = $1077;
 FUNCTION_TABLE[325] = $1443;
 FUNCTION_TABLE[326] = $1450;
 FUNCTION_TABLE[327] = $1456;
 FUNCTION_TABLE[328] = $1470;
 FUNCTION_TABLE[329] = $1474;
 FUNCTION_TABLE[330] = $1462;
 FUNCTION_TABLE[331] = $1466;
 FUNCTION_TABLE[332] = $39;
 FUNCTION_TABLE[333] = $46;
 FUNCTION_TABLE[334] = $1067;
 FUNCTION_TABLE[335] = $1092;
 FUNCTION_TABLE[336] = $1093;
 FUNCTION_TABLE[337] = $1099;
 FUNCTION_TABLE[338] = $1101;
 FUNCTION_TABLE[339] = $1103;
 FUNCTION_TABLE[340] = $1106;
 FUNCTION_TABLE[341] = $1446;
 FUNCTION_TABLE[342] = $1453;
 FUNCTION_TABLE[343] = $1459;
 FUNCTION_TABLE[344] = $1472;
 FUNCTION_TABLE[345] = $1476;
 FUNCTION_TABLE[346] = $1464;
 FUNCTION_TABLE[347] = $1468;
 FUNCTION_TABLE[348] = $1486;
 FUNCTION_TABLE[349] = $1485;
 FUNCTION_TABLE[350] = $1119;
 FUNCTION_TABLE[351] = $1486;
 FUNCTION_TABLE[352] = $1485;
 FUNCTION_TABLE[353] = $1124;
 FUNCTION_TABLE[354] = $46;
 FUNCTION_TABLE[355] = $1131;
 FUNCTION_TABLE[356] = $1131;
 FUNCTION_TABLE[357] = $1134;
 FUNCTION_TABLE[358] = $1134;
 FUNCTION_TABLE[359] = $1134;
 FUNCTION_TABLE[360] = $1135;
 FUNCTION_TABLE[361] = $657;
 FUNCTION_TABLE[362] = $1136;
 FUNCTION_TABLE[363] = $1136;
 FUNCTION_TABLE[364] = $46;
 FUNCTION_TABLE[365] = $1131;
 FUNCTION_TABLE[366] = $1131;
 FUNCTION_TABLE[367] = $1134;
 FUNCTION_TABLE[368] = $1134;
 FUNCTION_TABLE[369] = $1134;
 FUNCTION_TABLE[370] = $1135;
 FUNCTION_TABLE[371] = $657;
 FUNCTION_TABLE[372] = $1136;
 FUNCTION_TABLE[373] = $1136;
 FUNCTION_TABLE[374] = $46;
 FUNCTION_TABLE[375] = $1137;
 FUNCTION_TABLE[376] = $1137;
 FUNCTION_TABLE[377] = $1134;
 FUNCTION_TABLE[378] = $1138;
 FUNCTION_TABLE[379] = $1138;
 FUNCTION_TABLE[380] = $1141;
 FUNCTION_TABLE[381] = $657;
 FUNCTION_TABLE[382] = $1136;
 FUNCTION_TABLE[383] = $1136;
 FUNCTION_TABLE[384] = $46;
 FUNCTION_TABLE[385] = $1137;
 FUNCTION_TABLE[386] = $1137;
 FUNCTION_TABLE[387] = $1134;
 FUNCTION_TABLE[388] = $1138;
 FUNCTION_TABLE[389] = $1138;
 FUNCTION_TABLE[390] = $1141;
 FUNCTION_TABLE[391] = $657;
 FUNCTION_TABLE[392] = $1136;
 FUNCTION_TABLE[393] = $1136;
 FUNCTION_TABLE[394] = $46;
 FUNCTION_TABLE[395] = $1142;
 FUNCTION_TABLE[396] = $1158;
 FUNCTION_TABLE[397] = $46;
 FUNCTION_TABLE[398] = $1177;
 FUNCTION_TABLE[399] = $1189;
 FUNCTION_TABLE[400] = $46;
 FUNCTION_TABLE[401] = $1206;
 FUNCTION_TABLE[402] = $1215;
 FUNCTION_TABLE[403] = $46;
 FUNCTION_TABLE[404] = $1216;
 FUNCTION_TABLE[405] = $1224;
 FUNCTION_TABLE[406] = $46;
 FUNCTION_TABLE[407] = $1229;
 FUNCTION_TABLE[408] = $1230;
 FUNCTION_TABLE[409] = $244;
 FUNCTION_TABLE[410] = $46;
 FUNCTION_TABLE[411] = $1229;
 FUNCTION_TABLE[412] = $1235;
 FUNCTION_TABLE[413] = $244;
 FUNCTION_TABLE[414] = $39;
 FUNCTION_TABLE[415] = $62;
 FUNCTION_TABLE[416] = $39;
 FUNCTION_TABLE[417] = $46;
 FUNCTION_TABLE[418] = $1638;
 FUNCTION_TABLE[419] = $1642;
 FUNCTION_TABLE[420] = $182;
 FUNCTION_TABLE[421] = $1643;
 FUNCTION_TABLE[422] = $1643;
 FUNCTION_TABLE[423] = $39;
 FUNCTION_TABLE[424] = $46;
 FUNCTION_TABLE[425] = $4;
 FUNCTION_TABLE[426] = $4;
 FUNCTION_TABLE[427] = $1645;
 FUNCTION_TABLE[428] = $46;
 FUNCTION_TABLE[429] = $1647;
 FUNCTION_TABLE[430] = $1667;
 FUNCTION_TABLE[431] = $1664;
 FUNCTION_TABLE[432] = $1650;
 FUNCTION_TABLE[433] = $46;
 FUNCTION_TABLE[434] = $1666;
 FUNCTION_TABLE[435] = $1663;
 FUNCTION_TABLE[436] = $1651;
 FUNCTION_TABLE[437] = $46;
 FUNCTION_TABLE[438] = $1665;
 FUNCTION_TABLE[439] = $1660;
 FUNCTION_TABLE[440] = $1653;
 FUNCTION_TABLE[441] = $46;
 FUNCTION_TABLE[442] = $1655;
 FUNCTION_TABLE[443] = $1741;
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new global.Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = newHEAP8;
   HEAP8 = new global.Int8Array(newBuffer);
   HEAP16 = new global.Int16Array(newBuffer);
   HEAP32 = new global.Int32Array(newBuffer);
   HEAPU8 = new global.Uint8Array(newBuffer);
   HEAPU16 = new global.Uint16Array(newBuffer);
   HEAPU32 = new global.Uint32Array(newBuffer);
   HEAPF32 = new global.Float32Array(newBuffer);
   HEAPF64 = new global.Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = newBuffer;
  }
  return oldPages;
 }
 
 return {
  "__wasm_call_ctors": $1, 
  "malloc": $1768, 
  "main": $537, 
  "__errno_location": $748, 
  "setThrew": $1781, 
  "_ZSt18uncaught_exceptionv": $646, 
  "free": $1769, 
  "__getTypeName": $1669, 
  "__embind_register_native_and_builtin_types": $1670, 
  "stackSave": $1782, 
  "stackAlloc": $1783, 
  "stackRestore": $1784, 
  "__growWasmMemory": $1785, 
  "dynCall_ii": $1786, 
  "dynCall_vi": $1787, 
  "dynCall_iiii": $198, 
  "dynCall_viii": $1789, 
  "dynCall_iiiii": $1790, 
  "dynCall_v": $1791, 
  "dynCall_vii": $1792, 
  "dynCall_viijii": $1807, 
  "dynCall_viiii": $1794, 
  "dynCall_iii": $1795, 
  "dynCall_i": $331, 
  "dynCall_jiji": $1810, 
  "dynCall_iidiiii": $1798, 
  "dynCall_iiiiii": $1799, 
  "dynCall_iiiiiiiii": $1800, 
  "dynCall_iiiiiii": $1801, 
  "dynCall_iiiiij": $1801, 
  "dynCall_iiiiid": $1803, 
  "dynCall_iiiiijj": $1800, 
  "dynCall_iiiiiiii": $1805, 
  "dynCall_iiiiiijj": $1813, 
  "dynCall_viiiiii": $1807, 
  "dynCall_viiiii": $1808
 };
}

var writeSegment = (
    function(mem) {
      var _mem = new Uint8Array(mem);
      return function(offset, s) {
        var bytes, i;
        if (typeof Buffer === 'undefined') {
          bytes = atob(s);
          for (i = 0; i < bytes.length; i++)
            _mem[offset + i] = bytes.charCodeAt(i);
        } else {
          bytes = Buffer.from(s, 'base64');
          for (i = 0; i < bytes.length; i++)
            _mem[offset + i] = bytes[i];
        }
      }
    }
  )(wasmMemory.buffer);
writeSegment(1028, "PAUAAAgAAAAJAAAACgAAANCa0YDQsNC5AEVuZADQlNC+0LHQsNCy0LjQkNGB0YLRgNC+0L3QsNCy0YIAQWRkQXN0cm9uYXV0ANCU0L7QsdCw0LLQuNCf0LvQsNC90LXRgtCwAEFkZFBsYW5ldADQn9C10L3RgdC40L7QvdC40YDQsNC50JDRgdGC0YDQvtC90LDQstGCAFJldGlyZUFzdHJvbmF1dADQmNC30YHQu9C10LTQstCw0LnQn9C70LDQvdC10YLQsABFeHBsb3JlUGxhbmV0ANCe0YLRh9C10YIAUmVwb3J0ANCT0YDQtdGI0L3QsCDQutC+0LzQsNC90LTQsABKU1Rlc3RFbmdpbmUAYWN0aW9uADEySlNUZXN0RW5naW5lADdJRW5naW5lAFRIAAArBQAAfEgAABwFAAA0BQAAAAAAADQFAAALAAAADAAAAA0AAABAAAAAAAAAAJQGAAAOAAAADwAAADgAAAD4////lAYAABAAAAARAAAAwP///8D///+UBgAAEgAAABMAAABoBQAAzAUAAAgGAAAcBgAAMAYAAEQGAAD0BQAA4AUAAJAFAAB8BQAAQAAAAAAAAABAFQAAFAAAABUAAAA4AAAA+P///0AVAAAWAAAAFwAAAMD////A////QBUAABgAAAAZAAAAQAAAAAAAAADQEwAAGgAAABsAAADA////wP///9ATAAAcAAAAHQAAADgAAAAAAAAAYBQAAB4AAAAfAAAAyP///8j///9gFAAAIAAAACEAAABOU3QzX18yMThiYXNpY19zdHJpbmdzdHJlYW1JY05TXzExY2hhcl90cmFpdHNJY0VFTlNfOWFsbG9jYXRvckljRUVFRQAAAAB8SAAATAYAAEAVAAAAAAAAJAcAACIAAAAjAAAAJAAAACUAAAAmAAAAJwAAACgAAAApAAAAKgAAACsAAAAsAAAALQAAAC4AAAAvAAAATlN0M19fMjE1YmFzaWNfc3RyaW5nYnVmSWNOU18xMWNoYXJfdHJhaXRzSWNFRU5TXzlhbGxvY2F0b3JJY0VFRUUAAAB8SAAA4AYAAFwTAABhbGxvY2F0b3I8VD46OmFsbG9jYXRlKHNpemVfdCBuKSAnbicgZXhjZWVkcyBtYXhpbXVtIHN1cHBvcnRlZCBzaXplAFAxMkpTVGVzdEVuZ2luZQA0SQAAdAcAAAAAAAA8BQAAUEsxMkpTVGVzdEVuZ2luZQAAAAA0SQAAlAcAAAEAAAA8BQAAaWkAdgB2aQCEBwAAtAkAABgQAAAoDwAAaWlpaWkAAABUCAAAhAcAAFQIAABOU3QzX18yMTJiYXNpY19zdHJpbmdJY05TXzExY2hhcl90cmFpdHNJY0VFTlNfOWFsbG9jYXRvckljRUVFRQBOU3QzX18yMjFfX2Jhc2ljX3N0cmluZ19jb21tb25JTGIxRUVFAAAAAFRIAAAjCAAA2EgAAOQHAAAAAAAAAQAAAEwIAAAAAAAAaWlpaQAgANCY0LzQtdGC0L4g0L3QsCDQsNGB0YLRgNC+0L3QsNCy0YIg0L3QtSDQvNC+0LbQtSDQtNCwINCx0YrQtNC1INC/0YDQsNC30L3QviEKAAAAAAAAAABECQAAMAAAADEAAAAyAAAA0J3QtSDQvNC+0LbQtSDQtNCwINGB0LUg0LfQsNC00LDQtNC1INC90LXQs9Cw0YLQuNCy0L3QsCDRgdGC0L7QudC90L7RgdGCINC30LAg0LrQuNGB0LvQvtGA0L7QtCEKADlBc3Ryb25hdXQAVEgAADkJAAAAAAAAtAkAADcAAAA4AAAAOQAAADoAAAA7AAAAQXN0cm9uYXV0UmVwb3NpdG9yeQAxOUFzdHJvbmF1dFJlcG9zaXRvcnkAMTFJUmVwb3NpdG9yeUk5QXN0cm9uYXV0RQBUSAAAkgkAAHxIAAB8CQAArAkAAGFsbG9jYXRvcjxUPjo6YWxsb2NhdGUoc2l6ZV90IG4pICduJyBleGNlZWRzIG1heGltdW0gc3VwcG9ydGVkIHNpemUAUDE5QXN0cm9uYXV0UmVwb3NpdG9yeQAANEkAAAQKAAAAAAAAtAkAAFBLMTlBc3Ryb25hdXRSZXBvc2l0b3J5ADRJAAAsCgAAAQAAALQJAAAcCgAAAAAAAKwJAAALAAAACwAAAAsAAAA8AAAAPQAAAAAAAACQCgAAPgAAAD8AAAA4QmFja3BhY2sAAABUSAAAhAoAAAAAAAC4CgAAQAAAAEEAAABCAAAAOUJpb2xvZ2lzdAAAfEgAAKwKAABECQAAAAAAAPwNAABEAAAARQAAAEYAAABHAAAASAAAAEkAAABKAAAA0LHQuNC+0LvQvtCzAGJpb2xvZ2lzdADQs9C10L7QtNC10LfQuNGB0YIAZ2VvZGVzaXN0ANC80LXRgtC10L7RgNC+0LvQvtCzAG1ldGVvcm9sb2dpc3QA0J3Rj9C80LAg0YLQsNC60YrQsiDQstC40LQg0LDRgdGC0YDQvtC90LDQstGCIQoAINCx0LXRiNC1INC00L7QsdCw0LLQtdC9LCDQtNC70YrQttC90L7RgdGCIC0gANCj0YHQv9C10YjQvdC+INC00L7QsdCw0LLQtdC90LAg0L/Qu9Cw0L3QtdGC0LAgLSAA0KPRgdC/0LXRiNC90L4g0L/QtdC90YHQuNC+0L3QuNGA0LDQvSDQsNGB0YLRgNC+0L3QsNCy0YIgLSAA0J3Rj9C80LAg0YLQsNC60YrQsiDQsNGB0YLRgNC+0L3QsNCy0YIuLi4KAC9kZXYvdXJhbmRvbQDQndGP0LzQsCDQs9C+0LTQvdC4INCw0YHRgtGA0L7QvdCw0LLRgtC4INC30LAg0LXQutGB0L/QtdC00LjRhtC40Y8uLi4KANCd0Y/QvNCwINC/0LvQsNC90LXRgtCwINGBINGC0LDQutC+0LLQsCDQuNC80LUhANCV0LrRgdC/0LXQtNC40YbQuNGPINC90LAg0L/Qu9Cw0L3QtdGC0LDRgtCwIAAg0LfQsNCy0YrRgNGI0LghINCX0LDQs9C40L3QsNC70Lgg0LDRgdGC0YDQvtC90LDQstGC0Lg6IAAg0L/Qu9Cw0L3QtdGC0Lgg0LHRj9GF0LAg0LjQt9GB0LvQtdC00LLQsNC90LghCgDQmNC90YTQvtGA0LzQsNGG0LjRjyDQt9CwINCw0YHRgtGA0L7QvdCw0LLRgtC40YLQtToKANC90Y/QvNCwACMjINCY0LzQtTogACMjINCe0YHRgtCw0LLQsNGJINC60LjRgdC70L7RgNC+0LQ6IAAjIyDQn9GA0LXQtNC80LXRgtC4OiAAMTBDb250cm9sbGVyADExSUNvbnRyb2xsZXIAAAAAVEgAAOMNAAB8SAAA1g0AAPQNAAAAAAAA9A0AAAsAAAALAAAACwAAAAsAAAALAAAASwAAAEwAAABhbGxvY2F0b3I8VD46OmFsbG9jYXRlKHNpemVfdCBuKSAnbicgZXhjZWVkcyBtYXhpbXVtIHN1cHBvcnRlZCBzaXplACwgAAAAAAAAlA4AADAAAABNAAAATgAAADlHZW9kZXNpc3QAAHxIAACIDgAARAkAAAAAAADEDgAAMAAAAE8AAABQAAAAMTNNZXRlb3JvbG9naXN0AHxIAAC0DgAARAkAACAtINGD0LHQuNGCL9C40LfRh9C10LfQvdCw0LsATWlzc2lvbgAAAAAAAAAAKA8AAFUAAABWAAAAVwAAADdNaXNzaW9uADhJTWlzc2lvbgAAVEgAABUPAAB8SAAADA8AACAPAABQN01pc3Npb24AAAA0SQAANA8AAAAAAAAoDwAAUEs3TWlzc2lvbgAANEkAAFAPAAABAAAAKA8AAEAPAAAAAAAAIA8AAAsAAABYAAAAWQAAACAASW52YWxpZCBuYW1lIQoAAAAAAAAAALAPAABaAAAAWwAAADZQbGFuZXQAVEgAAKgPAAAAAAAAGBAAAGAAAABhAAAAYgAAAGMAAABkAAAAUGxhbmV0UmVwb3NpdG9yeQAxNlBsYW5ldFJlcG9zaXRvcnkAMTFJUmVwb3NpdG9yeUk2UGxhbmV0RQAAVEgAAPgPAAB8SAAA5Q8AABAQAABhbGxvY2F0b3I8VD46OmFsbG9jYXRlKHNpemVfdCBuKSAnbicgZXhjZWVkcyBtYXhpbXVtIHN1cHBvcnRlZCBzaXplAFAxNlBsYW5ldFJlcG9zaXRvcnkANEkAAGgQAAAAAAAAGBAAAFBLMTZQbGFuZXRSZXBvc2l0b3J5AAAAADRJAACMEAAAAQAAABgQAAB8EAAAAAAAABAQAAALAAAACwAAAAsAAABlAAAAZgAAAAAAAABcEwAAZwAAAGgAAAAkAAAAJQAAAGkAAABqAAAAKAAAACkAAAAqAAAAawAAACwAAABsAAAALgAAAG0AAAAAAAAAmBMAAG4AAABvAAAAcAAAAHEAAAByAAAAcwAAAHQAAAB1AAAAdgAAAHcAAAB4AAAAeQAAAHoAAAB7AAAACAAAAAAAAADQEwAAGgAAABsAAAD4////+P///9ATAAAcAAAAHQAAAGARAAB0EQAACAAAAAAAAAAYFAAAfAAAAH0AAAD4////+P///xgUAAB+AAAAfwAAAJARAACkEQAABAAAAAAAAABgFAAAHgAAAB8AAAD8/////P///2AUAAAgAAAAIQAAAMARAADUEQAABAAAAAAAAACoFAAAgAAAAIEAAAD8/////P///6gUAACCAAAAgwAAAPARAAAEEgAADAAAAAAAAABAFQAAFAAAABUAAAAEAAAA+P///0AVAAAWAAAAFwAAAPT////0////QBUAABgAAAAZAAAAIBIAAMwUAADgFAAA9BQAAAgVAABIEgAANBIAAAAAAACQEgAAhAAAAIUAAABOU3QzX18yOGlvc19iYXNlRQAAAFRIAAB8EgAAAAAAANQSAACGAAAAhwAAAE5TdDNfXzI5YmFzaWNfaW9zSWNOU18xMWNoYXJfdHJhaXRzSWNFRUVFAAAAfEgAAKgSAACQEgAAAAAAABwTAACIAAAAiQAAAE5TdDNfXzI5YmFzaWNfaW9zSXdOU18xMWNoYXJfdHJhaXRzSXdFRUVFAAAAfEgAAPASAACQEgAATlN0M19fMjE1YmFzaWNfc3RyZWFtYnVmSWNOU18xMWNoYXJfdHJhaXRzSWNFRUVFAAAAAFRIAAAoEwAATlN0M19fMjE1YmFzaWNfc3RyZWFtYnVmSXdOU18xMWNoYXJfdHJhaXRzSXdFRUVFAAAAAFRIAABkEwAATlN0M19fMjEzYmFzaWNfaXN0cmVhbUljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRQAA2EgAAKATAAAAAAAAAQAAANQSAAAD9P//TlN0M19fMjEzYmFzaWNfaXN0cmVhbUl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRQAA2EgAAOgTAAAAAAAAAQAAABwTAAAD9P//TlN0M19fMjEzYmFzaWNfb3N0cmVhbUljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRQAA2EgAADAUAAAAAAAAAQAAANQSAAAD9P//TlN0M19fMjEzYmFzaWNfb3N0cmVhbUl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRQAA2EgAAHgUAAAAAAAAAQAAABwTAAAD9P//DAAAAAAAAADQEwAAGgAAABsAAAD0////9P///9ATAAAcAAAAHQAAAAQAAAAAAAAAYBQAAB4AAAAfAAAA/P////z///9gFAAAIAAAACEAAABOU3QzX18yMTRiYXNpY19pb3N0cmVhbUljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRQDYSAAAEBUAAAMAAAACAAAA0BMAAAIAAABgFAAAAggAAMhOAABYTwAA8E8AAAAAAADEFQAAZwAAAJEAAACSAAAAJQAAAGkAAABqAAAAKAAAACkAAAAqAAAAkwAAAJQAAACVAAAALgAAAG0AAABOU3QzX18yMTBfX3N0ZGluYnVmSWNFRQB8SAAArBUAAFwTAAB1bnN1cHBvcnRlZCBsb2NhbGUgZm9yIHN0YW5kYXJkIGlucHV0AAAAAAAAAFAWAABuAAAAlgAAAJcAAABxAAAAcgAAAHMAAAB0AAAAdQAAAHYAAACYAAAAmQAAAJoAAAB6AAAAewAAAE5TdDNfXzIxMF9fc3RkaW5idWZJd0VFAHxIAAA4FgAAmBMAAAAAAAC4FgAAZwAAAJsAAACcAAAAJQAAAGkAAABqAAAAnQAAACkAAAAqAAAAawAAACwAAABsAAAAngAAAJ8AAABOU3QzX18yMTFfX3N0ZG91dGJ1ZkljRUUAAAAAfEgAAJwWAABcEwAAAAAAACAXAABuAAAAoAAAAKEAAABxAAAAcgAAAHMAAACiAAAAdQAAAHYAAAB3AAAAeAAAAHkAAACjAAAApAAAAE5TdDNfXzIxMV9fc3Rkb3V0YnVmSXdFRQAAAAB8SAAABBcAAJgTAAAAAAAA/////////////////////////////////////////////////////////////////wABAgMEBQYHCAn/////////CgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiP///////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8AAQIEBwMGBQAAAAAAAAACAADAAwAAwAQAAMAFAADABgAAwAcAAMAIAADACQAAwAoAAMALAADADAAAwA0AAMAOAADADwAAwBAAAMARAADAEgAAwBMAAMAUAADAFQAAwBYAAMAXAADAGAAAwBkAAMAaAADAGwAAwBwAAMAdAADAHgAAwB8AAMAAAACzAQAAwwIAAMMDAADDBAAAwwUAAMMGAADDBwAAwwgAAMMJAADDCgAAwwsAAMMMAADDDQAA0w4AAMMPAADDAAAMuwEADMMCAAzDAwAMwwQADNNpbmZpbml0eQBuYW4AAAAAAAAAANF0ngBXnb0qgHBSD///PicKAAAAZAAAAOgDAAAQJwAAoIYBAEBCDwCAlpgAAOH1BRgAAAA1AAAAcQAAAGv////O+///kr///wAAAAAAAAAA3hIElQAAAAD///////////////9wGQAAFAAAAEMuVVRGLTg=");
writeSegment(6584, "hBk=");
writeSegment(6608, "TENfQUxM");
writeSegment(6624, "TENfQ1RZUEUAAAAATENfTlVNRVJJQwAATENfVElNRQAAAAAATENfQ09MTEFURQAATENfTU9ORVRBUlkATENfTUVTU0FHRVMATEFORwBDLlVURi04AFBPU0lYAE1VU0xfTE9DUEFUSAAALSsgICAwWDB4AChudWxsKQAAAAAAAAARAAoAERERAAAAAAUAAAAAAAAJAAAAAAsAAAAAAAAAABEADwoREREDCgcAARMJCwsAAAkGCwAACwAGEQAAABEREQ==");
writeSegment(6833, "CwAAAAAAAAAAEQAKChEREQAKAAACAAkLAAAACQALAAAL");
writeSegment(6891, "DA==");
writeSegment(6903, "DAAAAAAMAAAAAAkMAAAAAAAMAAAM");
writeSegment(6949, "Dg==");
writeSegment(6961, "DQAAAAQNAAAAAAkOAAAAAAAOAAAO");
writeSegment(7007, "EA==");
writeSegment(7019, "DwAAAAAPAAAAAAkQAAAAAAAQAAAQAAASAAAAEhIS");
writeSegment(7074, "EgAAABISEgAAAAAAAAk=");
writeSegment(7123, "Cw==");
writeSegment(7135, "CgAAAAAKAAAAAAkLAAAAAAALAAAL");
writeSegment(7181, "DA==");
writeSegment(7193, "DAAAAAAMAAAAAAkMAAAAAAAMAAAMAAAwMTIzNDU2Nzg5QUJDREVGLTBYKzBYIDBYLTB4KzB4IDB4AGluZgBJTkYAbmFuAE5BTgAu");
writeSegment(7308, "qA==");
writeSegment(7347, "//////8=");
writeSegment(7417, "Hg==");
writeSegment(7680, "AgACAAIAAgACAAIAAgACAAIAAyACIAIgAiACIAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAIAAgACAAFgBMAEwATABMAEwATABMAEwATABMAEwATABMAEwATACNgI2AjYCNgI2AjYCNgI2AjYCNgEwATABMAEwATABMAEwAjVCNUI1QjVCNUI1QjFCMUIxQjFCMUIxQjFCMUIxQjFCMUIxQjFCMUIxQjFCMUIxQjFCMUEwATABMAEwATABMAI1gjWCNYI1gjWCNYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGCMYIxgjGBMAEwATABMAC");
writeSegment(8192, "ECI=");
writeSegment(8724, "AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAAEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAAnAAAAKAAAACkAAAAqAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAANAAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAADsAAAA8AAAAPQAAAD4AAAA/AAAAQAAAAEEAAABCAAAAQwAAAEQAAABFAAAARgAAAEcAAABIAAAASQAAAEoAAABLAAAATAAAAE0AAABOAAAATwAAAFAAAABRAAAAUgAAAFMAAABUAAAAVQAAAFYAAABXAAAAWAAAAFkAAABaAAAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAQQAAAEIAAABDAAAARAAAAEUAAABGAAAARwAAAEgAAABJAAAASgAAAEsAAABMAAAATQAAAE4AAABPAAAAUAAAAFEAAABSAAAAUwAAAFQAAABVAAAAVgAAAFcAAABYAAAAWQAAAFoAAAB7AAAAfAAAAH0AAAB+AAAAfw==");
writeSegment(9744, "ICg=");
writeSegment(10276, "AQAAAAIAAAADAAAABAAAAAUAAAAGAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAA4AAAAPAAAAEAAAABEAAAASAAAAEwAAABQAAAAVAAAAFgAAABcAAAAYAAAAGQAAABoAAAAbAAAAHAAAAB0AAAAeAAAAHwAAACAAAAAhAAAAIgAAACMAAAAkAAAAJQAAACYAAAAnAAAAKAAAACkAAAAqAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAANAAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAADsAAAA8AAAAPQAAAD4AAAA/AAAAQAAAAGEAAABiAAAAYwAAAGQAAABlAAAAZgAAAGcAAABoAAAAaQAAAGoAAABrAAAAbAAAAG0AAABuAAAAbwAAAHAAAABxAAAAcgAAAHMAAAB0AAAAdQAAAHYAAAB3AAAAeAAAAHkAAAB6AAAAWwAAAFwAAABdAAAAXgAAAF8AAABgAAAAYQAAAGIAAABjAAAAZAAAAGUAAABmAAAAZwAAAGgAAABpAAAAagAAAGsAAABsAAAAbQAAAG4AAABvAAAAcAAAAHEAAAByAAAAcwAAAHQAAAB1AAAAdgAAAHcAAAB4AAAAeQAAAHoAAAB7AAAAfAAAAH0AAAB+AAAAfw==");
writeSegment(11296, "MDEyMzQ1Njc4OWFiY2RlZkFCQ0RFRnhYKy1wUGlJbk4AJXAAbABsbAAATAAlAAAAAAAlcAAAAAAlSTolTTolUyAlcCVIOiVNAAAAAAAAAAAlAAAAbQAAAC8AAAAlAAAAZAAAAC8AAAAlAAAAeQAAACUAAABZAAAALQAAACUAAABtAAAALQAAACUAAABkAAAAJQAAAEkAAAA6AAAAJQAAAE0AAAA6AAAAJQAAAFMAAAAgAAAAJQAAAHAAAAAAAAAAJQAAAEgAAAA6AAAAJQAAAE0=");
writeSegment(11520, "JQAAAEgAAAA6AAAAJQAAAE0AAAA6AAAAJQAAAFMAAAAlTGYAMDEyMzQ1Njc4OQAlLjBMZgBDAAAAAAAAqDIAALsAAAC8AAAAvQAAAAAAAAAIMwAAvgAAAL8AAAC9AAAAwAAAAMEAAADCAAAAwwAAAMQAAADFAAAAxgAAAMcAAAAAAAAAcDIAAMgAAADJAAAAvQAAAMoAAADLAAAAzAAAAM0AAADOAAAAzwAAANAAAAAAAAAAQDMAANEAAADSAAAAvQAAANMAAADUAAAA1QAAANYAAADXAAAAAAAAAGQzAADYAAAA2QAAAL0AAADaAAAA2wAAANwAAADdAAAA3gAAAHRydWUAAAAAdAAAAHIAAAB1AAAAZQAAAAAAAABmYWxzZQAAAGYAAABhAAAAbAAAAHMAAABlAAAAAAAAACVtLyVkLyV5AAAAACUAAABtAAAALwAAACUAAABkAAAALwAAACUAAAB5AAAAAAAAACVIOiVNOiVTAAAAACUAAABIAAAAOgAAACUAAABNAAAAOgAAACUAAABTAAAAAAAAACVhICViICVkICVIOiVNOiVTICVZAAAAACUAAABhAAAAIAAAACUAAABiAAAAIAAAACUAAABkAAAAIAAAACUAAABIAAAAOgAAACUAAABNAAAAOgAAACUAAABTAAAAIAAAACUAAABZAAAAAAAAACVJOiVNOiVTICVwACUAAABJAAAAOgAAACUAAABNAAAAOgAAACUAAABTAAAAIAAAACUAAABw");
writeSegment(12104, "cC8AAN8AAADgAAAAvQAAAE5TdDNfXzI2bG9jYWxlNWZhY2V0RQAAAHxIAABYLwAAnEQAAAAAAADwLwAA3wAAAOEAAAC9AAAA4gAAAOMAAADkAAAA5QAAAOYAAADnAAAA6AAAAOkAAADqAAAA6wAAAOwAAADtAAAATlN0M19fMjVjdHlwZUl3RUUATlN0M19fMjEwY3R5cGVfYmFzZUUAAFRIAADSLwAA2EgAAMAvAAAAAAAAAgAAAHAvAAACAAAA6C8AAAIAAAAAAAAAhDAAAN8AAADuAAAAvQAAAO8AAADwAAAA8QAAAPIAAADzAAAA9AAAAPUAAABOU3QzX18yN2NvZGVjdnRJY2MxMV9fbWJzdGF0ZV90RUUATlN0M19fMjEyY29kZWN2dF9iYXNlRQAAAABUSAAAYjAAANhIAABAMAAAAAAAAAIAAABwLwAAAgAAAHwwAAACAAAAAAAAAPgwAADfAAAA9gAAAL0AAAD3AAAA+AAAAPkAAAD6AAAA+wAAAPwAAAD9AAAATlN0M19fMjdjb2RlY3Z0SURzYzExX19tYnN0YXRlX3RFRQAA2EgAANQwAAAAAAAAAgAAAHAvAAACAAAAfDAAAAIAAAAAAAAAbDEAAN8AAAD+AAAAvQAAAP8AAAAAAQAAAQEAAAIBAAADAQAABAEAAAUBAABOU3QzX18yN2NvZGVjdnRJRGljMTFfX21ic3RhdGVfdEVFAADYSAAASDEAAAAAAAACAAAAcC8AAAIAAAB8MAAAAgAAAAAAAADgMQAA3wAAAAYBAAC9AAAA/wAAAAABAAABAQAAAgEAAAMBAAAEAQAABQEAAE5TdDNfXzIxNl9fbmFycm93X3RvX3V0ZjhJTG0zMkVFRQAAAHxIAAC8MQAAbDEAAAAAAABAMgAA3wAAAAcBAAC9AAAA/wAAAAABAAABAQAAAgEAAAMBAAAEAQAABQEAAE5TdDNfXzIxN19fd2lkZW5fZnJvbV91dGY4SUxtMzJFRUUAAHxIAAAcMgAAbDEAAE5TdDNfXzI3Y29kZWN2dEl3YzExX19tYnN0YXRlX3RFRQAAANhIAABMMgAAAAAAAAIAAABwLwAAAgAAAHwwAAACAAAATlN0M19fMjZsb2NhbGU1X19pbXBFAAAAfEgAAJAyAABwLwAATlN0M19fMjdjb2xsYXRlSWNFRQB8SAAAtDIAAHAvAABOU3QzX18yN2NvbGxhdGVJd0VFAHxIAADUMgAAcC8AAE5TdDNfXzI1Y3R5cGVJY0VFAAAA2EgAAPQyAAAAAAAAAgAAAHAvAAACAAAA6C8AAAIAAABOU3QzX18yOG51bXB1bmN0SWNFRQAAAAB8SAAAKDMAAHAvAABOU3QzX18yOG51bXB1bmN0SXdFRQAAAAB8SAAATDMAAHAvAAAAAAAAyDIAAAgBAAAJAQAAvQAAAAoBAAALAQAADAEAAAAAAADoMgAADQEAAA4BAAC9AAAADwEAABABAAARAQAAAAAAAIQ0AADfAAAAEgEAAL0AAAATAQAAFAEAABUBAAAWAQAAFwEAABgBAAAZAQAAGgEAABsBAAAcAQAAHQEAAE5TdDNfXzI3bnVtX2dldEljTlNfMTlpc3RyZWFtYnVmX2l0ZXJhdG9ySWNOU18xMWNoYXJfdHJhaXRzSWNFRUVFRUUATlN0M19fMjlfX251bV9nZXRJY0VFAE5TdDNfXzIxNF9fbnVtX2dldF9iYXNlRQAAVEgAAEo0AADYSAAANDQAAAAAAAABAAAAZDQAAAAAAADYSAAA8DMAAAAAAAACAAAAcC8AAAIAAABsNA==");
writeSegment(13480, "WDUAAN8AAAAeAQAAvQAAAB8BAAAgAQAAIQEAACIBAAAjAQAAJAEAACUBAAAmAQAAJwEAACgBAAApAQAATlN0M19fMjdudW1fZ2V0SXdOU18xOWlzdHJlYW1idWZfaXRlcmF0b3JJd05TXzExY2hhcl90cmFpdHNJd0VFRUVFRQBOU3QzX18yOV9fbnVtX2dldEl3RUUAAADYSAAAKDUAAAAAAAABAAAAZDQAAAAAAADYSAAA5DQAAAAAAAACAAAAcC8AAAIAAABANQ==");
writeSegment(13692, "QDYAAN8AAAAqAQAAvQAAACsBAAAsAQAALQEAAC4BAAAvAQAAMAEAADEBAAAyAQAATlN0M19fMjdudW1fcHV0SWNOU18xOW9zdHJlYW1idWZfaXRlcmF0b3JJY05TXzExY2hhcl90cmFpdHNJY0VFRUVFRQBOU3QzX18yOV9fbnVtX3B1dEljRUUATlN0M19fMjE0X19udW1fcHV0X2Jhc2VFAABUSAAABjYAANhIAADwNQAAAAAAAAEAAAAgNgAAAAAAANhIAACsNQAAAAAAAAIAAABwLwAAAgAAACg2");
writeSegment(13924, "CDcAAN8AAAAzAQAAvQAAADQBAAA1AQAANgEAADcBAAA4AQAAOQEAADoBAAA7AQAATlN0M19fMjdudW1fcHV0SXdOU18xOW9zdHJlYW1idWZfaXRlcmF0b3JJd05TXzExY2hhcl90cmFpdHNJd0VFRUVFRQBOU3QzX18yOV9fbnVtX3B1dEl3RUUAAADYSAAA2DYAAAAAAAABAAAAIDYAAAAAAADYSAAAlDYAAAAAAAACAAAAcC8AAAIAAADwNg==");
writeSegment(14124, "CDgAADwBAAA9AQAAvQAAAD4BAAA/AQAAQAEAAEEBAABCAQAAQwEAAEQBAAD4////CDgAAEUBAABGAQAARwEAAEgBAABJAQAASgEAAEsBAABOU3QzX18yOHRpbWVfZ2V0SWNOU18xOWlzdHJlYW1idWZfaXRlcmF0b3JJY05TXzExY2hhcl90cmFpdHNJY0VFRUVFRQBOU3QzX18yOXRpbWVfYmFzZUUAVEgAAME3AABOU3QzX18yMjBfX3RpbWVfZ2V0X2Nfc3RvcmFnZUljRUUAAABUSAAA3DcAANhIAAB8NwAAAAAAAAMAAABwLwAAAgAAANQ3AAACAAAAADgAAAAIAAAAAAAA9DgAAEwBAABNAQAAvQAAAE4BAABPAQAAUAEAAFEBAABSAQAAUwEAAFQBAAD4////9DgAAFUBAABWAQAAVwEAAFgBAABZAQAAWgEAAFsBAABOU3QzX18yOHRpbWVfZ2V0SXdOU18xOWlzdHJlYW1idWZfaXRlcmF0b3JJd05TXzExY2hhcl90cmFpdHNJd0VFRUVFRQBOU3QzX18yMjBfX3RpbWVfZ2V0X2Nfc3RvcmFnZUl3RUUAAFRIAADJOAAA2EgAAIQ4AAAAAAAAAwAAAHAvAAACAAAA1DcAAAIAAADsOAAAAAgAAAAAAACYOQAAXAEAAF0BAAC9AAAAXgEAAE5TdDNfXzI4dGltZV9wdXRJY05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRUVFAE5TdDNfXzIxMF9fdGltZV9wdXRFAAAAVEgAAHk5AADYSAAANDkAAAAAAAACAAAAcC8AAAIAAACQOQAAAAgAAAAAAAAYOgAAXwEAAGABAAC9AAAAYQEAAE5TdDNfXzI4dGltZV9wdXRJd05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRUVFAAAAANhIAADQOQAAAAAAAAIAAABwLwAAAgAAAJA5AAAACAAAAAAAAKw6AADfAAAAYgEAAL0AAABjAQAAZAEAAGUBAABmAQAAZwEAAGgBAABpAQAAagEAAGsBAABOU3QzX18yMTBtb25leXB1bmN0SWNMYjBFRUUATlN0M19fMjEwbW9uZXlfYmFzZUUAAAAAVEgAAIw6AADYSAAAcDoAAAAAAAACAAAAcC8AAAIAAACkOgAAAgAAAAAAAAAgOwAA3wAAAGwBAAC9AAAAbQEAAG4BAABvAQAAcAEAAHEBAAByAQAAcwEAAHQBAAB1AQAATlN0M19fMjEwbW9uZXlwdW5jdEljTGIxRUVFANhIAAAEOwAAAAAAAAIAAABwLwAAAgAAAKQ6AAACAAAAAAAAAJQ7AADfAAAAdgEAAL0AAAB3AQAAeAEAAHkBAAB6AQAAewEAAHwBAAB9AQAAfgEAAH8BAABOU3QzX18yMTBtb25leXB1bmN0SXdMYjBFRUUA2EgAAHg7AAAAAAAAAgAAAHAvAAACAAAApDoAAAIAAAAAAAAACDwAAN8AAACAAQAAvQAAAIEBAACCAQAAgwEAAIQBAACFAQAAhgEAAIcBAACIAQAAiQEAAE5TdDNfXzIxMG1vbmV5cHVuY3RJd0xiMUVFRQDYSAAA7DsAAAAAAAACAAAAcC8AAAIAAACkOgAAAgAAAAAAAACsPAAA3wAAAIoBAAC9AAAAiwEAAIwBAABOU3QzX18yOW1vbmV5X2dldEljTlNfMTlpc3RyZWFtYnVmX2l0ZXJhdG9ySWNOU18xMWNoYXJfdHJhaXRzSWNFRUVFRUUATlN0M19fMjExX19tb25leV9nZXRJY0VFAABUSAAAijwAANhIAABEPAAAAAAAAAIAAABwLwAAAgAAAKQ8");
writeSegment(15568, "UD0AAN8AAACNAQAAvQAAAI4BAACPAQAATlN0M19fMjltb25leV9nZXRJd05TXzE5aXN0cmVhbWJ1Zl9pdGVyYXRvckl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRUVFAE5TdDNfXzIxMV9fbW9uZXlfZ2V0SXdFRQAAVEgAAC49AADYSAAA6DwAAAAAAAACAAAAcC8AAAIAAABIPQ==");
writeSegment(15732, "9D0AAN8AAACQAQAAvQAAAJEBAACSAQAATlN0M19fMjltb25leV9wdXRJY05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckljTlNfMTFjaGFyX3RyYWl0c0ljRUVFRUVFAE5TdDNfXzIxMV9fbW9uZXlfcHV0SWNFRQAAVEgAANI9AADYSAAAjD0AAAAAAAACAAAAcC8AAAIAAADsPQ==");
writeSegment(15896, "mD4AAN8AAACTAQAAvQAAAJQBAACVAQAATlN0M19fMjltb25leV9wdXRJd05TXzE5b3N0cmVhbWJ1Zl9pdGVyYXRvckl3TlNfMTFjaGFyX3RyYWl0c0l3RUVFRUVFAE5TdDNfXzIxMV9fbW9uZXlfcHV0SXdFRQAAVEgAAHY+AADYSAAAMD4AAAAAAAACAAAAcC8AAAIAAACQPg==");
writeSegment(16060, "ED8AAN8AAACWAQAAvQAAAJcBAACYAQAAmQEAAE5TdDNfXzI4bWVzc2FnZXNJY0VFAE5TdDNfXzIxM21lc3NhZ2VzX2Jhc2VFAAAAAFRIAADtPgAA2EgAANg+AAAAAAAAAgAAAHAvAAACAAAACD8AAAIAAAAAAAAAaD8AAN8AAACaAQAAvQAAAJsBAACcAQAAnQEAAE5TdDNfXzI4bWVzc2FnZXNJd0VFAAAAANhIAABQPwAAAAAAAAIAAABwLwAAAgAAAAg/AAACAAAAU3VuZGF5AE1vbmRheQBUdWVzZGF5AFdlZG5lc2RheQBUaHVyc2RheQBGcmlkYXkAU2F0dXJkYXkAU3VuAE1vbgBUdWUAV2VkAFRodQBGcmkAU2F0AAAAAFMAAAB1AAAAbgAAAGQAAABhAAAAeQAAAAAAAABNAAAAbwAAAG4AAABkAAAAYQAAAHkAAAAAAAAAVAAAAHUAAABlAAAAcwAAAGQAAABhAAAAeQAAAAAAAABXAAAAZQAAAGQAAABuAAAAZQAAAHMAAABkAAAAYQAAAHkAAAAAAAAAVAAAAGgAAAB1AAAAcgAAAHMAAABkAAAAYQAAAHkAAAAAAAAARgAAAHIAAABpAAAAZAAAAGEAAAB5AAAAAAAAAFMAAABhAAAAdAAAAHUAAAByAAAAZAAAAGEAAAB5AAAAAAAAAFMAAAB1AAAAbgAAAAAAAABNAAAAbwAAAG4AAAAAAAAAVAAAAHUAAABlAAAAAAAAAFcAAABlAAAAZAAAAAAAAABUAAAAaAAAAHUAAAAAAAAARgAAAHIAAABpAAAAAAAAAFMAAABhAAAAdAAAAAAAAABKYW51YXJ5AEZlYnJ1YXJ5AE1hcmNoAEFwcmlsAE1heQBKdW5lAEp1bHkAQXVndXN0AFNlcHRlbWJlcgBPY3RvYmVyAE5vdmVtYmVyAERlY2VtYmVyAEphbgBGZWIATWFyAEFwcgBKdW4ASnVsAEF1ZwBTZXAAT2N0AE5vdgBEZWMAAABKAAAAYQAAAG4AAAB1AAAAYQAAAHIAAAB5AAAAAAAAAEYAAABlAAAAYgAAAHIAAAB1AAAAYQAAAHIAAAB5AAAAAAAAAE0AAABhAAAAcgAAAGMAAABoAAAAAAAAAEEAAABwAAAAcgAAAGkAAABsAAAAAAAAAE0AAABhAAAAeQAAAAAAAABKAAAAdQAAAG4AAABlAAAAAAAAAEoAAAB1AAAAbAAAAHkAAAAAAAAAQQAAAHUAAABnAAAAdQAAAHMAAAB0AAAAAAAAAFMAAABlAAAAcAAAAHQAAABlAAAAbQAAAGIAAABlAAAAcgAAAAAAAABPAAAAYwAAAHQAAABvAAAAYgAAAGUAAAByAAAAAAAAAE4AAABvAAAAdgAAAGUAAABtAAAAYgAAAGUAAAByAAAAAAAAAEQAAABlAAAAYwAAAGUAAABtAAAAYgAAAGUAAAByAAAAAAAAAEoAAABhAAAAbgAAAAAAAABGAAAAZQAAAGIAAAAAAAAATQAAAGEAAAByAAAAAAAAAEEAAABwAAAAcgAAAAAAAABKAAAAdQAAAG4AAAAAAAAASgAAAHUAAABsAAAAAAAAAEEAAAB1AAAAZwAAAAAAAABTAAAAZQAAAHAAAAAAAAAATwAAAGMAAAB0AAAAAAAAAE4AAABvAAAAdgAAAAAAAABEAAAAZQAAAGMAAAAAAAAAQU0AUE0AAABBAAAATQAAAAAAAABQAAAATQAAAAAAAABhbGxvY2F0b3I8VD46OmFsbG9jYXRlKHNpemVfdCBuKSAnbicgZXhjZWVkcyBtYXhpbXVtIHN1cHBvcnRlZCBzaXplAAAAAAAAOAAARQEAAEYBAABHAQAASAEAAEkBAABKAQAASwEAAAAAAADsOAAAVQEAAFYBAABXAQAAWAEAAFkBAABaAQAAWwEAAAAAAACcRAAAngEAAJ8BAAALAAAATlN0M19fMjE0X19zaGFyZWRfY291bnRFAAAAAFRIAACARAAAcmFuZG9tX2RldmljZSBmYWlsZWQgdG8gb3BlbiAAcmFuZG9tX2RldmljZSBnb3QgRU9GAHJhbmRvbV9kZXZpY2UgZ290IGFuIHVuZXhwZWN0ZWQgZXJyb3IAYmFzaWNfc3RyaW5nACVsZAB2ZWN0b3IAUHVyZSB2aXJ0dWFsIGZ1bmN0aW9uIGNhbGxlZCEAc3RkOjpleGNlcHRpb24AAAAAAABoRQAAoAEAAKEBAACiAQAAU3Q5ZXhjZXB0aW9uAAAAAFRIAABYRQAAAAAAAJRFAAAHAAAAowEAAKQBAABTdDExbG9naWNfZXJyb3IAfEgAAIRFAABoRQAAAAAAAMxFAAAHAAAApQEAAKQBAABTdDE2aW52YWxpZF9hcmd1bWVudAAAAAB8SAAAtEUAAJRFAAAAAAAAAEYAAAcAAACmAQAApAEAAFN0MTJsZW5ndGhfZXJyb3IAAAAAfEgAAOxFAACURQAAU3Q5dHlwZV9pbmZvAAAAAFRIAAAMRgAATjEwX19jeHhhYml2MTE2X19zaGltX3R5cGVfaW5mb0UAAAAAfEgAACRGAAAcRgAATjEwX19jeHhhYml2MTE3X19jbGFzc190eXBlX2luZm9FAAAAfEgAAFRGAABIRgAATjEwX19jeHhhYml2MTE3X19wYmFzZV90eXBlX2luZm9FAAAAfEgAAIRGAABIRgAATjEwX19jeHhhYml2MTE5X19wb2ludGVyX3R5cGVfaW5mb0UAfEgAALRGAACoRgAATjEwX19jeHhhYml2MTIwX19mdW5jdGlvbl90eXBlX2luZm9FAAAAAHxIAADkRgAASEYAAE4xMF9fY3h4YWJpdjEyOV9fcG9pbnRlcl90b19tZW1iZXJfdHlwZV9pbmZvRQAAAHxIAAAYRwAAqEYAAAAAAACYRwAApwEAAKgBAACpAQAAqgEAAKsBAABOMTBfX2N4eGFiaXYxMjNfX2Z1bmRhbWVudGFsX3R5cGVfaW5mb0UAfEgAAHBHAABIRgAAdgAAAFxHAACkRwAARG4AAFxHAACwRwAAYgAAAFxHAAC8RwAAYwAAAFxHAADIRwAAaAAAAFxHAADURwAAYQAAAFxHAADgRwAAcwAAAFxHAADsRwAAdAAAAFxHAAD4RwAAaQAAAFxHAAAESAAAagAAAFxHAAAQSAAAbAAAAFxHAAAcSAAAbQAAAFxHAAAoSAAAZgAAAFxHAAA0SAAAZAAAAFxHAABASAAAAAAAAHhGAACnAQAArAEAAKkBAACqAQAArQEAAK4BAACvAQAAsAEAAAAAAADESAAApwEAALEBAACpAQAAqgEAAK0BAACyAQAAswEAALQBAABOMTBfX2N4eGFiaXYxMjBfX3NpX2NsYXNzX3R5cGVfaW5mb0UAAAAAfEgAAJxIAAB4RgAAAAAAACBJAACnAQAAtQEAAKkBAACqAQAArQEAALYBAAC3AQAAuAEAAE4xMF9fY3h4YWJpdjEyMV9fdm1pX2NsYXNzX3R5cGVfaW5mb0UAAAB8SAAA+EgAAHhGAAAAAAAA2EYAAKcBAAC5AQAAqQEAAKoBAAC6AQAAdm9pZABib29sAGNoYXIAc2lnbmVkIGNoYXIAdW5zaWduZWQgY2hhcgBzaG9ydAB1bnNpZ25lZCBzaG9ydABpbnQAdW5zaWduZWQgaW50AGxvbmcAdW5zaWduZWQgbG9uZwBmbG9hdABkb3VibGUAc3RkOjpzdHJpbmcAc3RkOjpiYXNpY19zdHJpbmc8dW5zaWduZWQgY2hhcj4Ac3RkOjp3c3RyaW5nAGVtc2NyaXB0ZW46OnZhbABlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxjaGFyPgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxzaWduZWQgY2hhcj4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dW5zaWduZWQgY2hhcj4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8c2hvcnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIHNob3J0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIGludD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8bG9uZz4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dW5zaWduZWQgbG9uZz4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50OF90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1aW50OF90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQxNl90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1aW50MTZfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50MzJfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dWludDMyX3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGZsb2F0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxkb3VibGU+AE5TdDNfXzIxMmJhc2ljX3N0cmluZ0loTlNfMTFjaGFyX3RyYWl0c0loRUVOU185YWxsb2NhdG9ySWhFRUVFAADYSAAAQEwAAAAAAAABAAAATAgAAAAAAABOU3QzX18yMTJiYXNpY19zdHJpbmdJd05TXzExY2hhcl90cmFpdHNJd0VFTlNfOWFsbG9jYXRvckl3RUVFRQAA2EgAAJhMAAAAAAAAAQAAAEwIAAAAAAAATjEwZW1zY3JpcHRlbjN2YWxFAABUSAAA8EwAAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWNFRQAAVEgAAAxNAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lhRUUAAFRIAAA0TQAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJaEVFAABUSAAAXE0AAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SXNFRQAAVEgAAIRNAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0l0RUUAAFRIAACsTQAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJaUVFAABUSAAA1E0AAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWpFRQAAVEgAAPxNAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lsRUUAAFRIAAAkTgAATjEwZW1zY3JpcHRlbjExbWVtb3J5X3ZpZXdJbUVFAABUSAAATE4AAE4xMGVtc2NyaXB0ZW4xMW1lbW9yeV92aWV3SWZFRQAAVEgAAHROAABOMTBlbXNjcmlwdGVuMTFtZW1vcnlfdmlld0lkRUUAAFRIAACcTg==");
writeSegment(20168, "CQ==");
writeSegment(20180, "ig==");
writeSegment(20200, "iwAAAAAAAACMAAAAmFEAAAAE");
writeSegment(20244, "/////w==");
writeSegment(20312, "BQ==");
writeSegment(20324, "jQ==");
writeSegment(20348, "jgAAAI8AAACoVQAAAAQ=");
writeSegment(20372, "AQ==");
writeSegment(20387, "Cv////8=");
writeSegment(20456, "WE8AAAAAAAAF");
writeSegment(20476, "ig==");
writeSegment(20500, "jgAAAIwAAACwWQ==");
writeSegment(20524, "Ag==");
writeSegment(20539, "//////8=");
writeSegment(20784, "8F0=");
return asmFunc({
    'Int8Array': Int8Array,
    'Int16Array': Int16Array,
    'Int32Array': Int32Array,
    'Uint8Array': Uint8Array,
    'Uint16Array': Uint16Array,
    'Uint32Array': Uint32Array,
    'Float32Array': Float32Array,
    'Float64Array': Float64Array,
    'NaN': NaN,
    'Infinity': Infinity,
    'Math': Math
  },
  asmLibraryArg,
  wasmMemory.buffer
)

}
)(asmLibraryArg, wasmMemory, wasmTable);
    return {
      'exports': exports
    };
  },

  instantiate: function(binary, info) {
    return {
      then: function(ok, err) {
        ok({
          'instance': new WebAssembly.Instance(new WebAssembly.Module(binary, info))
        });
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];




if (typeof WebAssembly !== 'object') {
  err('no native wasm support detected');
}


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.
var wasmTable = new WebAssembly.Table({
  'initial': 444,
  'maximum': 444 + 0,
  'element': 'anyfunc'
});


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  argTypes = argTypes || [];
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs && !opts) {
    return getCFunc(ident);
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}




// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 1024,
    STACK_BASE = 5269712,
    STACKTOP = STACK_BASE,
    STACK_MAX = 26832,
    DYNAMIC_BASE = 5269712,
    DYNAMICTOP_PTR = 26672;




var TOTAL_STACK = 5242880;

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;







// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
    });
  }


if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['TOTAL_MEMORY'].
INITIAL_TOTAL_MEMORY = buffer.byteLength;
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;










function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  runtimeExited = true;
}

function postRun() {

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}



var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  what = 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';

  // Throw a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  throw new WebAssembly.RuntimeError(what);
}


var memoryInitializer = null;






// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




var wasmBinaryFile = 'a.wasm';
if (!isDataURI(wasmBinaryFile)) {
  wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
  try {
    if (wasmBinary) {
      return new Uint8Array(wasmBinary);
    }

    var binary = tryParseAsDataURI(wasmBinaryFile);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(wasmBinaryFile);
    } else {
      throw "both async and sync fetching of the wasm failed";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // if we don't have the binary yet, and have the Fetch api, use that
  // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
    return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
      if (!response['ok']) {
        throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
      }
      return response['arrayBuffer']();
    }).catch(function () {
      return getBinary();
    });
  }
  // Otherwise, getBinary should be able to get it synchronously
  return new Promise(function(resolve, reject) {
    resolve(getBinary());
  });
}



// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  function receiveInstance(instance, module) {
    var exports = instance.exports;
    Module['asm'] = exports;
    removeRunDependency('wasm-instantiate');
  }
   // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');


  function receiveInstantiatedSource(output) {
    // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
      // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
      // When the regression is fixed, can restore the above USE_PTHREADS-enabled path.
    receiveInstance(output['instance']);
  }


  function instantiateArrayBuffer(receiver) {
    return getBinaryPromise().then(function(binary) {
      return WebAssembly.instantiate(binary, info);
    }).then(receiver, function(reason) {
      err('failed to asynchronously prepare wasm: ' + reason);
      abort(reason);
    });
  }

  // Prefer streaming instantiation if available.
  function instantiateAsync() {
    if (!wasmBinary &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function (response) {
        var result = WebAssembly.instantiateStreaming(response, info);
        return result.then(receiveInstantiatedSource, function(reason) {
            // We expect the most common failure cause to be a bad MIME type for the binary,
            // in which case falling back to ArrayBuffer instantiation should work.
            err('wasm streaming compile failed: ' + reason);
            err('falling back to ArrayBuffer instantiation');
            instantiateArrayBuffer(receiveInstantiatedSource);
          });
      });
    } else {
      return instantiateArrayBuffer(receiveInstantiatedSource);
    }
  }
  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  instantiateAsync();
  return {}; // no exports yet; we'll fill them in later
}


// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};




// STATICTOP = STATIC_BASE + 25808;
/* global initializers */  __ATINIT__.push({ func: function() { ___wasm_call_ctors() } });




/* no memory initializer */
// {{PRE_LIBRARY}}


  function demangle(func) {
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error(0);
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit(
  ) {
  return _atexit.apply(null, arguments)
  }

  
  var ___exception_infos={};
  
  var ___exception_last=0;function ___cxa_throw(ptr, type, destructor) {
      ___exception_infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      ___exception_last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exceptions++;
      }
      throw ptr;
    }

  function ___lock() {}

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }function ___map_file(pathname, size) {
      ___setErrNo(63);
      return -1;
    }

  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // If the buffer is located in main memory (HEAP), and if
          // memory can grow, we can't hold on to references of the
          // memory buffer, as they may get invalidated. That means we
          // need to do copy its contents.
          if (buffer.buffer === HEAP8.buffer) {
            canOwn = false;
          }
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                contents.buffer === buffer.buffer ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            // malloc() can lead to growing the heap. If targeting the heap, we need to
            // re-acquire the heap buffer object in case growth had occurred.
            var fromHeap = (buffer.buffer == HEAP8.buffer);
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            (fromHeap ? HEAP8 : buffer).set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          err("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          err("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          err("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            err("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          err("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          err("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("random_device"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
          };
          this.setErrno(errno);
          this.message = 'FS error';
  
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function() {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function(fd) {
        // TODO: when all syscalls use wasi, can remove the next line
        if (fd === undefined) fd = SYSCALLS.get();
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function() {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        return low;
      },getZero:function() {
        SYSCALLS.get();
      }};function ___syscall3(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // read
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.read(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get(); // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function __emscripten_syscall_munmap(addr, len) {
      if (addr === -1 || len === 0) {
        return -28;
      }
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags, info.offset);
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    }function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      return __emscripten_syscall_munmap(addr, len);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___unlock() {}

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }var embind_charCodes=undefined;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  
  var awaitingDependencies={};
  
  var registeredTypes={};
  
  var typeDependencies={};
  
  
  
  
  
  
  var char_0=48;
  
  var char_9=57;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }var BindingError=undefined;function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  var InternalError=undefined;function throwInternalError(message) {
      throw new InternalError(message);
    }function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
          return false;
      }
      if (!(other instanceof ClassHandle)) {
          return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
          left = leftClass.upcast(left);
          leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
          right = rightClass.upcast(right);
          rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  
  function shallowCopyInternalPointer(o) {
      return {
          count: o.count,
          deleteScheduled: o.deleteScheduled,
          preservePointerOnDelete: o.preservePointerOnDelete,
          ptr: o.ptr,
          ptrType: o.ptrType,
          smartPtr: o.smartPtr,
          smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }
  
  
  var finalizationGroup=false;
  
  function detachFinalizer(handle) {}
  
  
  function runDestructor($$) {
      if ($$.smartPtr) {
          $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
          $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }function releaseClassHandle($$) {
      $$.count.value -= 1;
      var toDelete = 0 === $$.count.value;
      if (toDelete) {
          runDestructor($$);
      }
    }function attachFinalizer(handle) {
      if ('undefined' === typeof FinalizationGroup) {
          attachFinalizer = function (handle) { return handle; };
          return handle;
      }
      // If the running environment has a FinalizationGroup (see
      // https://github.com/tc39/proposal-weakrefs), then attach finalizers
      // for class handles.  We check for the presence of FinalizationGroup
      // at run-time, not build-time.
      finalizationGroup = new FinalizationGroup(function (iter) {
          for (var result = iter.next(); !result.done; result = iter.next()) {
              var $$ = result.value;
              if (!$$.ptr) {
                  console.warn('object already deleted: ' + $$.ptr);
              } else {
                  releaseClassHandle($$);
              }
          }
      });
      attachFinalizer = function(handle) {
          finalizationGroup.register(handle, handle.$$, handle.$$);
          return handle;
      };
      detachFinalizer = function(handle) {
          finalizationGroup.unregister(handle.$$);
      };
      return attachFinalizer(handle);
    }function ClassHandle_clone() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
          this.$$.count.value += 1;
          return this;
      } else {
          var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
              $$: {
                  value: shallowCopyInternalPointer(this.$$),
              }
          }));
  
          clone.$$.count.value += 1;
          clone.$$.deleteScheduled = false;
          return clone;
      }
    }
  
  function ClassHandle_delete() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
  
      detachFinalizer(this);
      releaseClassHandle(this.$$);
  
      if (!this.$$.preservePointerOnDelete) {
          this.$$.smartPtr = undefined;
          this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  var delayFunction=undefined;
  
  var deletionQueue=[];
  
  function flushPendingDeletes() {
      while (deletionQueue.length) {
          var obj = deletionQueue.pop();
          obj.$$.deleteScheduled = false;
          obj['delete']();
      }
    }function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
          throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
          throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }function ClassHandle() {
    }
  
  var registeredPointers={};
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  
  function RegisteredClass(
      name,
      constructor,
      instancePrototype,
      rawDestructor,
      baseClass,
      getActualType,
      upcast,
      downcast
    ) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
          if (!ptrClass.upcast) {
              throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
          }
          ptr = ptrClass.upcast(ptr);
          ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
  
          if (this.isSmartPointer) {
              ptr = this.rawConstructor();
              if (destructors !== null) {
                  destructors.push(this.rawDestructor, ptr);
              }
              return ptr;
          } else {
              return 0;
          }
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
          // TODO: this is not strictly true
          // We could support BY_EMVAL conversions from raw pointers to smart pointers
          // because the smart pointer can hold a reference to the handle
          if (undefined === handle.$$.smartPtr) {
              throwBindingError('Passing raw pointer to smart pointer is illegal');
          }
  
          switch (this.sharingPolicy) {
              case 0: // NONE
                  // no upcasting
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                  }
                  break;
  
              case 1: // INTRUSIVE
                  ptr = handle.$$.smartPtr;
                  break;
  
              case 2: // BY_EMVAL
                  if (handle.$$.smartPtrType === this) {
                      ptr = handle.$$.smartPtr;
                  } else {
                      var clonedHandle = handle['clone']();
                      ptr = this.rawShare(
                          ptr,
                          __emval_register(function() {
                              clonedHandle['delete']();
                          })
                      );
                      if (destructors !== null) {
                          destructors.push(this.rawDestructor, ptr);
                      }
                  }
                  break;
  
              default:
                  throwBindingError('Unsupporting sharing policy');
          }
      }
      return ptr;
    }
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
          if (this.isReference) {
              throwBindingError('null is not a valid ' + this.name);
          }
          return 0;
      }
  
      if (!handle.$$) {
          throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
          throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
          ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
          this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
          handle['delete']();
      }
    }
  
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
          return ptr;
      }
      if (undefined === desiredClass.baseClass) {
          return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
          return null;
      }
      return desiredClass.downcast(rv);
    }
  
  
  
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
          if (registeredInstances.hasOwnProperty(k)) {
              rv.push(registeredInstances[k]);
          }
      }
      return rv;
    }
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
          delayFunction(flushPendingDeletes);
      }
    }function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }var registeredInstances={};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
          throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
          throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return attachFinalizer(Object.create(prototype, {
          $$: {
              value: record,
          },
      }));
    }function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
          this.destructor(ptr);
          return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
          // JS object has been neutered, time to repopulate it
          if (0 === registeredInstance.$$.count.value) {
              registeredInstance.$$.ptr = rawPointer;
              registeredInstance.$$.smartPtr = ptr;
              return registeredInstance['clone']();
          } else {
              // else, just increment reference count on existing object
              // it already has a reference to the smart pointer
              var rv = registeredInstance['clone']();
              this.destructor(ptr);
              return rv;
          }
      }
  
      function makeDefaultHandle() {
          if (this.isSmartPointer) {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this.pointeeType,
                  ptr: rawPointer,
                  smartPtrType: this,
                  smartPtr: ptr,
              });
          } else {
              return makeClassHandle(this.registeredClass.instancePrototype, {
                  ptrType: this,
                  ptr: ptr,
              });
          }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
          return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
          toType = registeredPointerRecord.constPointerType;
      } else {
          toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
          return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
              smartPtrType: this,
              smartPtr: ptr,
          });
      } else {
          return makeClassHandle(toType.registeredClass.instancePrototype, {
              ptrType: toType,
              ptr: dp,
          });
      }
    }function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
          if (isConst) {
              this['toWireType'] = constNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          } else {
              this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
              this.destructorFunction = null;
          }
      } else {
          this['toWireType'] = genericPointerToWireType;
          // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
          // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
          // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
          //       craftInvokerFunction altogether.
      }
    }
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  var UnboundTypeError=undefined;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }function __embind_register_class(
      rawType,
      rawPointerType,
      rawConstPointerType,
      baseClassRawType,
      getActualTypeSignature,
      getActualType,
      upcastSignature,
      upcast,
      downcastSignature,
      downcast,
      name,
      destructorSignature,
      rawDestructor
    ) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
          upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
          downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
          // this code cannot run if baseClassRawType is zero
          throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
          [rawType, rawPointerType, rawConstPointerType],
          baseClassRawType ? [baseClassRawType] : [],
          function(base) {
              base = base[0];
  
              var baseClass;
              var basePrototype;
              if (baseClassRawType) {
                  baseClass = base.registeredClass;
                  basePrototype = baseClass.instancePrototype;
              } else {
                  basePrototype = ClassHandle.prototype;
              }
  
              var constructor = createNamedFunction(legalFunctionName, function() {
                  if (Object.getPrototypeOf(this) !== instancePrototype) {
                      throw new BindingError("Use 'new' to construct " + name);
                  }
                  if (undefined === registeredClass.constructor_body) {
                      throw new BindingError(name + " has no accessible constructor");
                  }
                  var body = registeredClass.constructor_body[arguments.length];
                  if (undefined === body) {
                      throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                  }
                  return body.apply(this, arguments);
              });
  
              var instancePrototype = Object.create(basePrototype, {
                  constructor: { value: constructor },
              });
  
              constructor.prototype = instancePrototype;
  
              var registeredClass = new RegisteredClass(
                  name,
                  constructor,
                  instancePrototype,
                  rawDestructor,
                  baseClass,
                  getActualType,
                  upcast,
                  downcast);
  
              var referenceConverter = new RegisteredPointer(
                  name,
                  registeredClass,
                  true,
                  false,
                  false);
  
              var pointerConverter = new RegisteredPointer(
                  name + '*',
                  registeredClass,
                  false,
                  false,
                  false);
  
              var constPointerConverter = new RegisteredPointer(
                  name + ' const*',
                  registeredClass,
                  false,
                  true,
                  false);
  
              registeredPointers[rawType] = {
                  pointerType: pointerConverter,
                  constPointerType: constPointerConverter
              };
  
              replacePublicSymbol(legalFunctionName, constructor);
  
              return [referenceConverter, pointerConverter, constPointerConverter];
          }
      );
    }

  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      assert(argCount > 0);
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
      var args = [rawConstructor];
      var destructors = [];
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = 'constructor ' + classType.name;
  
          if (undefined === classType.registeredClass.constructor_body) {
              classType.registeredClass.constructor_body = [];
          }
          if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
              throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
          }
          classType.registeredClass.constructor_body[argCount - 1] = function unboundTypeHandler() {
              throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
          };
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
              classType.registeredClass.constructor_body[argCount - 1] = function constructor_body() {
                  if (arguments.length !== argCount - 1) {
                      throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                  }
                  destructors.length = 0;
                  args.length = argCount;
                  for (var i = 1; i < argCount; ++i) {
                      args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                  }
  
                  var ptr = invoker.apply(null, args);
                  runDestructors(destructors);
  
                  return argTypes[0]['fromWireType'](ptr);
              };
              return [];
          });
          return [];
      });
    }

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }function __embind_register_class_function(
      rawClassType,
      methodName,
      argCount,
      rawArgTypesAddr, // [ReturnType, ThisType, Args...]
      invokerSignature,
      rawInvoker,
      context,
      isPureVirtual
    ) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
          classType = classType[0];
          var humanName = classType.name + '.' + methodName;
  
          if (isPureVirtual) {
              classType.registeredClass.pureVirtualFunctions.push(methodName);
          }
  
          function unboundTypesHandler() {
              throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
          }
  
          var proto = classType.registeredClass.instancePrototype;
          var method = proto[methodName];
          if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
              // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
              unboundTypesHandler.argCount = argCount - 2;
              unboundTypesHandler.className = classType.name;
              proto[methodName] = unboundTypesHandler;
          } else {
              // There was an existing function with the same name registered. Set up a function overload routing table.
              ensureOverloadTable(proto, methodName, humanName);
              proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
          }
  
          whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
  
              var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);
  
              // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
              // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
              if (undefined === proto[methodName].overloadTable) {
                  // Set argCount in case an overload is registered later
                  memberFunction.argCount = argCount - 2;
                  proto[methodName] = memberFunction;
              } else {
                  proto[methodName].overloadTable[argCount - 2] = memberFunction;
              }
  
              return [];
          });
          return [];
      });
    }

  
  
  var emval_free_list=[];
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
  
              var str;
              if(stdStringIsUTF8) {
                  //ensure null termination at one-past-end byte if not present yet
                  var endChar = HEAPU8[value + 4 + length];
                  var endCharSwap = 0;
                  if(endChar != 0)
                  {
                    endCharSwap = endChar;
                    HEAPU8[value + 4 + length] = 0;
                  }
  
                  var decodeStartPtr = value + 4;
                  //looping here to support possible embedded '0' bytes
                  for (var i = 0; i <= length; ++i) {
                    var currentBytePtr = value + 4 + i;
                    if(HEAPU8[currentBytePtr] == 0)
                    {
                      var stringSegment = UTF8ToString(decodeStartPtr);
                      if(str === undefined)
                        str = stringSegment;
                      else
                      {
                        str += String.fromCharCode(0);
                        str += stringSegment;
                      }
                      decodeStartPtr = currentBytePtr + 1;
                    }
                  }
  
                  if(endCharSwap != 0)
                    HEAPU8[value + 4 + length] = endCharSwap;
              } else {
                  var a = new Array(length);
                  for (var i = 0; i < length; ++i) {
                      a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
                  }
                  str = a.join('');
              }
  
              _free(value);
  
              return str;
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              var getLength;
              var valueIsOfTypeString = (typeof value === 'string');
  
              if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
                  throwBindingError('Cannot pass non-string to std::string');
              }
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  getLength = function() {return lengthBytesUTF8(value);};
              } else {
                  getLength = function() {return value.length;};
              }
  
              // assumes 4-byte alignment
              var length = getLength();
              var ptr = _malloc(4 + length + 1);
              HEAPU32[ptr >> 2] = length;
  
              if (stdStringIsUTF8 && valueIsOfTypeString) {
                  stringToUTF8(value, ptr + 4, length + 1);
              } else {
                  if(valueIsOfTypeString) {
                      for (var i = 0; i < length; ++i) {
                          var charCode = value.charCodeAt(i);
                          if (charCode > 255) {
                              _free(ptr);
                              throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                          }
                          HEAPU8[ptr + 4 + i] = charCode;
                      }
                  } else {
                      for (var i = 0; i < length; ++i) {
                          HEAPU8[ptr + 4 + i] = value[i];
                      }
                  }
              }
  
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by emscripten_resize_heap().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              var HEAP = getHeap();
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  function _abort() {
      abort();
    }

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

  function _emscripten_get_sbrk_ptr() {
      return 26672;
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('OOM');
    }
  
  function emscripten_realloc_buffer(size) {
      try {
        // round size grow request up to wasm page size (fixed 64KB per spec)
        wasmMemory.grow((size - buffer.byteLength + 65535) >> 16); // .grow() takes a delta compared to the previous size
        updateGlobalBufferAndViews(wasmMemory.buffer);
        return 1 /*success*/;
      } catch(e) {
      }
    }function _emscripten_resize_heap(requestedSize) {
      var oldSize = _emscripten_get_heap_size();
      // With pthreads, races can happen (another thread might increase the size in between), so return a failure, and let the caller retry.
  
  
      var PAGE_MULTIPLE = 65536;
  
      // Memory resize rules:
      // 1. When resizing, always produce a resized heap that is at least 16MB (to avoid tiny heap sizes receiving lots of repeated resizes at startup)
      // 2. Always increase heap size to at least the requested size, rounded up to next page multiple.
      // 3a. If MEMORY_GROWTH_LINEAR_STEP == -1, excessively resize the heap geometrically: increase the heap size according to 
      //                                         MEMORY_GROWTH_GEOMETRIC_STEP factor (default +20%),
      //                                         At most overreserve by MEMORY_GROWTH_GEOMETRIC_CAP bytes (default 96MB).
      // 3b. If MEMORY_GROWTH_LINEAR_STEP != -1, excessively resize the heap linearly: increase the heap size by at least MEMORY_GROWTH_LINEAR_STEP bytes.
      // 4. Max size for the heap is capped at 2048MB-PAGE_MULTIPLE, or by WASM_MEM_MAX, or by ASAN limit, depending on which is smallest
      // 5. If we were unable to allocate as much memory, it may be due to over-eager decision to excessively reserve due to (3) above.
      //    Hence if an allocation fails, cut down on the amount of excess growth, in an attempt to succeed to perform a smaller allocation.
  
      var maxHeapSize = 2147483648 - PAGE_MULTIPLE;
      if (requestedSize > maxHeapSize) {
        return false;
      }
  
      var minHeapSize = 16777216;
  
      // Loop through potential heap size increases. If we attempt a too eager reservation that fails, cut down on the
      // attempted size and reserve a smaller bump instead. (max 3 times, chosen somewhat arbitrarily)
      for(var cutDown = 1; cutDown <= 4; cutDown *= 2) {
        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown); // ensure geometric growth
        // but limit overreserving (default to capping at +96MB overgrowth at most)
        overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296 );
  
  
        var newSize = Math.min(maxHeapSize, alignUp(Math.max(minHeapSize, requestedSize, overGrownHeapSize), PAGE_MULTIPLE));
  
        var replacement = emscripten_realloc_buffer(newSize);
        if (replacement) {
  
          return true;
        }
      }
      return false;
    }

  
  
  var ENV={};function _emscripten_get_environ() {
      if (!_emscripten_get_environ.strings) {
        // Default values.
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          // Browser language detection #8751
          'LANG': ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8',
          '_': thisProgram
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(x + '=' + env[x]);
        }
        _emscripten_get_environ.strings = strings;
      }
      return _emscripten_get_environ.strings;
    }function _environ_get(__environ, environ_buf) {
      var strings = _emscripten_get_environ();
      var bufSize = 0;
      strings.forEach(function(string, i) {
        var ptr = environ_buf + bufSize;
        HEAP32[(((__environ)+(i * 4))>>2)]=ptr;
        writeAsciiToMemory(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    }

  function _environ_sizes_get(penviron_count, penviron_buf_size) {
      var strings = _emscripten_get_environ();
      HEAP32[((penviron_count)>>2)]=strings.length;
      var bufSize = 0;
      strings.forEach(function(string) {
        bufSize += string.length + 1;
      });
      HEAP32[((penviron_buf_size)>>2)]=bufSize;
      return 0;
    }

  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  
  function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      var aligned_dest_end = 0;
      var block_aligned_dest_end = 0;
      var dest_end = 0;
      // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
      if ((num|0) >= 8192) {
        _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
        return dest|0;
      }
  
      ret = dest|0;
      dest_end = (dest + num)|0;
      if ((dest&3) == (src&3)) {
        // The initial unaligned < 4-byte front.
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        aligned_dest_end = (dest_end & -4)|0;
        block_aligned_dest_end = (aligned_dest_end - 64)|0;
        while ((dest|0) <= (block_aligned_dest_end|0) ) {
          HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
          HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
          HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
          HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
          HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
          HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
          HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
          HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
          HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
          HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
          HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
          HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
          HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
          HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
          HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
          HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
          dest = (dest+64)|0;
          src = (src+64)|0;
        }
        while ((dest|0) < (aligned_dest_end|0) ) {
          HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
          dest = (dest+4)|0;
          src = (src+4)|0;
        }
      } else {
        // In the unaligned copy case, unroll a bit as well.
        aligned_dest_end = (dest_end - 4)|0;
        while ((dest|0) < (aligned_dest_end|0) ) {
          HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
          HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
          HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
          HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
          dest = (dest+4)|0;
          src = (src+4)|0;
        }
      }
      // The remaining unaligned < 4 byte tail.
      while ((dest|0) < (dest_end|0)) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
      }
      return ret|0;
    }

  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
      end = (ptr + num)|0;
  
      value = value & 0xff;
      if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
        while ((ptr&3) != 0) {
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
  
        aligned_end = (end & -4)|0;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
  
        block_aligned_end = (aligned_end - 64)|0;
  
        while((ptr|0) <= (block_aligned_end|0)) {
          HEAP32[((ptr)>>2)]=value4;
          HEAP32[(((ptr)+(4))>>2)]=value4;
          HEAP32[(((ptr)+(8))>>2)]=value4;
          HEAP32[(((ptr)+(12))>>2)]=value4;
          HEAP32[(((ptr)+(16))>>2)]=value4;
          HEAP32[(((ptr)+(20))>>2)]=value4;
          HEAP32[(((ptr)+(24))>>2)]=value4;
          HEAP32[(((ptr)+(28))>>2)]=value4;
          HEAP32[(((ptr)+(32))>>2)]=value4;
          HEAP32[(((ptr)+(36))>>2)]=value4;
          HEAP32[(((ptr)+(40))>>2)]=value4;
          HEAP32[(((ptr)+(44))>>2)]=value4;
          HEAP32[(((ptr)+(48))>>2)]=value4;
          HEAP32[(((ptr)+(52))>>2)]=value4;
          HEAP32[(((ptr)+(56))>>2)]=value4;
          HEAP32[(((ptr)+(60))>>2)]=value4;
          ptr = (ptr + 64)|0;
        }
  
        while ((ptr|0) < (aligned_end|0) ) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      // The remaining bytes.
      while ((ptr|0) < (end|0)) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }
      return (end-num)|0;
    }

  function _setTempRet0($i) {
      setTempRet0(($i) | 0);
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? UTF8ToString(tm_zone) : ''
      };
  
      var pattern = UTF8ToString(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate time representation
        // Modified Conversion Specifiers
        '%Ec': '%c',                      // Replaced by the locale's alternative appropriate date and time representation.
        '%EC': '%C',                      // Replaced by the name of the base year (period) in the locale's alternative representation.
        '%Ex': '%m/%d/%y',                // Replaced by the locale's alternative date representation.
        '%EX': '%H:%M:%S',                // Replaced by the locale's alternative time representation.
        '%Ey': '%y',                      // Replaced by the offset from %EC (year only) in the locale's alternative representation.
        '%EY': '%Y',                      // Replaced by the full alternative year representation.
        '%Od': '%d',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading zeros if there is any alternative symbol for zero; otherwise, with leading <space> characters.
        '%Oe': '%e',                      // Replaced by the day of the month, using the locale's alternative numeric symbols, filled as needed with leading <space> characters.
        '%OH': '%H',                      // Replaced by the hour (24-hour clock) using the locale's alternative numeric symbols.
        '%OI': '%I',                      // Replaced by the hour (12-hour clock) using the locale's alternative numeric symbols.
        '%Om': '%m',                      // Replaced by the month using the locale's alternative numeric symbols.
        '%OM': '%M',                      // Replaced by the minutes using the locale's alternative numeric symbols.
        '%OS': '%S',                      // Replaced by the seconds using the locale's alternative numeric symbols.
        '%Ou': '%u',                      // Replaced by the weekday as a number in the locale's alternative representation (Monday=1).
        '%OU': '%U',                      // Replaced by the week number of the year (Sunday as the first day of the week, rules corresponding to %U ) using the locale's alternative numeric symbols.
        '%OV': '%V',                      // Replaced by the week number of the year (Monday as the first day of the week, rules corresponding to %V ) using the locale's alternative numeric symbols.
        '%Ow': '%w',                      // Replaced by the number of the weekday (Sunday=0) using the locale's alternative numeric symbols.
        '%OW': '%W',                      // Replaced by the week number of the year (Monday as the first day of the week) using the locale's alternative numeric symbols.
        '%Oy': '%y',                      // Replaced by the year (offset from %C ) using the locale's alternative numeric symbols.
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      }
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      }
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        }
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      }
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      }
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else {
            return thisDate.getFullYear()-1;
          }
      }
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year.
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes
          // January 4th, which is also the week that includes the first Thursday of the year, and
          // is also the first week that contains at least four days in the year.
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of
          // the last week of the preceding year; thus, for Saturday 2nd January 1999,
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th,
          // or 31st is a Monday, it and any following days are part of week 1 of the following year.
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
  
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          return date.tm_wday || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Sunday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week)
          // as a decimal number [01,53]. If the week containing 1 January has four
          // or more days in the new year, then it is considered week 1.
          // Otherwise, it is the last week of the previous year, and the next week is week 1.
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          }
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          return date.tm_wday;
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53].
          // The first Monday of January is the first day of week 1;
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      }
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }
FS.staticInit();;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_ClassHandle();
init_RegisteredPointer();
init_embind();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;
var ASSERTIONS = false;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Int8Array,Int32Array

var asmGlobalArg = {};
var asmLibraryArg = { "__cxa_allocate_exception": ___cxa_allocate_exception, "__cxa_atexit": ___cxa_atexit, "__cxa_throw": ___cxa_throw, "__lock": ___lock, "__map_file": ___map_file, "__syscall3": ___syscall3, "__syscall5": ___syscall5, "__syscall91": ___syscall91, "__unlock": ___unlock, "_embind_register_bool": __embind_register_bool, "_embind_register_class": __embind_register_class, "_embind_register_class_constructor": __embind_register_class_constructor, "_embind_register_class_function": __embind_register_class_function, "_embind_register_emval": __embind_register_emval, "_embind_register_float": __embind_register_float, "_embind_register_integer": __embind_register_integer, "_embind_register_memory_view": __embind_register_memory_view, "_embind_register_std_string": __embind_register_std_string, "_embind_register_std_wstring": __embind_register_std_wstring, "_embind_register_void": __embind_register_void, "abort": _abort, "emscripten_get_sbrk_ptr": _emscripten_get_sbrk_ptr, "emscripten_memcpy_big": _emscripten_memcpy_big, "emscripten_resize_heap": _emscripten_resize_heap, "environ_get": _environ_get, "environ_sizes_get": _environ_sizes_get, "fd_close": _fd_close, "fd_read": _fd_read, "fd_seek": _fd_seek, "fd_write": _fd_write, "getTempRet0": getTempRet0, "memory": wasmMemory, "setTempRet0": setTempRet0, "strftime_l": _strftime_l, "table": wasmTable, "time": _time };
var asm = createWasm();
Module["asm"] = asm;
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = function() {
  return (___wasm_call_ctors = Module["___wasm_call_ctors"] = Module["asm"]["__wasm_call_ctors"]).apply(null, arguments);
};

var _malloc = Module["_malloc"] = function() {
  return (_malloc = Module["_malloc"] = Module["asm"]["malloc"]).apply(null, arguments);
};

var _main = Module["_main"] = function() {
  return (_main = Module["_main"] = Module["asm"]["main"]).apply(null, arguments);
};

var ___errno_location = Module["___errno_location"] = function() {
  return (___errno_location = Module["___errno_location"] = Module["asm"]["__errno_location"]).apply(null, arguments);
};

var _setThrew = Module["_setThrew"] = function() {
  return (_setThrew = Module["_setThrew"] = Module["asm"]["setThrew"]).apply(null, arguments);
};

var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = function() {
  return (__ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = Module["asm"]["_ZSt18uncaught_exceptionv"]).apply(null, arguments);
};

var _free = Module["_free"] = function() {
  return (_free = Module["_free"] = Module["asm"]["free"]).apply(null, arguments);
};

var ___getTypeName = Module["___getTypeName"] = function() {
  return (___getTypeName = Module["___getTypeName"] = Module["asm"]["__getTypeName"]).apply(null, arguments);
};

var ___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = function() {
  return (___embind_register_native_and_builtin_types = Module["___embind_register_native_and_builtin_types"] = Module["asm"]["__embind_register_native_and_builtin_types"]).apply(null, arguments);
};

var stackSave = Module["stackSave"] = function() {
  return (stackSave = Module["stackSave"] = Module["asm"]["stackSave"]).apply(null, arguments);
};

var stackAlloc = Module["stackAlloc"] = function() {
  return (stackAlloc = Module["stackAlloc"] = Module["asm"]["stackAlloc"]).apply(null, arguments);
};

var stackRestore = Module["stackRestore"] = function() {
  return (stackRestore = Module["stackRestore"] = Module["asm"]["stackRestore"]).apply(null, arguments);
};

var __growWasmMemory = Module["__growWasmMemory"] = function() {
  return (__growWasmMemory = Module["__growWasmMemory"] = Module["asm"]["__growWasmMemory"]).apply(null, arguments);
};

var dynCall_ii = Module["dynCall_ii"] = function() {
  return (dynCall_ii = Module["dynCall_ii"] = Module["asm"]["dynCall_ii"]).apply(null, arguments);
};

var dynCall_vi = Module["dynCall_vi"] = function() {
  return (dynCall_vi = Module["dynCall_vi"] = Module["asm"]["dynCall_vi"]).apply(null, arguments);
};

var dynCall_iiii = Module["dynCall_iiii"] = function() {
  return (dynCall_iiii = Module["dynCall_iiii"] = Module["asm"]["dynCall_iiii"]).apply(null, arguments);
};

var dynCall_viii = Module["dynCall_viii"] = function() {
  return (dynCall_viii = Module["dynCall_viii"] = Module["asm"]["dynCall_viii"]).apply(null, arguments);
};

var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  return (dynCall_iiiii = Module["dynCall_iiiii"] = Module["asm"]["dynCall_iiiii"]).apply(null, arguments);
};

var dynCall_v = Module["dynCall_v"] = function() {
  return (dynCall_v = Module["dynCall_v"] = Module["asm"]["dynCall_v"]).apply(null, arguments);
};

var dynCall_vii = Module["dynCall_vii"] = function() {
  return (dynCall_vii = Module["dynCall_vii"] = Module["asm"]["dynCall_vii"]).apply(null, arguments);
};

var dynCall_viijii = Module["dynCall_viijii"] = function() {
  return (dynCall_viijii = Module["dynCall_viijii"] = Module["asm"]["dynCall_viijii"]).apply(null, arguments);
};

var dynCall_viiii = Module["dynCall_viiii"] = function() {
  return (dynCall_viiii = Module["dynCall_viiii"] = Module["asm"]["dynCall_viiii"]).apply(null, arguments);
};

var dynCall_iii = Module["dynCall_iii"] = function() {
  return (dynCall_iii = Module["dynCall_iii"] = Module["asm"]["dynCall_iii"]).apply(null, arguments);
};

var dynCall_i = Module["dynCall_i"] = function() {
  return (dynCall_i = Module["dynCall_i"] = Module["asm"]["dynCall_i"]).apply(null, arguments);
};

var dynCall_jiji = Module["dynCall_jiji"] = function() {
  return (dynCall_jiji = Module["dynCall_jiji"] = Module["asm"]["dynCall_jiji"]).apply(null, arguments);
};

var dynCall_iidiiii = Module["dynCall_iidiiii"] = function() {
  return (dynCall_iidiiii = Module["dynCall_iidiiii"] = Module["asm"]["dynCall_iidiiii"]).apply(null, arguments);
};

var dynCall_iiiiii = Module["dynCall_iiiiii"] = function() {
  return (dynCall_iiiiii = Module["dynCall_iiiiii"] = Module["asm"]["dynCall_iiiiii"]).apply(null, arguments);
};

var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = function() {
  return (dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = Module["asm"]["dynCall_iiiiiiiii"]).apply(null, arguments);
};

var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = function() {
  return (dynCall_iiiiiii = Module["dynCall_iiiiiii"] = Module["asm"]["dynCall_iiiiiii"]).apply(null, arguments);
};

var dynCall_iiiiij = Module["dynCall_iiiiij"] = function() {
  return (dynCall_iiiiij = Module["dynCall_iiiiij"] = Module["asm"]["dynCall_iiiiij"]).apply(null, arguments);
};

var dynCall_iiiiid = Module["dynCall_iiiiid"] = function() {
  return (dynCall_iiiiid = Module["dynCall_iiiiid"] = Module["asm"]["dynCall_iiiiid"]).apply(null, arguments);
};

var dynCall_iiiiijj = Module["dynCall_iiiiijj"] = function() {
  return (dynCall_iiiiijj = Module["dynCall_iiiiijj"] = Module["asm"]["dynCall_iiiiijj"]).apply(null, arguments);
};

var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = function() {
  return (dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = Module["asm"]["dynCall_iiiiiiii"]).apply(null, arguments);
};

var dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = function() {
  return (dynCall_iiiiiijj = Module["dynCall_iiiiiijj"] = Module["asm"]["dynCall_iiiiiijj"]).apply(null, arguments);
};

var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  return (dynCall_viiiiii = Module["dynCall_viiiiii"] = Module["asm"]["dynCall_viiiiii"]).apply(null, arguments);
};

var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  return (dynCall_viiiii = Module["dynCall_viiiii"] = Module["asm"]["dynCall_viiiii"]).apply(null, arguments);
};




// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;














































































var calledRun;


/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {

  var entryFunction = Module['_main'];


  var argc = 0;
  var argv = 0;


  try {


    var ret = entryFunction(argc, argv);


    // In PROXY_TO_PTHREAD builds, we should never exit the runtime below, as execution is asynchronously handed
    // off to a pthread.
    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'unwind') {
      // running an evented main loop, don't immediately exit
      noExitRuntime = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      quit_(1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
}
Module['run'] = run;


function exit(status, implicit) {

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}



